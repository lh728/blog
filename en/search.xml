<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo switch language, suitable for any theme</title>
    <url>/en/2023/05/20/Hexo%20switch%20language,%20suitable%20for%20any%20theme/</url>
    <content><![CDATA[<p>This article mainly discusses how Hexo achieves internationalization in the simplest way, and this method is highly applicable. I personally think that there is no requirement for which theme to use.</p>
<h1 id="Ideal-Solution"><a href="#Ideal-Solution" class="headerlink" title="Ideal Solution"></a>Ideal Solution</h1><p>There is a button on the home page, by clicking this button, you can switch the language page with one click (the example of this blog will be Chinese and English). At the same time, the realization of this method does not need to buy a new domain name.</p>
<p>It is worth noting that this method is not a direct translation, so you need to maintain N blog files of the post at the same time (N is the number of your languages), so if you need to update the blog, you need to update N files at the same time.</p>
<p>The following implementation process will use Chinese and English as examples. For more languages, please refer to this tutorial:</p>
<h2 id="Implementation-Process"><a href="#Implementation-Process" class="headerlink" title="Implementation Process"></a>Implementation Process</h2><p>（1）Divide the page folder, assuming that your original files are stored in a folder called hexo, which mainly stores Chinese files. Now create a new folder called hexo-en to store the English folder. Note: they are siblings!</p>
<p>The built folder should be as follows:</p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(1).png" alt="文件夹位置展示"></p>
<p>(2) Copy all files except node_modules from hexo to hexoen, separate the site</p>
<p>(3) Next, modify the contents of the <strong>_config.yml</strong> files of the two hexo files. The first one in the figure below is hexo, and the second one is hexo-en: (this step is to modify the main language of website)</p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(2).png" alt="hexo"></p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(3).png" alt="hexo-en"></p>
<p>(4) Continue to modify the root directory url and root of <strong>_config.yml</strong>, the first one in the figure below is hexo, and the second one is hexo-en:</p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(4).png" alt="hexo"></p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(5).png" alt="hexo-en"></p>
<p>(5) Modify the jump link of your own menu corresponding to the theme. Note that there is a hint here—**You can jump to the link of your own github.io&#x2F;en, and you can also jump to the link of your own domain name&#x2F;en . I don’t know why the jump to github.io failed here, and 404 was displayed, but the jump to the domain name thellu.com&#x2F;en succeeded. **You can choose the jump address according to your actual situation.</p>
<p>In addition, note that if you have a Chinese homepage, the menu should be set to English; if you are an English homepage, the menu should be set to Chinese.</p>
<p>The first picture below is hexo, and the second one is hexo-en:</p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(6).png" alt="hexo"></p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(7).png" alt="hexo-en"></p>
<p>(6) Congratulations, the basic configuration is now complete! Now execute <strong>npm install</strong> in the hexoen folder to install the required plugins.</p>
<p>(7) Finally, modify the command that you submit files to github every time, you need to use cp to merge and submit files every time. I am using an absolute path here, so it is convenient to modify the address when cd path:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /d/Blog/hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd /d/Blog/hexoen &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd /d/Blog/hexo &amp;&amp; cp -r /d/Blog/hexoen/public/. /d/Blog/hexo/public/en/ &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<p>(8) Congratulations, the configuration is now complete! You can check to see if your website has successfully redirected the page. The only downside is that clicking will jump to a new page instead of updating the old one.</p>
<h2 id="Common-Error"><a href="#Common-Error" class="headerlink" title="Common Error"></a>Common Error</h2><p>When uploading with the above code after writing the md file normally, sometimes an error will be reported inexplicably:</p>
<blockquote>
<p>err : Error: Spawn Failed</p>
</blockquote>
<p>The problem usually occurs in the .deploy_git folder, which is a Git repository generated by the hexo framework rendering. The <em><code>hexo d</code></em> command is to push it to github. Most of the problems are caused by git changing the contents of some .deploy_git files when pushing or hexo d, resulting in an error.</p>
<p>All in all, just delete this file.</p>
<p>Then call the following command:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>

<p>Then execute the clean g d command of hexo.</p>
<p>But note that there are two other reasons for this error:</p>
<ul>
<li>Our submission to github code uses absolute path. If you open git bash in hexoen, the .deploy_git file may be saved in the hexoen folder. Remember to delete it at this time.</li>
<li>Network fluctuations, delete .deploy_git and wait for a while for it to be fine</li>
</ul>
]]></content>
      <categories>
        <category>front-end</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Initialization of Java virtual machine class loading</title>
    <url>/en/2023/06/03/Initialization%20of%20Java%20virtual%20machine%20class%20loading/</url>
    <content><![CDATA[<h1 id="Initialization-of-Java-virtual-machine-class-loading"><a href="#Initialization-of-Java-virtual-machine-class-loading" class="headerlink" title="Initialization of Java virtual machine class loading"></a>Initialization of Java virtual machine class loading</h1><p>We know that “Java Virtual Machine Specification” chapter 5.5 Initialization ^(1)^ strictly stipulates that there are only six situations where the class must be initialized immediately:</p>
<blockquote>
<ul>
<li>Encountered new (instantiated object), getstatic (read a class static field which is not modified by final or does not put the result into the constant pool at compile time), putstatic (set a class static field which is not modified by final or does not put the result into the constant pool at compile time) or invokestatic (calling a static method of a class) these four bytecode instructions, if the class has not been initialized, initialization needs to be triggered.</li>
<li>Use the methods of the java.lang.reflect package to make reflective calls on types</li>
<li>the parent class has not been initialized</li>
<li>When the virtual machine starts, the user needs to specify a main class (main) to be executed</li>
<li>When using the dynamic language support newly added by java7, if the final analysis result of a MthodHandle instance is REF_getStatic, REF_putstatic, REF_invokestatic, REF_newInvokeSpecial four types of method handles</li>
<li>An interface defines the interface method modified by default, and the implementation class of the interface is initialized at the same time</li>
</ul>
</blockquote>
<p>In addition, all reference types do not trigger initialization:</p>
<h2 id="Subclass-references-parent-class"><a href="#Subclass-references-parent-class" class="headerlink" title="Subclass references parent class"></a>Subclass references parent class</h2><p>Referring to a static field of a superclass through a subclass does not cause the subclass to be initialized:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Super</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;System.out.println(<span class="string">&quot;Super&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Super</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;System.out.println(<span class="string">&quot;Sub&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeName</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(Sub.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>What happens in the end? It will output “Super” first, and then the value of “value”.</p>
<p>For static fields, only the class that directly defines this field will be initialized, so the static field of the parent class is referenced through the subclass, and only the parent class will be initialized.</p>
<h2 id="Array-reference-class"><a href="#Array-reference-class" class="headerlink" title="Array reference class"></a>Array reference class</h2><p>Referencing a class through an array definition does not trigger initialization of this class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeName</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Sub[] sp = <span class="keyword">new</span> <span class="title class_">Sub</span>[<span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>What happens in the end?</p>
<p>nothing.</p>
<p>It can be seen that the Sub class has not been initialized. But this code triggers the initialization phase of another class named “[Lcom.example.demo.Sub”. This thing is automatically generated by the virtual machine and a subclass directly inherited from Object , and the creation action is triggered by the bytecode instruction anewarray (that is, creating a new reference array).</p>
<p>The one-dimensional array represented by this class, users can only directly use the length property modified as public and the clone method. Of course, the properties and methods used in the array are all implemented in this class. This is because Java wraps the access to the array elements (it is the movement of the array pointer in C), which is why Java detects that the array is out of bounds and throws an ArrayIndexOutOfBoundsException instead of an illegal memory access like C.</p>
<p>To be precise, Java’s out-of-bounds check is not encapsulated in the class for array element access, but encapsulated in xaload (array elements pushed onto the stack) and xastore (array operations) bytecode instructions for array access.</p>
<h2 id="Constant-pool-reference"><a href="#Constant-pool-reference" class="headerlink" title="Constant pool reference"></a>Constant pool reference</h2><p>Constants will be stored in the constant pool of the calling class during the compilation phase, and essentially there is no direct reference to the class that defines the constant</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Super</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;System.out.println(<span class="string">&quot;Super&quot;</span>);&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HELLO</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeName</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(Super.HELLO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The code here also does not output “Super” after running.</p>
<p>The constant value of hello has actually been converted into a reference of the SomeName class to its own constant pool during the compilation phase, so the two of them have nothing to do with each other.</p>
<h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><p>Interfaces are a little different than classes. In fact, the interface also has an initialization process, but the interface cannot use static code blocks to output initialization information like a class. The compiler will generate a “<clinit>“ class constructor for the interface to initialize the member variables defined in the interface. and:</p>
<p>The interface does not require all parent interfaces to be initialized, only when it is used will it be initialized.</p>
<hr>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>(1) Yellin, F. and Lindholm, T., 1996. The java virtual machine specification.</p>
]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Intranet projects avoid pitfall</title>
    <url>/en/2023/06/06/Intranet%20projects%20avoid%20pitfall/</url>
    <content><![CDATA[<h1 id="Intranet-projects-avoid-pitfall"><a href="#Intranet-projects-avoid-pitfall" class="headerlink" title="Intranet projects avoid pitfall"></a>Intranet projects avoid pitfall</h1><p>As we all know, some projects are completely established in the offline mode of the intranet. The first time I came into contact with this offline mode project recently, record the problems encountered:</p>
<h2 id="Maven-offline-model"><a href="#Maven-offline-model" class="headerlink" title="Maven offline model"></a>Maven offline model</h2><p>Due to the requirements of the intranet, the project is running on a virtual machine, and the development environment cannot be connected to the Internet on the virtual machine, so all projects need to be downloaded again. There was a problem when configuring pom.xml, and idea kept reporting a strange error:</p>
<blockquote>
<p>Cannot access maven-default-http-blocker (<a href="http://0.0.0.0/">http://0.0.0.0/</a>) in offline mode</p>
</blockquote>
<p>At first, according to the instructions on the Internet, I turned on the offline mode of maven, but it still couldn’t solve the problem. Later, I found out that it was a Maven version problem.</p>
<p>This is because the default Bundled (Maven3) of the idea I use, the maven version here is too high above 3.8, and there is a mirror text in the setting.xml file of the high version maven:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-default-http-blockerid&gt;</span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>external:http:*mirrorOf&gt;</span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.name&gt;</span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://0.0.0.0/url&gt;</span><br><span class="line">     <span class="tag">&lt;<span class="name">blocked</span>&gt;</span>trueblocked&gt;</span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>This thing is that maven blocks external HTTP repositories by default, and the simple solution is to comment it out. </p>
<p>If the user does not take the initiative to comment out the maven-default-http-blocker configuration, this will cause persistence problems when IDEA uses the bundled maven.</p>
<p>This is actually a bit inconvenient. The main reason for setting this is to use the HTTP protocol to download dependencies, which may lead to man-in-the-middle attacks. So Maven 3.8.1 prohibits all Maven repositories of the HTTP protocol.</p>
<p>So, there are mainly two solutions:</p>
<ol>
<li><strong>Downgrade the version</strong></li>
<li>When idea loads the external configuration file, it will first load the settings.xml in the \plugins\maven\lib\maven3\conf folder in the installation directory, and <strong>comment the maven-default-http-blocker configuration in this file</strong></li>
</ol>
<h2 id="idea-SVN-import-project"><a href="#idea-SVN-import-project" class="headerlink" title="idea SVN import project"></a>idea SVN import project</h2><p>The project runs on the amazing SVN instead of git. When trying to import a project from SVN, similar to git, we open the interface from idea File -&gt; new -&gt; project from version control:</p>
<p><img src="/en/images/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.png" alt="内网项目踩坑记录"></p>
<p>You can see that there is a version control option on the top, and the drop-down menu here can choose subversion (ie SVN).</p>
<p>After selecting, enter the url of the company’s SVN project, and the corresponding folder will be automatically generated, which contains project code, test code, packages and so on. However, problems often occur now, and an error will be reported here:</p>
<blockquote>
<p>Cannot run program “svn”: CreateProcess error&#x3D;2</p>
</blockquote>
<p>The reason is that SVN needs to use command-line tools. If there is no SVN command-line tool locally, an error will result.</p>
<p>So reopen the msi file where you installed SVN, select modify (click the picture on the left instead of the text), install the command line client tools and it will be OK.</p>
<p><img src="/en/images/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95(2).png" alt="内网项目"></p>
]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Project record - first contact with enterprise requirement</title>
    <url>/en/2023/06/12/Project%20record%20-%20first%20contact%20with%20enterprise%20requirement/</url>
    <content><![CDATA[<h1 id="Project-record-first-contact-with-enterprise-requirement"><a href="#Project-record-first-contact-with-enterprise-requirement" class="headerlink" title="Project record - first contact with enterprise requirement"></a>Project record - first contact with enterprise requirement</h1><h2 id="Connection-Migration"><a href="#Connection-Migration" class="headerlink" title="Connection Migration"></a>Connection Migration</h2><p>Recently, I received my first requirement, to migrate an already prepared page so that it can be accessed and displayed externally. What does that mean? This requirement will be explained later.</p>
<p>In short, as a new developer, I have to say that I am confused when faced with huge enterprise-level codes and hundreds of classes in the back-end and front-end, not to mention the need to directly face a requirement that I have never touched before. Of course, the product manager also understands that it is unrealistic for me to do difficult requirements. The actual implementation of this requirement is not difficult. Many key parts of the code have been completed by others, but it is still a huge challenge for me.</p>
<h3 id="Requirement-Description"><a href="#Requirement-Description" class="headerlink" title="Requirement Description"></a>Requirement Description</h3><p>To put it simply, the requirements of this project require me to make the pages originally placed in the management system accessible through external links.</p>
<p>Many front-end pages and functions are displayed in a way similar to vue-element-admin. I need to take one of the completed vue pages - a BI report, and bypass the login system so that it can be accessed directly through a link (of course, it is not completely unnecessary for login verification, it is just a different form of verification). As for how it will be used after completion, I am not too clear now, there may be some hyperlinks of other webs pointing here.</p>
<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>The requirements are like this, but there are still many incomprehensible problems:</p>
<ul>
<li>Link? What kind of link to visit? What should it look like?</li>
<li>How should the front end be implemented?</li>
<li>What does the backend need to do?</li>
<li>What have other colleagues already done?</li>
</ul>
<h3 id="Ideas"><a href="#Ideas" class="headerlink" title="Ideas"></a>Ideas</h3><h4 id="Front-end"><a href="#Front-end" class="headerlink" title="Front end"></a>Front end</h4><p>As a newcomer, I need to keep learning, but of course I can’t just study hard by myself.</p>
<p>By consulting the seniors, I learned that the implementation of the connection migration function is implemented on a Vue page. It is also through this lesson that I learned the first idea of understanding the project and cracking the requirement:</p>
<blockquote>
<p><strong>Frontend Code Mapping Backend</strong> <strong>Code</strong></p>
</blockquote>
<p>Here is a rough front-end page structure, withholding specific information for privacy reasons:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    	<span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;XXcomponents[index]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span>    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>		</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">import</span> ...</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">       <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               <span class="title class_">XXcomponents</span>:[</span><br><span class="line">                   <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;c&#x27;</span>...</span><br><span class="line">               ],</span><br><span class="line">               <span class="attr">index</span>:<span class="number">0</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">window</span>.<span class="property">myData</span> = <span class="variable language_">this</span></span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">routeData</span> = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span></span><br><span class="line">           <span class="variable language_">this</span>.<span class="title function_">method</span>()</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">methods</span>:&#123;</span><br><span class="line">           <span class="title function_">method</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;/.../loginByUsername&#x27;</span>,<span class="variable language_">this</span>.<span class="property">routeData</span>.<span class="property">data</span>)</span><br><span class="line">                 .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                   <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">XXcomponents</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">i</span> =&gt;</span> i == <span class="variable language_">this</span>.<span class="property">routeData</span>.<span class="property">name</span> )</span><br><span class="line">                   ...</span><br><span class="line">               &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                   ...</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">components</span>:&#123;</span><br><span class="line">             a,</span><br><span class="line">             b,</span><br><span class="line">             c...</span><br><span class="line">       &#125;       </span><br><span class="line">   &#125; </span><br><span class="line">        </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span>...<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>The template tag here presents the front-end content. You can see that there is only one dynamic component bound by<code>:is</code>. Let’s imagine that what we need to do is connection migration, so there is reason to <strong>guess</strong> that the components here may determine what the incoming page is based on the index, and then display it on the front end.</p>
<p>So I looked at the data in the data attribute, and I could see that XXcomponents corresponded to the component in the components attribute. These components were imported through import and other written Vue pages, which confirmed my guess.</p>
<p>Now, we already know how the front end implements the connection migration function through a Vue page:</p>
<blockquote>
<p>Switch the Vue page to be displayed in the list by switching the index</p>
</blockquote>
<p>So, what about the backend?</p>
<p>I see that <em><code>this.$route.query</code></em> is written in the Vue life cycle create here, which means that this Vue page needs to receive parameters when it is created. </p>
<p>The parameters here are written directly in the URL, the result of <em><code>this.$route.query</code></em> is written into <em><code>this.routeData</code></em>, then <code>this.routeData.name</code> and <em><code>this.routeData.data</code></em> appear in the following code, so there is reason to believe that the parameters in the incoming link should be similar to this, for example:</p>
<blockquote>
<p> localhost:8888&#x2F;index&#x2F;data&#x3D;123&amp;name&#x3D;123</p>
</blockquote>
<p>The json data is:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>data<span class="punctuation">:</span><span class="number">123</span><span class="punctuation">,</span> name<span class="punctuation">:</span><span class="number">123</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Back-end"><a href="#Back-end" class="headerlink" title="Back end"></a>Back end</h4><p>The matter of receiving parameters is often related to the backend, so what parameters does it receive?</p>
<p>I don’t know yet, but there is a method called method behind it, which uses an asynchronous dispatch method internally, and sends parameters to a method called <em><code>loginByUsername</code></em>, and the value sent is the value corresponding to the name attribute in the link we mentioned earlier.</p>
<p>Now, the front end has accessed a method called <em><code>loginByUsername</code></em> on the back end, and passed the value corresponding to the name attribute in Json format.</p>
<p>Open the backend idea and enter: <strong>ctrl + shift + f</strong> to find the matching <em><code>loginByUsername</code></em> method.</p>
<p>Soon I found a matching method, a @PostMapping method written in @Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> WebResult <span class="title function_">loginByUsername</span> <span class="params">(<span class="meta">@Requestbody</span> UserNameDTO userNameDTO)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> (userNameDTO.getUserName())</span><br><span class="line">    <span class="comment">// get token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> ...(userName);</span><br><span class="line">    ......    </span><br><span class="line">    <span class="keyword">return</span> WebResult.ok(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserNameDTO</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This method receives a <em><code>UserNameDTO</code></em> entity class of @Requestbody, and then uses it to obtain the username, and returns the username to the front end as authentication information after being encrypted by Base64 through the method encapsulated by the Service layer. (WebResult is an encapsulated class for customizing the mapping from return values to WSDL)</p>
<p>So far, the function of the backend has also been confirmed:</p>
<blockquote>
<p>The backend needs the userName information passed in by the frontend, and then generates a token for authentication, web page jump, or connection migration through the userName and returns it to the frontend.</p>
</blockquote>
<h4 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h4><p>Finally, the data attribute of the link will be used by the <em><code>findIndex</code></em> method later to determine the index, and then the corresponding Vue page will be displayed according to the index match.</p>
<p>At this point, we can visit the following link:</p>
<blockquote>
<p>localhost:8888&#x2F;index&#x2F;data&#x3D;study&amp;name&#x3D;James</p>
</blockquote>
<p>It will match a study.vue front-end page belonging to James and display the corresponding information.</p>
<p>In general, this requirement is not difficult. The implementation of the core functions, such as dispatching the corresponding URL, matching the corresponding Vue page according to the Index, the implementation of the back-end token generation and other functions have been encapsulated. However, as the first requirement, it is also difficult for me, and more importantly, I have learned:</p>
<ol>
<li><strong>How to sort out ideas in enterprise projects - Frontend Code Mapping Backend Code</strong></li>
<li><strong>ctrl + shift + f</strong></li>
</ol>
]]></content>
      <categories>
        <category>Full Stack</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Why anonymous inner class parameters must be final</title>
    <url>/en/2023/06/02/Why%20anonymous%20inner%20class%20parameters%20must%20be%20final/</url>
    <content><![CDATA[<h1 id="Why-anonymous-inner-class-parameters-must-be-final"><a href="#Why-anonymous-inner-class-parameters-must-be-final" class="headerlink" title="Why anonymous inner class parameters must be final?"></a>Why anonymous inner class parameters must be final?</h1><p>Recently, when I wrote some anonymous inner classes, I felt a little difficult to understand, so I reviewed this part again. I found some points that I didn’t notice before - the formal parameters of the anonymous inner class must be prefixed with final (unless the anonymous inner class does not use it)</p>
<p>So, how to understand the principle behind this matter?</p>
<h2 id="How-inner-classes-work"><a href="#How-inner-classes-work" class="headerlink" title="How inner classes work"></a>How inner classes work</h2><p>First, think about how inner classes work. We know that after the internal class is successfully compiled, it will generate a new class file.</p>
<p>The class file only retains references to external classes.</p>
<p>For example, when the parameters passed in by the outer class need to be called by the inner class, it looks like it is called directly:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="keyword">final</span> String name,<span class="keyword">final</span> <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;your name is &quot;</span> + name + <span class="string">&quot; and age is &quot;</span> + age);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">InnerClass</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">        in.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>But in fact name is not directly called by the inner class, in fact it looks like this after java compilation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass$InnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InnerClass</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.InnerClass$name = name;</span><br><span class="line">        <span class="built_in">this</span>.InnerClass$age = age;</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;your name is &quot;</span> + <span class="built_in">this</span>.InnerClass$name + <span class="string">&quot; and age is &quot;</span> + <span class="built_in">this</span>.InnerClass$age );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Therefore, from the above code, the internal class does not directly call the parameters passed in by the method, but the internal class backs up the passed parameters to its own interior through its own constructor, and the internal method call is actually its own properties instead of parameters of outer class methods!<br>With this understanding, it is easy to figure out why final is used. </p>
<p><strong>Assuming that the inner class modifies the values of these parameters, the values of the original parameters do not change, which affects the consistency of the parameters.</strong> </p>
<p>From the programmer’s point of view, this parameter is the same, but if the value of the parameter is changed in the inner class, but the value is not changed when the external call is made, it may be very confusing, so in order to avoid this kind of embarrassing problem, the compiler designers set the parameters that can be used by inner classes to be final.</p>
<h2 id="How-anonymous-inner-classes-work"><a href="#How-anonymous-inner-classes-work" class="headerlink" title="How anonymous inner classes work"></a>How anonymous inner classes work</h2><p>OK, what’s the difference between an anonymous inner class and an inner class - it has no name.</p>
<p>There is no name, so it is constructed with the default no-argument constructor. If parameters are required, then give him a constructor with parameters.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>(); </span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.getInner(<span class="string">&quot;Inner&quot;</span>); </span><br><span class="line">        System.out.println(inner.getName()); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInner</span><span class="params">(<span class="keyword">final</span> String name)</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>(name) &#123; </span><br><span class="line">            <span class="keyword">private</span> <span class="type">String</span> <span class="variable">nameStr</span> <span class="operator">=</span> name; </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; </span><br><span class="line">                <span class="keyword">return</span> nameStr; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123; </span><br><span class="line">    Inner(String name) &#123; </span><br><span class="line">        System.out.println(name); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">abstract</span> String <span class="title function_">getName</span><span class="params">()</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Look, here the parameter of the getInner method is final, the reason is the same as the reason for adding final to the inner class part before. </p>
<h2 id="Sometimes-you-can-also-not-add-final"><a href="#Sometimes-you-can-also-not-add-final" class="headerlink" title="Sometimes you can also not add final"></a>Sometimes you can also not add final</h2><p>When can you not add final? If the inner class does not use it, you can not add final, which is easy to understand:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>(); </span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.getInner(<span class="number">1</span>); </span><br><span class="line">        System.out.println(inner.f()); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Inner <span class="title function_">getInner</span><span class="params">(<span class="type">int</span> i)</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>(i) &#123; </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;f()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123; </span><br><span class="line">    Inner(<span class="type">int</span> i) &#123; </span><br><span class="line">        System.out.println(i); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>The actual process of class initialization</title>
    <url>/en/2023/05/19/The%20actual%20process%20of%20class%20initialization/</url>
    <content><![CDATA[<h2 id="Class-initialization-order"><a href="#Class-initialization-order" class="headerlink" title="Class initialization order"></a>Class initialization order</h2><p>Many people know that the order of class initialization is as follows:<br>(1) Call the base class constructor and repeat this process until the bottom layer<br>(2) Then call the initialization methods of the members in the order of declaration<br>(3) Call the body of the class constructor</p>
<h2 id="The-actual-process-of-class-initialization"><a href="#The-actual-process-of-class-initialization" class="headerlink" title="The actual process of class initialization"></a>The actual process of class initialization</h2><p>However, consider this example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Animal.walk()&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	Animal()&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Animal() before walk()&quot;</span>);</span><br><span class="line">		walk();</span><br><span class="line">		System.out.println(<span class="string">&quot;Animal() after walk()&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Cat.walk(), step = &quot;</span> + step);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Cat(<span class="type">int</span> step)&#123;</span><br><span class="line">		<span class="built_in">this</span>.step = step;</span><br><span class="line">		System.out.println(<span class="string">&quot;Cat.Cat(), step = &quot;</span> + step);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="number">500</span>);</span><br><span class="line">	</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The walk method of the Animal class is designed to be overridden in the Cat class, but Animal’s constructor calls the walk method, which results in a call to Cat.walk().<br>The generated result of the above code is:</p>
<blockquote>
<p>Animal() before walk()<br>Cat.walk(), step &#x3D; 0<br>Animal() after walk()<br>Cat.Cat(), step &#x3D; 500</p>
</blockquote>
<p>We will find that when the Animal constructor calls the walk() method, the step is not the default initial value of 100, but 0.<br>Therefore, the order of class initialization mentioned earlier is not complete. In fact, the order of class initialization should be like this:<br>(1) <strong>Allocate space before everything happens, and initialize the storage space allocated to the object to binary zero (or a value equivalent to zero in some special data types)</strong><br>(2) Call the base class constructor as mentioned above. At this time, the walk method must be called before calling the cat constructor, so the step value at this time is 0<br>(3) Call the initialization methods of the members in the order of declaration<br>(4) Call the body of the class constructor<br>Of course, this kind of error is not easy to find, so it is recommended that you try to avoid calling other methods in the constructor if possible. The only methods that can be safely called in the constructor are the final methods of the base class (because they will not be overrided, there will be no above-mentioned problems)。</p>
]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
