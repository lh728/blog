<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Project Records — Troubleshooting</title>
    <url>/en/2023/06/17/Project%20Records%20-%20Troubleshooting/</url>
    <content><![CDATA[<p>Here I will record some insightful bugs I encountered in enterprise development, as well as troubleshooting for code</p>
<h2 id="BatchUpdateException-ORA-12899"><a href="#BatchUpdateException-ORA-12899" class="headerlink" title="BatchUpdateException: ORA-12899"></a>BatchUpdateException: ORA-12899</h2><p><strong>Oracle SQL table design problem</strong></p>
<h3 id="Bug-Description"><a href="#Bug-Description" class="headerlink" title="Bug Description"></a>Bug Description</h3><p>The product manager asked me to check for a bug that occurred in an unknown environment (I didn’t ask whether it was a development, test, or formal environment). The front-end failed to upload excel to update data, and it prompted “Database exception, please contact the administrator”.</p>
<h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><p>Obviously, this is usually an error reported by the backend, so I reproduced the error according to the process, and then directly looked at the result of the idea, and the idea reported an error:</p>
<blockquote>
<p>Exception in thread “main” java.sql.BatchUpdateException: ORA-12899: value too large for column “xx” (actual: 208, maximum: 200)</p>
</blockquote>
<p>According to the literal meaning of such an error, it seems that the data exceeds the byte limit of a certain field in sql, so through our <a href="https://thellu.com/en/2023/06/12/Project%20Records%20-%20Enterprise%20Requirement/">Project Record-Enterprise Requirements</a> blog, “<strong>Frontend Code Mapping Backend</strong> <strong>Code</strong>“ method, finds the corresponding back-end code, and then finds the corresponding entity class to see which data table it links to. This helps us directly locate the problem table in the company’s huge database.</p>
<p>After locating the problem table, click “Design Table” in Navicat, I can directly see the byte limit of each field, and then correspond to the content in the excel file that reported the error, I can easily find the corresponding limit of 200 bytes offending column. But the strange thing is that if a Chinese code occupies 2 bytes, I personally feel that the number of bytes of data in this column in this excel file does not reach the standard of 208.</p>
<p>Then query:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> userenv(<span class="hljs-string">&#x27;language&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></figure>

<p>The result is <em><code>AMERICAN_AMERICA.AL32UTF8</code></em></p>
<p>This shows that our Oracle database uses <em><code>AMERICAN_AMERICA.AL32UTF8</code></em> as the character encoding set. This UTF-8 encoding set occupies three bytes for a Chinese character. In order to verify our guess, query:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> lengthb(<span class="hljs-string">&#x27;xx&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></figure>

<p>xx is the data content that exceeds the byte limit, and the answer is 208 bytes, which proves that I am correct.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul>
<li>Change the character encoding set in oracle sql to <em><code>SIMPLIFIED CHINESE_CHINA.AL32UTF8</code></em>, such a Chinese only occupies two bytes. But obviously this method may affect other tables</li>
<li>It is not required to upload too much content corresponding to the data column of excel</li>
<li>Expand the byte limit of the field</li>
</ul>
<hr>
<h2 id="Json-default-parsing-method"><a href="#Json-default-parsing-method" class="headerlink" title="Json default parsing method"></a>Json default parsing method</h2><h3 id="Bug-Description-1"><a href="#Bug-Description-1" class="headerlink" title="Bug Description"></a>Bug Description</h3><p>A very normal operation: I call a method on the backend and return a List result set to the frontend. We know that this result set is placed in a List with a lot of json data at the front end.</p>
<p>The data I’m going to return has these columns:</p>
<ul>
<li>DESCR - Department name</li>
<li>userId - ID</li>
<li>name - name</li>
<li>jobType - job type</li>
</ul>
<p>Among them, userId, name, and jobType are displayed normally on the front end, and the data is obtained, but there is no data show in the column DESCR:</p>
<table>
<thead>
<tr>
<th align="center">DESCR</th>
<th align="center">userId</th>
<th align="center">name</th>
<th align="center">jobType</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">1</td>
<td align="center">a</td>
<td align="center">A</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">2</td>
<td align="center">b</td>
<td align="center">B</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">3</td>
<td align="center">c</td>
<td align="center">C</td>
</tr>
</tbody></table>
<p>After looking at the backend, debug at the breakpoint found that the data was passed normally. The column DESCR has a value, but I don’t know why it is not displayed on the frontend.</p>
<h3 id="Troubleshooting-1"><a href="#Troubleshooting-1" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><p>Debug at the break point on the front end, and find that the Json data passed looks like this:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>dESCR<span class="hljs-punctuation">:</span>...<span class="hljs-punctuation">,</span>userId<span class="hljs-punctuation">:</span>&#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">,</span>name<span class="hljs-punctuation">:</span>&#x27;a&#x27;<span class="hljs-punctuation">,</span>jobType<span class="hljs-punctuation">:</span>&#x27;A&#x27;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span>dESCR<span class="hljs-punctuation">:</span>...<span class="hljs-punctuation">,</span>userId<span class="hljs-punctuation">:</span>&#x27;<span class="hljs-number">2</span>&#x27;<span class="hljs-punctuation">,</span>name<span class="hljs-punctuation">:</span>&#x27;b&#x27;<span class="hljs-punctuation">,</span>jobType<span class="hljs-punctuation">:</span>&#x27;B&#x27;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>...<br></code></pre></td></tr></table></figure>

<p>This is strange, why is the first letter of the DESCR column lowercase?</p>
<p>It was later discovered that not only the first letter of the DESCR column is lowercased, but in fact the first letter of each column with a capitalized first letter will be lowercased, because they are originally lowercased here, so they cannot be seen here.</p>
<p>The reason for this is to discuss the principle behind it because all JSON implementations are inseparable from HttpMessageConverter, which is a message conversion tool that mainly implements two functions:</p>
<ul>
<li>Serialize the object returned by the server into a JSON string</li>
<li>Deserialize the JSON string sent from the front end into a Java object</li>
</ul>
<p>Relevant dependencies have been automatically imported for us in the dependency package generated by SpringBoot. SpringMVC automatically configures <strong>Jackson</strong> and Gson’s HttpMessageConverter.</p>
<p>By default, our company’s project uses Jackson to parse the Json code. During the serialization process, Jackson will automatically convert fields’ first letter beginning with uppercase to lowercase.</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><ul>
<li>Add <em><code>@JsonFormat</code></em> or <em><code>@JsonProperty</code></em> annotations to unchanging properties that need to preserve case</li>
<li>Annotate the class with <em><code>@JsonAutoDetect(getterVisibility=JsonAutoDetect.Visibility.NONE)</code></em></li>
</ul>
<hr>
<h2 id="EsayPoi-parsing-Excel-picture-null-pointer"><a href="#EsayPoi-parsing-Excel-picture-null-pointer" class="headerlink" title="EsayPoi parsing Excel picture null pointer"></a>EsayPoi parsing Excel picture null pointer</h2><h3 id="Bug-Description-2"><a href="#Bug-Description-2" class="headerlink" title="Bug Description"></a>Bug Description</h3><p>A very interesting bug, I have been troubled here for a day.</p>
<p>Now there are two Excel files that are almost exactly the same. When I import and parse, one Excel file will report a null pointer, and the other file will be parsed and imported normally.</p>
<p>The business logic here is:</p>
<ul>
<li>The business downloads the Excel template first</li>
<li>The business enters the information they want to import according to the template, one of which is image information column</li>
<li>The picture information is pasted into Excel by the business</li>
<li>Finally, the business clicks Import, parses Excel, and imports the information into the database</li>
</ul>
<p>This bug is encountered by the business in this process. The business has two almost identical Excel files, and their text information is exactly the same. The only difference is that the pictures are different.</p>
<p>Moreover, even if the picture in the Excel file that can be parsed and imported normally is pasted into the Excel file with problems, a null pointer exception will still be reported, which is very strange.</p>
<h3 id="Troubleshooting-2"><a href="#Troubleshooting-2" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><p>At first I thought that the picture might cover other cells, so I tried to stretch the picture, but it didn’t work.</p>
<p>Then carefully study the back-end code and find that this piece is parsed by calling the <em><code>importExcelMore</code></em> method of the <em><code>ExcelImportUtil</code></em> class of EasyPoi API. So I continued to drill down and found that more precisely, the problem occurred when calling the <em><code>getSheetPictures07</code></em> method of EasyPoi API’s <em><code>PoiPublicUtil</code></em> class.</p>
<p>To be more precise, it is an error reported when executing the code shown below in this placement:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">...<br>	pic.getPreferredSize()<br>...<br></code></pre></td></tr></table></figure>

<p>Break point debug , here needs an anchor’s cell1 attribute and cell2 attribute.</p>
<p>Then the cell2 attribute here is empty, so a null pointer is reported.</p>
<p>Knowing the origin of the error, now go back and find out why the cell2 attribute is null? Where is this attribute constructed?</p>
<p>After a long search, I finally found that it was constructed in the <em><code>getAchorFromParent</code></em> method of Poi API’s <em><code>XSSFDrawing</code></em> class.</p>
<p>The method looks like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> XSSFAnchor <span class="hljs-title function_">getAnchorFromParent</span><span class="hljs-params">(XmlObject obj)</span> &#123;<br>  <span class="hljs-type">XSSFAnchor</span> <span class="hljs-variable">anchor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-type">XmlObject</span> <span class="hljs-variable">parentXbean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-type">XmlCursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> obj.newCursor();<br>  <span class="hljs-keyword">if</span> (cursor.toParent()) &#123;<br>    parentXbean = cursor.getObject();<br>  &#125;<br>  cursor.dispose();<br>  <span class="hljs-keyword">if</span> (parentXbean != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (parentXbean <span class="hljs-keyword">instanceof</span> CTTwoCellAnchor) &#123;<br>      <span class="hljs-type">CTTwoCellAnchor</span> <span class="hljs-variable">ct</span> <span class="hljs-operator">=</span> (CTTwoCellAnchor) parentXbean;<br>      anchor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFClientAnchor</span>(ct.getFrom(), ct.getTo());<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parentXbean <span class="hljs-keyword">instanceof</span> CTOneCellAnchor) &#123;<br>      <span class="hljs-type">CTOneCellAnchor</span> <span class="hljs-variable">ct</span> <span class="hljs-operator">=</span> (CTOneCellAnchor) parentXbean;<br>      anchor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFClientAnchor</span>(getSheet(), ct.getFrom(), ct.getExt());<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parentXbean <span class="hljs-keyword">instanceof</span> CTAbsoluteAnchor) &#123;<br>      <span class="hljs-type">CTAbsoluteAnchor</span> <span class="hljs-variable">ct</span> <span class="hljs-operator">=</span> (CTAbsoluteAnchor) parentXbean;<br>      anchor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFClientAnchor</span>(getSheet(), ct.getPos(), ct.getExt());<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> anchor;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>Don’t fully understand the code, just look at the middle here, where the <code>parentXbean</code> will create the anchor and its cell2 properties.</p>
<p>When we use breakpoint debugging, we will find that if we import a problematic Excel, we will go to this judgment: <em><code>parentXbean instanceof CTOneCellAnchor</code></em></p>
<p>And normal Excel will go to this judgment: <em><code>parentXbean instanceof CTTtwoCellAnchor</code></em></p>
<p>Then, the problem lies in CTTwoCellAnchor and CTOneCellAnchor. </p>
<p>What are these two classes? Apparently something to do with pictures - thanks to Greg Woolsey for explaining it right here. refer to:</p>
<blockquote>
<p><a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=61203">https://bz.apache.org/bugzilla/show_bug.cgi?id=61203</a></p>
</blockquote>
<p>Therefore, <strong>CTTwoCellAnchor means that Move and size with cells</strong>; <strong>CTOneCellAnchor means that Move but don’t size with cells</strong>.</p>
<p>Then, this corresponds to the picture properties in Excel:</p>
<p><img src="/en/images/Projects_Records/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5(1).png" alt="Project Records"></p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><ul>
<li>At this point, the problem is solved, you only need to modify the picture properties in Excel. So far, the problem has been solved. As for the deeper reason, due to the tight schedule of the project, there is no time to delve into it. Friends who understand are welcome to leave a message in the comment area</li>
</ul>
]]></content>
      <categories>
        <category>Project Records</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SQL</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Records - Enterprise Requirement</title>
    <url>/en/2023/06/12/Project%20Records%20-%20Enterprise%20Requirement/</url>
    <content><![CDATA[<p>Here will record some of my project requirements in enterprise development.</p>
<p><strong>—————-For quick search and page turning, please see the table of contents on the right———————-&gt;</strong></p>
<p><strong>—————For quick search and page turning, please see the table of contents on the right———————–&gt;</strong></p>
<p><strong>————–For quick search and page turning, please see the table of contents on the right————————&gt;</strong></p>
<h2 id="1-Connection-Migration"><a href="#1-Connection-Migration" class="headerlink" title="1. Connection Migration"></a>1. Connection Migration</h2><p>Recently, I received my first requirement, to migrate an already prepared page so that it can be accessed and displayed externally. What does that mean? This requirement will be explained later.</p>
<p>In short, as a new developer, I have to say that I am confused when faced with huge enterprise-level codes and hundreds of classes in the back-end and front-end, not to mention the need to directly face a requirement that I have never touched before. Of course, the product manager also understands that it is unrealistic for me to do difficult requirements. The actual implementation of this requirement is not difficult. Many key parts of the code have been completed by others, but it is still a huge challenge for me.</p>
<h3 id="Requirement-Description"><a href="#Requirement-Description" class="headerlink" title="Requirement Description"></a>Requirement Description</h3><p>To put it simply, the requirements of this project require me to make the pages originally placed in the management system accessible through external links.</p>
<p>Many front-end pages and functions are displayed in a way similar to vue-element-admin. I need to take one of the completed vue pages - a BI report, and bypass the login system so that it can be accessed directly through a link (of course, it is not completely unnecessary for login verification, it is just a different form of verification). As for how it will be used after completion, I am not too clear now, there may be some hyperlinks of other webs pointing here.</p>
<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>The requirements are like this, but there are still many incomprehensible problems:</p>
<ul>
<li>Link? What kind of link to visit? What should it look like?</li>
<li>How should the front end be implemented?</li>
<li>What does the backend need to do?</li>
<li>What have other colleagues already done?</li>
</ul>
<h3 id="Ideas-and-Implementation"><a href="#Ideas-and-Implementation" class="headerlink" title="Ideas and Implementation"></a>Ideas and Implementation</h3><h4 id="Front-end"><a href="#Front-end" class="headerlink" title="Front end"></a>Front end</h4><p>As a newcomer, I need to keep learning, but of course I can’t just study hard by myself.</p>
<p>By consulting the seniors, I learned that the implementation of the connection migration function is implemented on a Vue page. It is also through this lesson that I learned the first idea of understanding the project and cracking the requirement:</p>
<blockquote>
<p><strong>Frontend Code Mapping Backend</strong> <strong>Code</strong></p>
</blockquote>
<p>Here is a rough front-end page structure, withholding specific information for privacy reasons:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>	<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    	<span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;XXcomponents[index]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span>    </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>		<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>   <span class="hljs-keyword">import</span> ...<br>   <br>   <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>       <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-keyword">return</span> &#123;<br>               <span class="hljs-title class_">XXcomponents</span>:[<br>                   <span class="hljs-string">&#x27;a&#x27;</span>,<br>                   <span class="hljs-string">&#x27;b&#x27;</span>,<br>                   <span class="hljs-string">&#x27;c&#x27;</span>...<br>               ],<br>               <span class="hljs-attr">index</span>:<span class="hljs-number">0</span><br>           &#125;<br>       &#125;,<br>       <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-variable language_">window</span>.<span class="hljs-property">myData</span> = <span class="hljs-variable language_">this</span><br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">routeData</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">query</span><br>           <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">method</span>()<br>       &#125;,<br>       <span class="hljs-attr">methods</span>:&#123;<br>           <span class="hljs-title function_">method</span>(<span class="hljs-params"></span>)&#123;<br>               <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;/.../loginByUsername&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">routeData</span>.<span class="hljs-property">data</span>)<br>                 .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                   <span class="hljs-keyword">let</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">XXcomponents</span>.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> i == <span class="hljs-variable language_">this</span>.<span class="hljs-property">routeData</span>.<span class="hljs-property">name</span> )<br>                   ...<br>               &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                   ...<br>               &#125;)<br>           &#125;<br>       &#125;,<br>       <span class="hljs-attr">components</span>:&#123;<br>             a,<br>             b,<br>             c...<br>       &#125;       <br>   &#125; <br>        <br>&lt;script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p>The template tag here presents the front-end content. You can see that there is only one dynamic component bound by<code>:is</code>. Let’s imagine that what we need to do is connection migration, so there is reason to <strong>guess</strong> that the components here may determine what the incoming page is based on the index, and then display it on the front end.</p>
<p>So I looked at the data in the data attribute, and I could see that XXcomponents corresponded to the component in the components attribute. These components were imported through import and other written Vue pages, which confirmed my guess.</p>
<p>Now, we already know how the front end implements the connection migration function through a Vue page:</p>
<blockquote>
<p>Switch the Vue page to be displayed in the list by switching the index</p>
</blockquote>
<p>So, what about the backend?</p>
<p>I see that <em><code>this.$route.query</code></em> is written in the Vue life cycle create here, which means that this Vue page needs to receive parameters when it is created. </p>
<p>The parameters here are written directly in the URL, the result of <em><code>this.$route.query</code></em> is written into <em><code>this.routeData</code></em>, then <code>this.routeData.name</code> and <em><code>this.routeData.data</code></em> appear in the following code, so there is reason to believe that the parameters in the incoming link should be similar to this, for example:</p>
<blockquote>
<p> localhost:8888&#x2F;index&#x2F;data&#x3D;123&amp;name&#x3D;123</p>
</blockquote>
<p>The json data is:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>data<span class="hljs-punctuation">:</span><span class="hljs-number">123</span><span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span><span class="hljs-number">123</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<h4 id="Back-end"><a href="#Back-end" class="headerlink" title="Back end"></a>Back end</h4><p>The matter of receiving parameters is often related to the backend, so what parameters does it receive?</p>
<p>I don’t know yet, but there is a method called method behind it, which uses an asynchronous dispatch method internally, and sends parameters to a method called <em><code>loginByUsername</code></em>, and the value sent is the value corresponding to the name attribute in the link we mentioned earlier.</p>
<p>Now, the front end has accessed a method called <em><code>loginByUsername</code></em> on the back end, and passed the value corresponding to the name attribute in Json format.</p>
<p>Open the backend idea and enter: <strong>ctrl + shift + f</strong> to find the matching <em><code>loginByUsername</code></em> method.</p>
<p>Soon I found a matching method, a @PostMapping method written in @Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br><span class="hljs-keyword">public</span> WebResult <span class="hljs-title function_">loginByUsername</span> <span class="hljs-params">(<span class="hljs-meta">@Requestbody</span> UserNameDTO userNameDTO)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> (userNameDTO.getUserName())<br>    <span class="hljs-comment">// get token</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> ...(userName);<br>    ......    <br>    <span class="hljs-keyword">return</span> WebResult.ok(token);<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserNameDTO</span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> String userName;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>This method receives a <em><code>UserNameDTO</code></em> entity class of @Requestbody, and then uses it to obtain the username, and returns the username to the front end as authentication information after being encrypted by Base64 through the method encapsulated by the Service layer. (WebResult is an encapsulated class for customizing the mapping from return values to WSDL)</p>
<p>So far, the function of the backend has also been confirmed:</p>
<blockquote>
<p>The backend needs the userName information passed in by the frontend, and then generates a token for authentication, web page jump, or connection migration through the userName and returns it to the frontend.</p>
</blockquote>
<h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><p>Finally, the data attribute of the link will be used by the <em><code>findIndex</code></em> method later to determine the index, and then the corresponding Vue page will be displayed according to the index match.</p>
<p>At this point, we can visit the following link:</p>
<blockquote>
<p>localhost:8888&#x2F;index&#x2F;data&#x3D;study&amp;name&#x3D;James</p>
</blockquote>
<p>It will match a study.vue front-end page belonging to James and display the corresponding information.</p>
<p>In general, this requirement is not difficult. The implementation of the core functions, such as dispatching the corresponding URL, matching the corresponding Vue page according to the Index, the implementation of the back-end token generation and other functions have been encapsulated. However, as the first requirement, it is also difficult for me, and more importantly, I have learned:</p>
<ol>
<li><strong>How to sort out ideas in enterprise projects - Frontend Code Mapping Backend Code</strong></li>
<li><strong>ctrl + shift + f</strong></li>
</ol>
<hr>
<h2 id="2-Click-to-drill-down-to-a-new-page"><a href="#2-Click-to-drill-down-to-a-new-page" class="headerlink" title="2. Click to drill down to  a new page"></a>2. Click to drill down to  a new page</h2><p>Indie project started</p>
<h3 id="Requirement-Description-1"><a href="#Requirement-Description-1" class="headerlink" title="Requirement Description"></a>Requirement Description</h3><p>In a word, add a click method to the table data in the Vue table, click the data to a new page, and the new page has detailed information about the click data.</p>
<p>Suppose I now have a pie chart that has been implemented, showing the percentages of the four positions of ABCD. At the same time, there is a table below the pie chart, showing the position name, number of people and percentage, roughly as follows:</p>
<p>​                                    <strong>【pie chart】</strong> &lt;- pie chat is here ,put it on top of the form</p>
<table>
<thead>
<tr>
<th align="center">Job type</th>
<th align="center">Number of people</th>
<th align="center">Percentage</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">100</td>
<td align="center">10%</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">200</td>
<td align="center">20%</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">300</td>
<td align="center">30%</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">400</td>
<td align="center">40%</td>
</tr>
</tbody></table>
<p>Now we need to click on the number of people (that is, click on 100 in the above table), it will jump to a new page, and the new page will display the information of these 100 people in the form of a table, and implement pagination at the same time. As follows:</p>
<table>
<thead>
<tr>
<th align="center">Job type</th>
<th align="center">Name</th>
<th align="center">EmployeeId</th>
<th align="center">Dept</th>
<th align="center">Position</th>
<th align="center">Sex</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">pyrrhic</td>
<td align="center">025618</td>
<td align="center">IT</td>
<td align="center">Staff</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">A</td>
<td align="center">Mike</td>
<td align="center">159736</td>
<td align="center">Business</td>
<td align="center">CEO</td>
<td align="center">F</td>
</tr>
<tr>
<td align="center">A</td>
<td align="center">Done</td>
<td align="center">789156</td>
<td align="center">IT</td>
<td align="center">Junior</td>
<td align="center">F</td>
</tr>
</tbody></table>
<h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><p>Seeing the requirements, I thought about it and felt that the problems that need to be solved are:</p>
<ul>
<li><p>How to add front-end click event?</p>
</li>
<li><p>How does the front end implement jumping to a new page?</p>
</li>
<li><p>What functionality does the new page need to implement?</p>
</li>
<li><p>The original data already exists, how should I obtain it? Where can I get it?</p>
</li>
<li><p>What parameters are required for the front and back ends?</p>
</li>
</ul>
<h3 id="Idea-and-Implementation"><a href="#Idea-and-Implementation" class="headerlink" title="Idea and Implementation"></a>Idea and Implementation</h3><p>Here, unlike the previous project, not only “Frontend Code Mapping Backend Code”, but the new idea to solve enterprise projects is:</p>
<blockquote>
<p><strong>Solve requirements by thinking about problems</strong></p>
</blockquote>
<h4 id="Front-end-1"><a href="#Front-end-1" class="headerlink" title="Front end"></a>Front end</h4><ul>
<li>The first question: <strong>How to add the front-end click event?</strong></li>
</ul>
<p>The el-table of element-ui used by the implementer of the original function here implements the table function, but we know that the data of the Vue table is not hard-coded, but dynamically bound through :data, and the el-table component has no column binding event, how can I add a click event to the corresponding column?</p>
<p>This has troubled me for a long time. There are too many ambiguous statements on the Internet, and I haven’t found a very suitable one. In the end I decided to look at other pages where this was already implemented, looking for a possible solution. This gave birth to a new idea for solving enterprise projects:</p>
<blockquote>
<p><strong>learn by analogy</strong></p>
</blockquote>
<p>Through my unremitting thinking and searching, I found that a similar requirement was also implemented on another page. Although it does not add a click event to the data, it judges the data of a certain column in the table, and returns an “empty” string if it is empty.</p>
<p>This gave me an inspiration, just write like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;template #value = <span class="hljs-string">&quot;scope&quot;</span>&gt;<br>	<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;employeeDetail(scope.row)&quot;</span>&gt;</span>&#123;&#123;scope.row.value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>    <br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure>

<p>Bind the column with the slot attribute in the data through the #, and then call the click method, and Vue can find the corresponding method. The method here needs to be able to jump to a new page.</p>
<ul>
<li>Then, the second question: <strong>How does the front end implement jumping to a new page?</strong></li>
</ul>
<p>Here you need to use the push method, namely:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">employeeDetail</span>(<span class="hljs-params">row</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-title function_">push</span>(&#123;<br>            <span class="hljs-attr">name</span>: ...,<br>            <span class="hljs-attr">params</span>:&#123;<br>                ...<br>            &#125;<br>        &#125;)<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure>

<p>Obviously, find router.vue in the company code mountain, add the name and link of the page you want to jump to, and point to a new Vue component you want to create – the Vue component you are about to create is the new page, now just You need to create a new file!</p>
<ul>
<li>For the third question: **What functionality does the new page need to implement? **</li>
</ul>
<p>Obviously, I need an el-table table to store the data from the backend, and I also need a pagination tag to paginate the table.</p>
<p>So far, the basic framework and content of the front-end have been basically structured, now look at the back-end</p>
<h4 id="Back-end-1"><a href="#Back-end-1" class="headerlink" title="Back end"></a>Back end</h4><ul>
<li>The fourth question: <strong>The original data already exists, how should I obtain it? Where can I get it?</strong></li>
<li>The fifth question: **What parameters are required for the front and back ends? **</li>
</ul>
<p>Both of these problems can be solved with back end.</p>
<p>By analyzing the back-end method, we can understand that the number of employees in the back-end is obtained through this logic:</p>
<blockquote>
<p>Controller -&gt; Service -&gt; Mapper -&gt; SQL</p>
</blockquote>
<p>Finally, the number of people obtained through the count function of SQL is roughly as follows:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(employeeId) <span class="hljs-keyword">as</span> A<br><span class="hljs-keyword">from</span> ... <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ...<br><span class="hljs-keyword">where</span> deptId <span class="hljs-operator">=</span> #&#123;deptId&#125; <br><span class="hljs-keyword">and</span> jobType <span class="hljs-operator">=</span> #&#123;jobType&#125;<br><span class="hljs-keyword">and</span> ...<br></code></pre></td></tr></table></figure>

<p>Here I would like to make complaints about the fantastic combination of <code>BeetlSQL + Oracle SQL</code> used by the company. There are many different Mysql syntaxes that I have known before, and it can even add an <code>If</code> function. It can be said to be very peculiar and opened my eyes.</p>
<p>Then the logic can be slightly modified to get the detailed information of the employee:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> jobType,Name,employeeId,dept,position,sex<br><span class="hljs-keyword">from</span> ... <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ...<br><span class="hljs-keyword">where</span> deptId <span class="hljs-operator">=</span> #&#123;deptId&#125; <br><span class="hljs-keyword">and</span> jobType <span class="hljs-operator">=</span> #&#123;jobType&#125;<br><span class="hljs-keyword">and</span> ...<br></code></pre></td></tr></table></figure>

<p>There is no need to change any parameters, which can be said to be very convenient. And you can also guess that the required parameters should be the department ID (deptId) and job type (jobType). In addition, pagination may also require parameters page and limit.</p>
<p>You only need to create a new VO class to store the returned jobType, Name, employeeId, dept, position, sex information, skip the Controller class and Service class code, and directly look at the implementation class of the Service layer:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageResult&lt;BaseVO&gt; <span class="hljs-title function_">findEmployeeDetail</span><span class="hljs-params">(BaseDTO query)</span>&#123;<br>    <span class="hljs-comment">// If deptId is null, set a default id by its login session</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(query.getDeptId()))&#123;<br>        query.setDeptId(getDefaultDeptId());<br>    &#125;<br>    <span class="hljs-comment">// Extract parameters except pagination parameters</span><br>    Map&lt;String,Object&gt; pageParam = query.getPageParam();<br>    <br>    PageResult&lt;BaseVO&gt; BaseVOs = mapper.findEmployeeDetail(query,pageParam);<br>    <span class="hljs-keyword">return</span> BaseVOs;<br>        <br>&#125;<br></code></pre></td></tr></table></figure>

<p>A null pointer is prevented here, and then the paging logic is completed, only need to ask the front end for the parameters passed by the previous page.</p>
<p>At this point, the things that need to be done at the back end are basically clear, and the overall requirements are already very clear.</p>
<h3 id="Summarize-1"><a href="#Summarize-1" class="headerlink" title="Summarize"></a>Summarize</h3><p>Finally, on the new page, the front end can pass parameters through the api method (receive <code>this.$router.params.deptId</code> from the previous page push, etc.), and then pass in a few more paging parameters, such as <code>page:1 </code> and <code>limit:10</code>. Finally, the Controller method is called, and the returned data can be received by the front end through <code>.then(res =&gt; ...)</code>.</p>
<p>This requirement is a bit more difficult than the previous one, and more importantly, there are two ideas for solving project requirements:</p>
<ol>
<li><strong>Solve requirements by thinking about problems</strong></li>
<li><strong>learn by analogy</strong></li>
</ol>
<hr>
<h2 id="3-Scheduling-email-task-optimization-Outlook-mailbox"><a href="#3-Scheduling-email-task-optimization-Outlook-mailbox" class="headerlink" title="3. Scheduling email task optimization (Outlook mailbox)"></a>3. Scheduling email task optimization (Outlook mailbox)</h2><hr>
<h3 id="Requirement-Description-2"><a href="#Requirement-Description-2" class="headerlink" title="Requirement  Description"></a>Requirement  Description</h3><p>The previous employee who designed the scheduling task directly returned the data in the form of <code>toString</code> after receiving the scheduling task data, resulting in the content of each email looking like this:</p>
<p><img src="/en/images/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82%EF%BC%881%EF%BC%89.png" alt="Project Records"></p>
<p>Obviously, this is not a mode that is conducive to human reading, so this requirement requires me to change the style of this requirement, display the data in the form of a table, and attach an EXCEL file. A reasonable style should look like this:</p>
<p><img src="/en/images/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82%EF%BC%882%EF%BC%89.png" alt="Project Records"></p>
<h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h3><p>Seeing the requirement, the next problem to be solved is:</p>
<ul>
<li><p>How to debug the scheduled task?</p>
</li>
<li><p>What does the acquired data look like?</p>
</li>
<li><p>How should EXCEL be written as an attachment to an email?</p>
</li>
<li><p>How to make the mail display as required?</p>
</li>
</ul>
<h3 id="Idea-and-Implementation-1"><a href="#Idea-and-Implementation-1" class="headerlink" title="Idea and Implementation"></a>Idea and Implementation</h3><p>This project is more to expand my knowledge, understand how to use timed scheduling tasks, and understand EasyPoi’s export excel and other functions.</p>
<p>Also, here’s a backend project:</p>
<h4 id="Back-end-2"><a href="#Back-end-2" class="headerlink" title="Back end"></a>Back end</h4><p>First of all, the stage where this code has been completed looks like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;0 0 23 * * ?&quot;)</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeEmployee</span><span class="hljs-params">()</span> <span class="hljs-keyword">throw</span> Exception&#123;<br>    ... get data by SQL ...<br>        <br>    List&lt;sysUserEntity&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;businessUserEntity&gt; arrList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    ... put data into these two arraylist ...<br>        <br>    MailUtil.send(<span class="hljs-string">&quot;...@...&quot;</span>,userList.toString,...);<br>    MailUtil.send(<span class="hljs-string">&quot;...@...&quot;</span>,arrList.toString,...);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Now, think in terms of the approach we mentioned earlier to address project requirements:</p>
<blockquote>
<p><strong>Solve requirements by thinking about problems</strong></p>
</blockquote>
<p>For the first question, **how to debug the scheduled task? **</p>
<p>For the method of debugging scheduled tasks, please refer to <a href="https://thellu.com/en/2023/06/27/How%20to%20debug%20springboot%20scheduled%20scheduling%20tasks/">my another post</a> 。</p>
<p>The second question, **What does the acquired data look like? **</p>
<p>In the previous code, the sending task was executed twice, and two arrays of userList and arrList were sent. These two arrays wrapped the two entity classes sysUserEntity and businessUserEntity, so we can think that what was sent was the two entity classes data.</p>
<p>And to send it twice at the same time, they may have similar operations, so I thought that I might need to write a generic method to receive these two entity classes.</p>
<p>The third question, **how should EXCEL be written as an attachment to an email? **</p>
<p>Maybe some APIs should be used here, such as Hutool API’s <code> MailUtil.send</code> method to send emails.</p>
<p>This method receives parameters such as the mailbox name, and more importantly, it also receives an html template parameter, so here we can write a html template configuration file to optimize the original email format.</p>
<p>At this point, the basic idea is already there.</p>
<p>The fourth question, **How to make the mail display as required? **</p>
<p>This problem needs to be analyzed step by step, and it can be expanded into many small problems.</p>
<p>First of all, we are going to use the Hutool API’s <code>MailUtil.send</code> method to send emails, what parameters does this method receive?</p>
<h5 id="MailUtil-send"><a href="#MailUtil-send" class="headerlink" title="MailUtil. send"></a>MailUtil. send</h5><p>Because this method is overloaded, I will directly introduce the parameters of the method we are going to use:</p>
<p>The <strong>source code</strong> of this method of Hutool is as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Send mail to multiple people</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> tos recipient list</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> subject title</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> content text</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> isHtml Whether it is in HTML format</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> files list of attachments</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">( Collection&lt;String&gt; tos, String subject, String content, <span class="hljs-type">boolean</span> isHtml, File... files)</span> &#123;<br>  Mail.setTos(tos.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[tos.size()]))<span class="hljs-comment">//</span><br>      .setTitle(subject)<span class="hljs-comment">//</span><br>      .setContent(content)<span class="hljs-comment">//</span><br>      .setHtml(isHtml)<span class="hljs-comment">//</span><br>      .setFiles(files)<span class="hljs-comment">//</span><br>      .send();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>To summarize, it needs these parameters:</p>
<ul>
<li>tos recipient, normally you can set more than one recipient, here is only one recipient</li>
<li>subject email subject</li>
<li>content The body of the email, which can be text or HTML content</li>
<li>isHtml is HTML, if yes, parameter 3 is identified as HTML content</li>
<li>File optional: attachment, can be multiple or none, just add the File object to the last variable parameter</li>
</ul>
<p>Therefore, it can be seen that if we want to modify the format of the email, we need to add an html page in the parameters. Moreover, this html page also needs to pass in the data and display it in the mail. So, here I used <code>template</code> of <code>BeelUtil</code>, which requires a <code>btl</code> file.</p>
<p>This file is added at the beginning of the email in html format</p>
<p>“Dear Manager: Employee who resigned … “ In this passage, a table is generated with html tags such as td at the same time, and the data is dynamically generated using <code>jsp</code>, so I won’t show it in detail here. Just follow the format of the front-end jsp page and create it with your own ideas.</p>
<p>Here the code to import templates using BeelUtil is as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">GroupTemplate</span> <span class="hljs-variable">gt</span> <span class="hljs-operator">=</span> BeelUtil.getGt();<br><span class="hljs-type">Template</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> gt.getTemplate(templateKeyPath);<br>Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;lists&quot;</span>,listsCopy);<br>template.binding(map)<br></code></pre></td></tr></table></figure>

<p>templateKeyPath is the path of the btl file, and listsCopy is the data of the copied arraylist. The reason to make a copy is because if the original data is not copied, the data will disappear after the template is bound, and finally an empty email will be sent to the template that cannot find the required data.</p>
<h5 id="Excel-Export"><a href="#Excel-Export" class="headerlink" title="Excel Export"></a>Excel Export</h5><p>The template is done, now we need to add an excel attachment to the email, so we need to export the data to an excel first, and then put the excel file in the parameters of <code>MailUtil.send</code>.</p>
<p>For the export of Excel files, the <code>ExcelExportUtil.exportExcel</code> method of <code>EasyPoi</code> is used here</p>
<p>This method also has many overloads, choose the one we want to use, <strong>source code</strong> is shown below:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Create corresponding Excel based on Entity</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> entity</span><br><span class="hljs-comment">* Table title attribute</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> pojoClass</span><br><span class="hljs-comment">* Excel object Class</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> dataSet</span><br><span class="hljs-comment">* Excel object data List</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Workbook <span class="hljs-title function_">exportExcel</span><span class="hljs-params">(ExportParams entity, Class&lt;?&gt; pojoClass, Collection&lt;?&gt; dataSet)</span> &#123;<br>	Workbook workbook;<br>	<span class="hljs-keyword">if</span> (ExcelType.HSSF.equals(entity.getType())) &#123;<br>		workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>();<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dataSet.size() &lt; <span class="hljs-number">1000</span>) &#123;<br>		workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>();<br>	&#125; <span class="hljs-keyword">else</span> &#123;<br>		workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SXSSFWorkbook</span>();<br>	&#125;<br>	<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelExportServer</span>().createSheet(workbook, entity, pojoClass, dataSet,<span class="hljs-literal">null</span>);<br>	<span class="hljs-keyword">return</span> workbook;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>It can be seen that the parameters required by the <code>exportExcel</code> method are:</p>
<ul>
<li>entity exportParams class, which contains various attributes of the excel file, such as title, title line content, etc.</li>
<li>pojoClass The entity class that needs to be transformed, in this example it is <code>sysUserEntity.class</code> and <code>businessUserEntity.class</code></li>
<li>dataSet incoming data</li>
</ul>
<p>From the perspective of privacy, I will not introduce the exportParams I want to set here in detail, but encapsulate it in the <code>getExportParams</code> method. Finally, read the exported excel as the parameter of <code>MailUtil.send</code>. Specifically as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// set title and other attributes in excel    </span><br><span class="hljs-type">ExportParams</span> <span class="hljs-variable">export</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getExportParams(title);<br>        <br><span class="hljs-comment">// export Excel</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> ExcelExportUtil.exportExcel(export,entityClass,lists);<br>...<br>com.spire.xls.<span class="hljs-type">Workbook</span> <span class="hljs-variable">_workbook</span> <span class="hljs-operator">=</span> poiUtils.convertToSpireWorkbook(workbook);<br><span class="hljs-comment">// encapsulation file outputStream method</span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getFileAttach(_workbook);<br><span class="hljs-comment">// send email</span><br>MailUtil.send(<span class="hljs-string">&quot;....@...&quot;</span>,subjectTitle,template.render(),<span class="hljs-literal">true</span>,file);<br></code></pre></td></tr></table></figure>

<ul>
<li><p><code>title</code> is the title string to be passed in manually, and is set as the internal title of excel through getExportParams.</p>
</li>
<li><p><code>subjectTitle</code> is the subject string to be passed in manually.</p>
</li>
<li><p><code>template.render()</code> is to render the template template obtained above</p>
</li>
</ul>
<p>But there is a problem here, this entityClass is the required class, and for this example, we know that it refers to <code>sysUserEntity.class</code> and <code>businessUserEntity.class</code>, but this is a generic method! You cannot access <code>T.class</code> directly because of type erasure.</p>
<p>So, here comes the question - how to get the generic type?</p>
<h5 id="Reflection-to-get-the-generic-Class-object"><a href="#Reflection-to-get-the-generic-Class-object" class="headerlink" title="Reflection to get the generic Class object"></a>Reflection to get the generic Class object</h5><p>Trying to write <code>T.class</code> in the idea fails even to compile, so what should I do?</p>
<p>Although generics will be erased during bytecode compilation, <code>Class</code> objects will record their implemented interfaces and inherited parent class information through <code>java.lang.reflect.Type</code>. Let’s take <code>ArrayList&lt;E&gt;</code> as an example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> strings.getClass().getGenericSuperclass();<br><span class="hljs-comment">// genericInterfaces = java.util.AbstractList&lt;E&gt;</span><br>System.out.println(<span class="hljs-string">&quot;genericSuperclass = &quot;</span> + genericSuperclass);<br></code></pre></td></tr></table></figure>

<p>The result is the placeholder E.</p>
<p>But obviously, what we want is String instead of that E.</p>
<p>genericSuperclass is <code>Type</code> type, and <code>Type</code> has four types:</p>
<ul>
<li><code>GenericArrayType</code> is used to describe a generic array of parameters.</li>
<li><code>WildcardType</code> is used to describe the generic type related to the wildcard <code>?</code>, including <code>?</code>, the lower bound wildcard <code>? super E</code>, and the upper bound wildcard <code>? extend E</code>.</li>
<li><code>Class&lt;T&gt;</code> is used to describe the <code>Class</code> object of the class.</li>
<li><code>ParameterizedType</code> is used to describe parameterized types.</li>
</ul>
<p>Take a look at instanceof and what will they output?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br> <br><span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> strings.getClass().getGenericSuperclass();<br> <br>System.out.println( genericSuperclass <span class="hljs-keyword">instanceof</span> ParameterizedType); <span class="hljs-comment">// true</span><br>System.out.println( genericSuperclass <span class="hljs-keyword">instanceof</span> Class); <span class="hljs-comment">// false</span><br>System.out.println( genericSuperclass <span class="hljs-keyword">instanceof</span> WildcardType); <span class="hljs-comment">// false</span><br>System.out.println( genericSuperclass <span class="hljs-keyword">instanceof</span> GenericArrayType); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>

<p>So, what do I gain by choosing a parameterized type approach?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">parameterizedType</span> <span class="hljs-operator">=</span> (ParameterizedType) genericSuperclass;<br>Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();<br>System.out.println(<span class="hljs-string">&quot;actualTypeArguments = &quot;</span> + Arrays.toString(actualTypeArguments));<br></code></pre></td></tr></table></figure>

<p>There is only one [E] in the returned Type[] array, and it seems that the result is still E, which seems to have failed.</p>
<p>But why?</p>
<p>The reason is actually on ArrayList, look at the source code of ArrayList:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br>&#123;<br>... <br>&#125;<br></code></pre></td></tr></table></figure>

<p>When ArrayList is instantiated, it only specifies its own generic type and does not specify the specific generic type of the parent class <code>AbstractList</code>, so the placeholder <code>E</code> is still obtained.</p>
<p>So here, in actual operation, what should I do if I just want the String type in arrayList<String>?</p>
<p>In fact, there is a simple method: (build anonymous subclass implementation)</p>
<blockquote>
<p>&#x2F;&#x2F; Look at the curly braces added at the end</p>
<p>ArrayList<String> strings &#x3D; new ArrayList<String>(){}; </p>
</blockquote>
<p>We can rewrite the method of implementing the parent class and specify the generic concrete type of the parent class through braces <code>&#123;&#125;</code>. why? Because adding a brace is equivalent to defining an anonymous inner class, and the type can be determined to be String at compile time.</p>
<p>Here we can write the project like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> lists.getClass().getGenericSuperclass();<br>Class&lt;?&gt; entityClass = (Class&lt;?&gt;)((ParameterizedType) genericSuperclass).getActualTypeArguments()[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure>

<p>lists is the ArrayList<T> we want to pass in.</p>
<h5 id="Set-the-recipient-in-the-configuration-file"><a href="#Set-the-recipient-in-the-configuration-file" class="headerlink" title="Set the recipient in the configuration file"></a>Set the recipient in the configuration file</h5><p>At this point, the code has basically been completed, but the recipient’s email address is fixed, which is fixed in the first parameter of <code>MailUtil.send</code>.</p>
<p>What if I still want to change the recipient email address in the configuration file?</p>
<p>Very simple, set key-value pairs in application.properties:</p>
<blockquote>
<p>auto.email&#x3D;”<a href="mailto:&#x61;&#97;&#97;&#x61;&#x61;&#x40;&#x62;&#x62;&#x62;&#x62;&#x62;&#x2e;&#x63;&#111;&#109;">&#x61;&#97;&#97;&#x61;&#x61;&#x40;&#x62;&#x62;&#x62;&#x62;&#x62;&#x2e;&#x63;&#111;&#109;</a>“</p>
</blockquote>
<p>Inject in Java Bean:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;auto.email&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String email;<br></code></pre></td></tr></table></figure>

<p>Then write <code>this.email</code> in the parameter of <code>MailUtil.send</code>.</p>
<h3 id="Summarize-2"><a href="#Summarize-2" class="headerlink" title="Summarize"></a>Summarize</h3><p>The complete code is roughly like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;auto.email&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String email;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendDeletedEmployeeAuto</span><span class="hljs-params">(List&lt;T&gt; lists, String templateKeyPath,String subjectTitle,</span><br><span class="hljs-params">                                       String title)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isNotEmpty(lists) &amp;&amp; lists.size() &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// Get the generic type</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> lists.getClass().getGenericSuperclass();<br>        Class&lt;?&gt; entityClass = (Class&lt;?&gt;)((ParameterizedType) genericSuperclass).getActualTypeArguments()[<span class="hljs-number">0</span>];<br>        <br>        <span class="hljs-comment">// Copy arraylist to help template read</span><br>        List&lt;T&gt; listsCopy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrrayList</span>&lt;&gt;();<br>        listsCopy = ListUtil.toCopyOnWriteArrayList(lists);<br>        <br>        <span class="hljs-comment">// template</span><br>        <span class="hljs-type">GroupTemplate</span> <span class="hljs-variable">gt</span> <span class="hljs-operator">=</span> BeelUtil.getGt();<br>        <span class="hljs-type">Template</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> gt.getTemplate(templateKeyPath);<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;lists&quot;</span>,listsCopy);<br>        template.binding(map)<br>            <br>        <span class="hljs-comment">// set title in excel    </span><br>        <span class="hljs-type">ExportParams</span> <span class="hljs-variable">export</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getExportParams(title);<br>        <br>        <span class="hljs-comment">// export Excel</span><br>        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> ExcelExportUtil.exportExcel(export,entityClass,lists);<br>        ...<br>        com.spire.xls.<span class="hljs-type">Workbook</span> <span class="hljs-variable">_workbook</span> <span class="hljs-operator">=</span> poiUtils.convertToSpireWorkbook(workbook);<br>        <span class="hljs-comment">// encapsulation file outputStream method</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getFileAttach(_workbook);<br>        <span class="hljs-comment">// send email</span><br>        MailUtil.send(<span class="hljs-built_in">this</span>.email,subjectTitle,template.render(),<span class="hljs-literal">true</span>,file);<br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<p>After sending the email, it can be displayed according to the requirements. The specific style depends on the html file written by yourself.</p>
<p>This requirement is a brand-new project that I haven’t touched before, and I also tried to write a generic method by myself, which can be said to be very interesting. Mainly learned:</p>
<ol>
<li><strong>Use of <code>MailUtil.send</code> method of <code>Hutool</code></strong></li>
<li><strong><code>EasyPoi</code>‘s <code>ExcelExportUtil.exportExcel</code> method uses</strong></li>
<li><strong>How to get the generic type through reflection</strong></li>
<li><strong>How to inject configuration file attributes into classes</strong></li>
</ol>
<hr>
<hr>
<h2 id="4-Dashboard-with-dropdown-boxes-x2F-Histogram"><a href="#4-Dashboard-with-dropdown-boxes-x2F-Histogram" class="headerlink" title="4. Dashboard with dropdown boxes&#x2F;Histogram"></a>4. Dashboard with dropdown boxes&#x2F;Histogram</h2><hr>
<p>This is a new and particularly complete page dashboard requirement, including drop-down box design and corresponding data collection and restrictions, as well as the display of data histogram in Vue, etc.</p>
<h3 id="Requirement-Description-3"><a href="#Requirement-Description-3" class="headerlink" title="Requirement Description"></a>Requirement Description</h3><p>It is necessary to build a screen similar to the following, and the basic functional requirements included are:</p>
<p><img src="/en/images/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82%EF%BC%883%EF%BC%89.png" alt="项目记录-企业需求3"></p>
<ul>
<li>Implementation of drop-down box </li>
<li>Mandatory to select the project first to get the line and process drop-down box</li>
<li>Implementation of histogram</li>
<li>Implementation of date selection</li>
<li>input box for name, employee id</li>
<li>Implementation of data tables</li>
</ul>
<h3 id="Question-3"><a href="#Question-3" class="headerlink" title="Question"></a>Question</h3><p>As written in the requirements description, the functions that need to be implemented are highly related to my problem:</p>
<ul>
<li><p>How should the drop-down box function be implemented?</p>
</li>
<li><p>How should the department tree be obtained?</p>
</li>
<li><p>Line and process data need to obtain project data before displaying them. What should I do?</p>
</li>
<li><p>How should the dynamic histogram function be implemented?</p>
</li>
<li><p>How to query parameters such as date, name, and employee id in the backend?</p>
</li>
<li><p>How should the table data be presented?</p>
</li>
</ul>
<h3 id="Idea-and-Implementation-2"><a href="#Idea-and-Implementation-2" class="headerlink" title="Idea and Implementation"></a>Idea and Implementation</h3><p>This project involves the Implementation of many functions. Let us think step by step. This time, we will not distinguish the front-end and back-end codes, but analyze the requirements, because a function often involves both the front-end code and the back-end code. It may be easier to understand if it is analyzed around requirements.</p>
<h4 id="Dept-department-tree-cascade-selector"><a href="#Dept-department-tree-cascade-selector" class="headerlink" title="Dept department tree cascade selector"></a>Dept department tree cascade selector</h4><p>This piece <strong>I won’t talk about it in detail</strong>, because it involves company privacy, and it is also a completed interface call. The backend can directly call this interface and pass it to the frontend.</p>
<p>The front-end code here is implemented using the cascader of <strong>element-ui</strong>, and the Vue code is as follows:</p>
<p>(Note that although a <code>cust-cascader</code> component is encapsulated here, the function is similar to <strong>el-cascader</strong>)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;cust-cascader<br>	v-model=<span class="hljs-string">&quot;queryParam.deptCode&quot;</span><br>	<span class="hljs-keyword">class</span>= <span class="hljs-string">&quot;filter-item&quot;</span> <br>	:placeholder=<span class="hljs-string">&quot;Dept&quot;</span><br>	:props = <span class="hljs-string">&quot;&#123;value:&#x27;deptId&#x27;,label:&#x27;name&#x27;&#125;&quot;</span><br>	:show-all-levels=<span class="hljs-string">&quot;false&quot;</span><br>	:options=<span class="hljs-string">&quot;orgTree.treeList&quot;</span><br>	ref=<span class="hljs-string">&quot;cascader&quot;</span><br>	size=<span class="hljs-string">&quot;mini&quot;</span><br>	style=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span><br>/&gt;<br></code></pre></td></tr></table></figure>

<ul>
<li>The data bound by <code>v-model</code> will be passed to the backend through the front end in the future;</li>
<li>Attributes such as <code>class, style, size</code> are used for beautification;</li>
<li>The <code>show-all-levels</code> attribute is part of <strong>el-cascader</strong> and is used to determine whether to display the full path of the selected value (ie the full path of the department tree) in the input box</li>
<li><code>placeholder</code> displays text inside the box</li>
</ul>
<p>So where does the original data of this drop-down box come from? —— Obtained through the combination of <code>options</code> and <code>props</code>, the treeList of orgTree obtained by <code>:options</code>, this treeList is obtained from the <code>data</code> attribute, and the <code>data</code> attribute is implemented by placing it in <code>created</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>&#123;<br>        <span class="hljs-attr">orgTree</span>:&#123;<br>            <span class="hljs-attr">treeList</span>:[],<br>            <span class="hljs-attr">selectId</span>:<span class="hljs-literal">null</span>,<br>            <span class="hljs-attr">defaultProps</span>:&#123;<br>                <span class="hljs-attr">children</span>:<span class="hljs-string">&quot;children&quot;</span>,<br>                <span class="hljs-attr">label</span>:<span class="hljs-string">&quot;label&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;,<br>    <br><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> ...<br><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">handleOrgTreeList</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">getOrgList</span>(&#123;<span class="hljs-attr">orderBy</span>:<span class="hljs-string">&quot;orderNum&quot;</span>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> data = res.<span class="hljs-property">data</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">orgTree</span>.<span class="hljs-property">treeList</span> = data;<br>        &#125;)<br>    &#125;        <br>&#125;,<br>    <br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleOrgTreeList</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.$isNotEmpty(<span class="hljs-variable language_">this</span>.<span class="hljs-property">orgTree</span>.<span class="hljs-property">treeList</span>))&#123;<br>            <span class="hljs-keyword">const</span> firstNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">orgTree</span>.<span class="hljs-property">treeList</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>It can be seen that when the component is created, the <code>handleOrgTreeList</code> method is called, that is, the back-end interface is called, the <code>orgTree.treeList</code> is assigned a value. Then it is naturally put into the cascading selector after the DOM is rendered and displayed.</p>
<h4 id="Project-and-Type-drop-down-box"><a href="#Project-and-Type-drop-down-box" class="headerlink" title="Project and Type drop-down box"></a>Project and Type drop-down box</h4><p>We know that according to the normal design logic, the content of the drop-down box should be displayed when the user clicks, instead of waiting for the user to enter a few characters before starting to search and display the data, so it is natural to think that the implementation of the method should be written in <code>created</code> or <code>mounted</code>.</p>
<p>In fact, the implementation logic of these two drop-down boxes is the same. I will use the Type drop-down box as an example to show here. The difference between the Project drop-down box and the Type drop-down box is only in the difference in SQL query.</p>
<p>This time, first write the content of the backend first. The backend first completes a very simple code logic in the Controller class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(&quot;...&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/bi&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseController</span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BaseService baseService;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseController</span><span class="hljs-params">(BaseService baseService)</span>&#123;<br>        <span class="hljs-comment">// Constructor injection. If the code is bloated later, can add @AllArgsConstructora to remove 				this part</span><br>        <span class="hljs-built_in">this</span>.baseService = baseService;<br>    &#125;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/type&quot;)</span><br>    <span class="hljs-meta">@ApiOperation</span><br>    <span class="hljs-keyword">public</span> WebResult&lt;List&lt;BaseEmployeeEntity&gt;&gt; <span class="hljs-title function_">findType</span><span class="hljs-params">()</span>&#123;<br>        &lt;List&lt;BaseEmployeeEntity&gt;&gt; list = baseService.findType();<br>        <span class="hljs-keyword">return</span> WebResult.ok(list);<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure>

<p>A <code>GetMapping</code> method:</p>
<ul>
<li>As mentioned before, <code>WebResult</code> is an encapsulated class for customizing the mapping from return values to WSDL.</li>
<li><code>BaseEmployeeEntity</code> is an entity class associated with a database. There are many fields in it, but all we need is the field associated with type, which will be used to obtain employee types: A, B, C, D.</li>
<li><code>QueryParams</code> class, an encapsulated class that receives front-end parameters.</li>
</ul>
<p>Next, the codes of the Service layer and the ServiceImpl layer are as follows: </p>
<p><strong>BaseService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BaseService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SysBaseService</span>&lt;BaseMapper,BaseEmployeeEntity&gt;&#123;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@return</span> a list of type field, now (A,B,C,D)</span><br><span class="hljs-comment">	*/</span><br>    List&lt;BaseEmployeeEntity&gt; <span class="hljs-title function_">findType</span><span class="hljs-params">()</span>;   <br>&#125;<br><br><br></code></pre></td></tr></table></figure>

<p><strong>BaseServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SysBaseServiceImpl</span>&lt;BaseMapper,BaseEmployeeEntity&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BaseService</span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;BaseEmployeeEntity&gt; <span class="hljs-title function_">findType</span><span class="hljs-params">()</span>&#123;<br>        LambdaQuery&lt;BaseEmployeeEntity&gt; query = sqlManager.lambdaQuery(BaseEmployeeEntity.class);<br>        <span class="hljs-comment">// deduplication and check not empty</span><br>        List&lt;BaseEmployeeEntity&gt; select = query.andIsNotNull(BaseEmployeeEntity::getType)<br>            .groupBy(BaseEmployeeEntity::getType)<br>            .select(BaseEmployeeEntity::getType);<br>        <span class="hljs-keyword">return</span> select;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>The implementation layer of the Service first creates a sql query through beetl sql, then removes the data whose type column is empty in the data table through <code>andIsNotNull</code>, then removes duplication through <code>groupBy</code>, and finally returns through <code>select</code>. This code roughly executes the following SQL statement:</p>
<p>Note that the operation on the table here is actually the operation on the table associated with the <code>BaseEmployeeEntity</code> class</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> type <span class="hljs-keyword">from</span> ...<br><span class="hljs-keyword">where</span> type <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> type<br></code></pre></td></tr></table></figure>

<p>Through this SQL, the backend returns to the frontend the four employee types A, B, C, and D.</p>
<p>The logic of the Project drop-down box is basically the same as that of Type, so I won’t go into details here.</p>
<p>It is also worth mentioning that the display of this part of the front end：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;el-select<br>	:placeholder=<span class="hljs-string">&quot;project&quot;</span><br>	<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span><br>	size=<span class="hljs-string">&quot;mini&quot;</span><br>	filterable<br>	clearable<br>	:loading=<span class="hljs-string">&quot;selectLoading&quot;</span><br>	v-model=<span class="hljs-string">&quot;queryParam.projectCode&quot;</span><br>	style=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span><br>	@change=<span class="hljs-string">&quot;prochange&quot;</span><br>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">	<span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in projectArr&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">	<span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.projectCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">	<span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.projecName&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">	<span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.projectCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span>                    </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br>&lt;/el-select&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;type&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">filterable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;selectLoading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.type&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in typeArr&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span>                    </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p><code>element-ui</code> has an adapted el-select component to help us display the drop-down box. What needs to be noted here is the loading attribute, which starts when the data loads for a long time, and there will be special effects of waiting in circles.</p>
<p>The value of the v-model two-way binding is the value that needs to be passed to the backend for searching in the future.</p>
<p>Where does the value of the drop-down box come from? This value needs to be obtained from the <code>el-option</code> component. The front end of <code>el-option</code> displays the value of the <code>:label</code> tag, and its corresponding index is the value of <code>:value</code>. Take the acquisition of Type and project as an example, <code>el-option</code> obviously displays the values of <code>typeArr</code> and <code>projectArr</code> in the drop-down box, and their values are obtained through back-end methods. Then, how do they interact with the back-end at the front-end?</p>
<p>The method used here is <code>mapGetters</code>, <code>mapActions</code>, of course, you can also choose to import an api directly on the front end.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">computed</span>:&#123;<br>        ...<span class="hljs-title function_">mapGetters</span>(&#123;<br>            <span class="hljs-attr">projectArr</span>:<span class="hljs-string">&quot;getProjectArr&quot;</span>,<br>            <span class="hljs-attr">typeArr</span>:<span class="hljs-string">&quot;getType&quot;</span>,<br>        &#125;),<br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>        ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;updateProjectArr&#x27;</span>,<span class="hljs-string">&#x27;updateTypeArr&#x27;</span>]),<br>        <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateProjectArr</span>();<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateTypeArr</span>();<br>        &#125;<br>&#125;,<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>();<br>&#125;,    <br></code></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> projectApi <span class="hljs-keyword">from</span> ...<br><span class="hljs-keyword">import</span> lineProcessApi <span class="hljs-keyword">from</span> ...<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">state</span>:&#123;<br>        <span class="hljs-attr">projectArr</span>:[],<br>        <span class="hljs-attr">projectArrVisited</span>:<span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">typeArr</span>:[],<br>        <span class="hljs-attr">typeArrVisited</span>:<span class="hljs-literal">false</span><br>    &#125;,<br>    <span class="hljs-attr">getters</span>:&#123;<br>        <span class="hljs-attr">getProjectArr</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">projectArr</span>,<br>        <span class="hljs-attr">getTypeArr</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">typeArr</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>:&#123;<br>        <span class="hljs-title function_">setProjectArr</span>(<span class="hljs-params">state,project</span>)&#123;<br>            state.<span class="hljs-property">projectArr</span> = project<br>            state.<span class="hljs-property">projectArrVisited</span> = <span class="hljs-literal">true</span><br>        &#125;,<br>        <span class="hljs-title function_">setTypeArr</span>(<span class="hljs-params">state,type</span>)&#123;<br>            state.<span class="hljs-property">typeArr</span> = type<br>            state.<span class="hljs-property">typeArrVisited</span> = <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>:&#123;<br>        <span class="hljs-title function_">updateProjectArr</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">            commit,</span><br><span class="hljs-params">            state</span><br><span class="hljs-params">        &#125;,ignorant</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!state.<span class="hljs-property">projectArrVisited</span> || ignorant)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">let</span> queryParam = &#123;<br>                        <span class="hljs-attr">query</span>:&#123;<br>                            <span class="hljs-attr">projectCode</span>:<span class="hljs-literal">null</span>,<br>                            <span class="hljs-attr">projectName</span>:<span class="hljs-literal">null</span><br>                        &#125;,<br>                        <span class="hljs-attr">pageSize</span>:<span class="hljs-number">9999</span>,<br>                        <span class="hljs-attr">pageNum</span>:<span class="hljs-number">1</span>,<br>                        <span class="hljs-attr">pageQuery</span>:<span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">fuzzyQuery</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">// default fuzzy query</span><br>                        <span class="hljs-attr">orderby</span>:<span class="hljs-literal">null</span><br>                    &#125;<br>                    projectApi.<span class="hljs-title function_">list</span>(queryParam).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">if</span>(res.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>)&#123;<br>                            <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setProjectArr&#x27;</span>,res.<span class="hljs-property">data</span>)<br>                            <span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>)<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-title function_">reject</span>()<br>                        &#125;<br>                    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-title function_">reject</span>()<br>                    &#125;);<br>                &#125;)<br>            &#125;<br>        &#125;,<br>        <span class="hljs-title function_">updateTypeArr</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">            commit,</span><br><span class="hljs-params">            state</span><br><span class="hljs-params">        &#125;,ignorant</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!state.<span class="hljs-property">typeArrVisited</span> || ignorant)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>                    lineProcessApi.<span class="hljs-title function_">type</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">if</span>(res.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>)&#123;<br>                            <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setTypeArr&#x27;</span>,res.<span class="hljs-property">data</span>)<br>                            <span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>)<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-title function_">reject</span>()<br>                        &#125;<br>                    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-title function_">reject</span>()<br>                    &#125;);<br>                &#125;)<br>            &#125;<br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><code>Vuex</code> is a state management pattern + library developed specifically for Vue.js applications. It uses a centralized storage to manage the state of all components of the application, and uses corresponding rules to ensure that the state changes in a predictable manner.</p>
<p>Among them, <code>state</code> and <code>getters</code> are used to save the state; <code>mutations</code> and <code>actions</code> are used to change the state; the <code>computed</code> attribute in the Vue component is used to monitor the state; <code>module</code> is used to organize the state management code of the entire application, making the state division module easier to manage; the auxiliary function is used to simplify the code when monitoring the state, and <code>createStore</code> is used to create the state management object.</p>
<p>The corresponding data can be obtained directly through Vuex’s <code>mapActions</code>, such as ProjectArr.</p>
<p>So far, the function of the drop-down box has been implemented.</p>
<h4 id="Conditional-drop-down-box"><a href="#Conditional-drop-down-box" class="headerlink" title="Conditional drop-down box"></a>Conditional drop-down box</h4><p>回顾一下我们的需求——除了dept,project和type下拉框，我们还有Line和process下拉框，这两个下拉框的数据有些不同，它必须要先选择了项目，才会出现下拉选项。而且，它还有一些映射关系：</p>
<ul>
<li>一个项目可能只有line，这个时候process下拉框没有数据</li>
<li>一个项目可能只有process，这个时候line下拉框没有数据</li>
<li>一个项目可能既有line又有process，这个时候两个下拉框都有数据</li>
</ul>
<p>同时，这里数据的收集也很有意思，A表中的数据既有line和process，B表只有line的数据，所以假设项目a只有line，则必须在两个表中查询，不过A表可能没有需要的数据，只有B表才有。</p>
<p>这里在后端的实现与前面并没有什么区别，不过需要使用<code>PostMapping</code>而不是<code>GetMapping</code>了，因为需要接收一个project参数，然后再返回给前端Line和process的数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/lineOrProcess&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;lineOrProcess information&quot;)</span><br><span class="hljs-keyword">public</span> WebResult&lt;List&lt;BaseEmployeeEntity&gt;&gt; <span class="hljs-title function_">findLineOrProcess</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> BaseEmployeeEntity queryParam)</span>&#123;<br>    &lt;List&lt;BaseEmployeeEntity&gt;&gt; list = baseService.findLineOrProcess(queryParam);<br>    <span class="hljs-keyword">return</span> WebResult.ok(list);<br>&#125;   <br></code></pre></td></tr></table></figure>

<p>值得思考的是，我们需要返回什么给数据？</p>
<p>一个思路是：一个标识符标识这是line还是process，这样我们返回的数据类似这样：</p>
<table>
<thead>
<tr>
<th>type</th>
<th>code</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>D1</td>
<td>process2</td>
</tr>
<tr>
<td>2</td>
<td>D2</td>
<td>process3</td>
</tr>
<tr>
<td>3</td>
<td>S1</td>
<td>line1</td>
</tr>
</tbody></table>
<p>type为3代表是Line，type为2代表是process，code列用于标识不同的line或者process，而Name列的值用于显示在下拉框。</p>
<p>有了这个思路，就可以把这个想法在SQL中实现，后端的代码比较简单就不赘述了，serviceImpl调用Mapper方法，mapper方法再调用SQL即可。</p>
<p>SQL代码如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">findLineOrProcess<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-keyword">SELECT</span> line_type,line_code,line_name<br><span class="hljs-keyword">from</span> A<br><span class="hljs-keyword">where</span> project_code <span class="hljs-operator">=</span> #&#123;projectCode&#125;<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> line_type,line_code,line_name<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;3&#x27;</span>,line_code,line_name<br><span class="hljs-keyword">from</span> B<br><span class="hljs-keyword">where</span> project_code <span class="hljs-operator">=</span> #&#123;projectCode&#125;<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> line_code,line_name<br></code></pre></td></tr></table></figure>

<p>从 <code>#&#123;projectCode&#125;</code> 可见，该SQL脚本需要projectCode作为查询参数。而这里之所以要这么设计，使用一个Union，是为了满足前面的条件，因为A表可能又有line又有process数据，B表只有line数据，那么，当我们传入项目编码，就可以同时在表中搜寻：</p>
<p>它有以下几种可能发生：</p>
<ul>
<li>该项目只有line,line数据只在A表。这种情况我们从A表获取到对应的数据，B表没有获取到数据，union后也不会影响到从A表获取到的数据；</li>
<li>该项目只有line,line数据只在B表。这种情况我们从B表获取到对应的数据，A表没有获取到数据，union后也不会影响到从B表获取到的数据；</li>
<li>该项目的Line数据在A，B表都有，因此我们会从A，B表分别获取数据，union后合并。并且从B表获取的数据我们直接给type列命名为了’3’，这是因为B表只有表示为3的line数据。同时，由于sql的特性，union在前面的那个表字段名会覆盖后面的那个表字段，这样达成了我们的要求。</li>
<li>该项目只有process，process数据我们知道只在A表有，因此B表不会获取到数据，union后也不会影响到从A表获取到的数据；</li>
<li>该项目既有process又有line，同该项目的Line数据在A，B表都有的情况。</li>
</ul>
<p>到此，我们在后端对数据的采集完成了，前端怎么收集呢？</p>
<p>很显然，我们需要对收集到的数据的type做一个判断，然后把它们分别放到对应的el-option的循环里面展示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">toSectionSearch</span>(<span class="hljs-params">val</span>)&#123;<br>            <span class="hljs-comment">// project can not be null</span><br>            <span class="hljs-keyword">if</span>(<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span> == <span class="hljs-string">&quot;&quot;</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span> == <span class="hljs-literal">undefined</span><br>            )&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;project can not be null&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// Some projects only have processes or lines, and some have both processes and lines</span><br>            <span class="hljs-keyword">if</span>(val != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectLoading</span> = <span class="hljs-literal">true</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span>=[];<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span>=[];<br>                lineProcessApi.<span class="hljs-title function_">lineOrProcess</span>(&#123;<br>                    <span class="hljs-attr">projectCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span><br>                &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">let</span> sectionData = res.<span class="hljs-property">data</span>;<br>                    <span class="hljs-comment">// lineType is 3 means line</span><br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span> = sectionData.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span>&#123;<br>                        <span class="hljs-keyword">if</span>(item.<span class="hljs-property">lineType</span> == <span class="hljs-string">&quot;3&quot;</span>)&#123;<br>                            <span class="hljs-keyword">return</span>&#123;<br>                                <span class="hljs-attr">value</span>:item.<span class="hljs-property">lineCode</span>,<br>                                <span class="hljs-attr">label</span>:item.<span class="hljs-property">lineName</span><br>                            &#125;;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">return</span>&#123;<br>                                <span class="hljs-attr">value</span>:<span class="hljs-literal">null</span>,<br>                                <span class="hljs-attr">label</span>:<span class="hljs-literal">null</span><br>                            &#125;;<br>                        &#125;<br>                    &#125;);<br>                    <span class="hljs-comment">// lineType is 3 means process</span><br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span> = sectionData.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">if</span>(item.<span class="hljs-property">lineType</span> == <span class="hljs-string">&quot;2&quot;</span>)&#123;<br>                            <span class="hljs-keyword">return</span>&#123;<br>                                <span class="hljs-attr">value</span>:item.<span class="hljs-property">lineCode</span>,<br>                                <span class="hljs-attr">label</span>:item.<span class="hljs-property">lineName</span><br>                            &#125;;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">return</span>&#123;<br>                                <span class="hljs-attr">value</span>:<span class="hljs-literal">null</span>,<br>                                <span class="hljs-attr">label</span>:<span class="hljs-literal">null</span><br>                            &#125;;<br>                        &#125;                        <br>                    &#125;);<br>                    <span class="hljs-comment">// remove all null</span><br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">return</span> item.<span class="hljs-property">value</span> != <span class="hljs-literal">null</span>;<br>                    &#125;);<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">return</span> item.<span class="hljs-property">value</span> != <span class="hljs-literal">null</span>;<br>                    &#125;);<br>                &#125;);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span>=[];<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span>=[];<br>            &#125;<br><br>            <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectLoading</span>=<span class="hljs-literal">false</span>;<br>            &#125;);<br>        &#125;,<br></code></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">BaseAPI</span> <span class="hljs-keyword">from</span> ...<br><br><span class="hljs-comment">// use to run controller class as default</span><br><span class="hljs-keyword">const</span> api = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseAPI</span>(<span class="hljs-string">&#x27;/bi&#x27;</span>)<br><br>api.<span class="hljs-property">lineOrProcess</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">query</span>)&#123;<br>    <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">httpRequest</span>(&#123;<br>        <span class="hljs-comment">// baseUrl is the default url &quot;/&quot; when the url is empty </span><br>        <span class="hljs-attr">url</span>:api.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&#x27;/lineOrProcess&#x27;</span>,<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:query || &#123;&#125;<br>    &#125;)<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>这里的Vue代码首先进行了project不能为空的判断,然后调用了<code>lineProcessApi</code>的<code>lineOrProcess</code>方法（如代码片段二）所示。</p>
<p>通过调用<code>lineOrProcess</code>方法，获取到的数据如我们之前所展示的表格那样。</p>
<p>然后我们进行了一个判断，使用Map函数对里面的每个值进行判断，如果type为2就把它放到processList里面，type为3就把它放到lineList里面，如果不是就赋值为null。值得注意的是因为，需要使用filter筛除掉这些null值，因为null值也会显示在下拉框里面，表示为一片空白。</p>
<p>至此功能就实现了，这里的Vue代码展示如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;el-select<br>	:placeholder=<span class="hljs-string">&quot;process&quot;</span><br>	<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span><br>	size=<span class="hljs-string">&quot;mini&quot;</span><br>	filterable<br>    clearable<br>	:loading=<span class="hljs-string">&quot;selectLoading&quot;</span><br>    v-model=<span class="hljs-string">&quot;queryParam.processCode&quot;</span><br>    style=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span><br>	&gt;<br>	<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">    	<span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in processList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span>                    </span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br>&lt;/el-select&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span></span><br><span class="hljs-tag"><span class="language-xml">	<span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;line&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">	<span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">	<span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">	<span class="hljs-attr">filterable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;selectLoading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.lineCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">	&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">    	<span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in lineList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span>                    </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<h4 id="Table-data-display"><a href="#Table-data-display" class="headerlink" title="Table data display"></a>Table data display</h4><p>This part is relatively simple. element-ui has a corresponding <code>el-table</code> for data display. Here I directly use the packaged table component, called <code>app-table</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;div style=<span class="hljs-string">&quot;margin-top: 5px;&quot;</span>&gt;<br>	<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-tabs</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;tabCurrent&quot;</span>&gt;</span></span><br><span class="language-xml">		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 6px;&quot;</span>&gt;</span></span><br><span class="language-xml">			<span class="hljs-tag">&lt;<span class="hljs-name">app-table</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;table&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-table&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">v-loading</span>=<span class="hljs-string">&quot;dataTable.loading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">:boarder</span>=<span class="hljs-string">&quot;true&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;dataTable.dataList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">:columns</span>=<span class="hljs-string">&quot;tableFields&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">overflow</span>=<span class="hljs-string">&quot;auto&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">			&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-table</span>&gt;</span></span><br><span class="language-xml">		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">	<span class="hljs-tag">&lt;/<span class="hljs-name">el-tabs</span>&gt;</span></span><br>	<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pagination</span></span></span><br><span class="hljs-tag"><span class="language-xml">		<span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;dataTable.total&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">		<span class="hljs-attr">:page.sync</span>=<span class="hljs-string">&quot;queryParam.page&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">		<span class="hljs-attr">:limit.sync</span>=<span class="hljs-string">&quot;queryParam.limit&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">		@<span class="hljs-attr">pagination</span>=<span class="hljs-string">&quot;handleList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">	&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pagination</span>&gt;</span></span><br>&lt;/div&gt;    <br><br><br></code></pre></td></tr></table></figure>

<p><code>:data</code> stores the data from the backend, and the <code>pagination</code> component is used for pagination. It needs parameters such as page limit to display the number of pages and limit the number of data per page.</p>
<p>At the same time, the front-end method for obtaining data is also called through <code>@pagination</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">handleList</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">loading</span>=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">await</span> lineProcessApi.<span class="hljs-title function_">findDetail</span>(&#123;<br>        <span class="hljs-attr">deptCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">deptCode</span>,<br>        <span class="hljs-attr">projectCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span>,<br>        <span class="hljs-attr">processCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">processCode</span>,<br>        <span class="hljs-attr">lineCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">lineCode</span>,<br>        <span class="hljs-attr">type</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">type</span>,<br>        <span class="hljs-attr">beginDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">beginDate</span>,<br>        <span class="hljs-attr">endDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">endDate</span>,<br>        <span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">name</span>,<br>        <span class="hljs-attr">employeeId</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">employeeId</span>,<br>        <span class="hljs-attr">page</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">page</span>,<br>        <span class="hljs-attr">limit</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">limit</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>,&#123;<br>            <span class="hljs-attr">dataList</span>:res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>,<br>            <span class="hljs-attr">total</span>:res.<span class="hljs-property">data</span>.<span class="hljs-property">totalRow</span><br>        &#125;);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">loading</span>=<span class="hljs-literal">false</span>;<br>    &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure>

<p>This is an asynchronous method, call the <code>findDetail</code> method of <code>lineProcessApi</code>, the parameters that need to be passed have been displayed, that is, <code>deptCode</code>, <code>projectCode</code> and other values, and finally assign the obtained data to the dataTable through <code>Object.assign</code>.</p>
<p>How is this part of the backend implemented?</p>
<p>In fact, the idea of dashboard design is very simple:</p>
<blockquote>
<p>Understand what data the front-end needs, and what data the back-end needs to pass in from the front-end.</p>
</blockquote>
<p>Starting from this idea, we know that if we want to do a query, the parameters that the front end needs to pass to the back end are the contents of the drop-down box or input box on the page:</p>
<p>That is, <code>deptCode</code>, <code>projectCode</code>, <code>processCode</code>, <code>lineCode</code>, <code>name</code>, <code>employeeId</code>… and other values, these values are stored in a <code>DTO</code> class at the back end, SQL query is performed through the mapper, and the query result is put into a <code>VO</code> class and returned to the front end. The data that the front end needs to receive is the data that needs to be displayed in the form, that is, employee information: <code>name</code>, <code>address</code>, <code>type</code>, etc.</p>
<p>So we can create a new <code>DTO</code> class as follows, and the <code>VO</code> class is similar:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/** </span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>   <br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(&quot;BaseDTO&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDTO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageParam</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> ...;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;deptCode&quot;)</span><br>    <span class="hljs-keyword">private</span> String deptCode;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;process&quot;)</span><br>    <span class="hljs-keyword">private</span> String processCode;<br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;line&quot;)</span><br>    <span class="hljs-keyword">private</span> String lineCode;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;type&quot;)</span><br>    <span class="hljs-keyword">private</span> String type;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;beginDate&quot;)</span><br>    <span class="hljs-keyword">private</span> String beginDate;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;endDate&quot;)</span><br>    <span class="hljs-keyword">private</span> String endDate;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;employeeId&quot;)</span><br>    <span class="hljs-keyword">private</span> String employeeId;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<p>This <code>DTO</code> class stores the data transmitted from the front end, and the code can be completed in the Controller and Service layers according to the normal process. It should be noted that the code of the ServiceImpl class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>publci PageResult&lt;BaseVO&gt; <span class="hljs-title function_">findDetail</span><span class="hljs-params">(BaseDTO queryParam)</span>&#123;<br>    <span class="hljs-comment">// if deptCode is null, then give a default dept code by userId</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(queryParam.getDeptCode()))&#123;<br>        queryParam.setDeptCode(anotherService.setHighDeptCode());<br>    &#125;<br>    Map&lt;String,Object&gt; pageParam = query.getPageParam();<br>    PageResult&lt;BaseVO&gt; vos = mapper.findDetail(queryParam.getPageRequest(),pageParam);<br>    <span class="hljs-keyword">return</span> vos;        <br>&#125;<br></code></pre></td></tr></table></figure>

<p>Some null value judgments need to be made here, because the user has not passed any parameters when they just saw the page, but at this time the report needs to display some values, so some default values need to be set here.</p>
<p><code>pageParam</code> is the paging class of beetlsql, which stores <code>limit</code> (the number of data displayed on each page) and <code>page</code> (the current number of pages) information.</p>
<p>These data will be combined and queried in the mapper layer through the <code>@Root</code> annotation：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * ...</span><br><span class="hljs-comment">*/</span>      <br>   PageResult&lt;BaseVO&gt; <span class="hljs-title function_">findDetail</span><span class="hljs-params">(PageRequest&lt;BaseDTO&gt; query, <span class="hljs-meta">@Root</span> Map pageParam)</span>;<br></code></pre></td></tr></table></figure>

<p>The SQL code is as follows:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">findDetail<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-comment">-- @pageTag()&#123;</span><br>name,employeeId,sex...<br><span class="hljs-comment">-- @&#125;</span><br><span class="hljs-keyword">FROM</span>(<br>nbe.name <span class="hljs-keyword">as</span> name,<br>nbe.employeeId <span class="hljs-keyword">as</span> employeeId,<br>...<br><span class="hljs-keyword">FROM</span><br>employee nbe <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>(<br><span class="hljs-keyword">SELECT</span> nbe.deptId,nbd.deptName<br>    <span class="hljs-keyword">FROM</span> department nbd <span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> nbd.deptId <span class="hljs-operator">=</span> #&#123;deptCode&#125; <br>    <span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">BY</span> nbd.up_deptId <span class="hljs-operator">=</span> PRIOR nbd.deptId<br>) nbd <span class="hljs-keyword">ON</span> nbd.deptId <span class="hljs-operator">=</span> nbe.deptId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> ...<br><span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-comment">-- @if(!isEmpty(projectCode) || !isBlank(projectCode))&#123;</span><br>	<span class="hljs-keyword">and</span> nbe.projectCode <span class="hljs-operator">=</span> #&#123;projectCode&#125;<br><span class="hljs-comment">-- @&#125;</span><br><span class="hljs-comment">-- @if(...)&#123;</span><br>	...<br><span class="hljs-comment">-- @&#125;</span><br>...<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>nbe.name,<br>nbe.employeeId,<br>...)<br></code></pre></td></tr></table></figure>

<p>Ignore the content of <code>-- @</code> for the time being, the sql logic here is relatively easy to understand, associate several related tables, and then define the corresponding qualification conditions of <code>where</code>, and then use <code>Group by</code> to deduplicate. It is worth mentioning the content of beetlsql here. First of all, the reason why a layer of select is nested in the outermost layer of select is the requirement of beetlsql. If you want to use Group by for paging, you need to nest this query in the outermost layer.</p>
<p>So why not use <code>distinct</code> for deduplication? Here is a defect in beetlsql paging.</p>
<p>beetlsql needs to calculate a <code>TotalRow</code> attribute when paging. This attribute is used to calculate the total number of data, and then display the corresponding number of pages when paging. But the calculation method of this total has nothing to do with the content written in <code>select</code>, beetlsql directly calls the <code>select count(*)</code> function to create a new SQL query as the result of <code>TotalRow</code>, which also leads to <code>select distinct</code> result conflicts with it (because <code>select count(*)</code> will not deduplicate), so <code>Group by</code> needs to be used here.</p>
<p>But another problem is that when beetlsql uses <code>Group by</code>, it cannot directly page the results of <code>Group by</code>, it needs to nest a layer of <code>select</code> outside to page, so the SQL here is written as an inner and outer nested format.</p>
<p><code>-- @pageTag()</code> is used in <code>select</code>, which can implement paging calculation;</p>
<p><code>-- @if(!isEmpty(projectCode) || !isBlank(projectCode))</code> is used for conditional judgment. Only when the result in the if statement is valid, the following SQL statement will take effect.</p>
<p>So far, the overall logic of the data table has been implemented.</p>
<h4 id="Histogram-display"><a href="#Histogram-display" class="headerlink" title="Histogram display"></a>Histogram display</h4><p>This requirement requires dynamic display of the number of employee contract expirations in each month in the next ten months, and if the number of employee expirations in the current month is 0, it must still be displayed.</p>
<p>The drawing of the histogram cannot be started directly from the backend, because we don’t know what parameters are needed now.</p>
<p>The required parameters depend on how the page is drawn, and the <code>Echarts</code> component needs to be used here. So here I create a new Vue component: <code>histogram.vue</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;echarts&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;echarts&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;width,height&#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> ...</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>:&#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">props</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">width</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;2400px&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">height</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;200px&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">options</span>:<span class="hljs-title class_">Object</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">watch</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">options</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">handler</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newVal,oldVal</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">redraw</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">computed</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">myOptions</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> || &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">myChart</span>:<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span>=<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span> = <span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        bus.$off(<span class="hljs-string">&#x27;toggleSideBar&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span> = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">echarts</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">setOption</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">resize</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            bus.$on(<span class="hljs-string">&#x27;toggleSideBar&#x27;</span>,<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">redraw</span>()</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">resize</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">showLoading</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">showLoading</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">hideLoading</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">hideLoading</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">redraw</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>) <span class="hljs-keyword">return</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">clear</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">setOption</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">resize</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.echarts</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p>This drawing component needs to accept some properties passed to it, its use is as follows:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-container header-search&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:flex;flex-wrap:wrap;&quot;</span>&gt;</span></span><br><span class="language-xml">           </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-row</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 20px;&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;echart-box&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">histogram</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;myOptions&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;typeByMonth&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">histogram</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span>            </span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Histogram</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;...&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">AppTable</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">AppFilterForm</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">Histogram</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">CustCascader</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">myOptions</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">title</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">text</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">tooltip</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">trigger</span>:<span class="hljs-string">&quot;axis&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">axisPointer</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;shadow&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">grid</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">left</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">right</span>:<span class="hljs-string">&quot;...&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">xAxis</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">data</span>:[],</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">axisPointer</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;shadow&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">yAxis</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">series</span>:[</span></span><br><span class="language-javascript"><span class="language-xml">                    &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;bar&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">itemStyle</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-attr">normal</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#5470c6&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">data</span>:[]</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                ],</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// plot chart</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">typeByMonth</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            lineProcessApi.<span class="hljs-title function_">plotChart</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">deptCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">deptCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">projectCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">processCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">processCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">lineCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">lineCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">type</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">type</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">beginDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">beginDate</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">endDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">endDate</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">name</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">employeeId</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">employeeId</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">page</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">page</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">limit</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">limit</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span>(res.<span class="hljs-property">code</span> == <span class="hljs-number">200</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chartList</span> = res.<span class="hljs-property">data</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>.<span class="hljs-property">xAxis</span>.<span class="hljs-property">data</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chartList</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">month</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>.<span class="hljs-property">series</span>[<span class="hljs-number">0</span>].<span class="hljs-property">data</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chartList</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">count</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">typeByMonth</span>.<span class="hljs-title function_">redraw</span>();</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.echart-box</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dcdfe6</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">4px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.12</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.04</span>);</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p>Here, it can be seen that the data of the histogram is passed through <code>:options</code>, that is, the <code>watch</code> attribute in the component, and the method of passing the data is executed by calling the <code>typeByMonth</code> method in <code>ref</code>.</p>
<p>This method is very similar to the previous data query method, but the difference is that the accepted data no longer needs to be displayed in each column, but as follows:</p>
<table>
<thead>
<tr>
<th>month</th>
<th>count</th>
</tr>
</thead>
<tbody><tr>
<td>2023-1</td>
<td>300</td>
</tr>
<tr>
<td>2023-2</td>
<td>350</td>
</tr>
<tr>
<td>2023-3</td>
<td>400</td>
</tr>
</tbody></table>
<p>The data in the <code>month</code> column will be used as the x-axis display, that is, which months are they:</p>
<p><code>this.myOptions.xAxis.data = this.chartList.map((item) =&gt; item.month);</code></p>
<p>The data in the <code>count</code> column will be displayed on the y-axis, that is, the number of employees per month:</p>
<p> <code>this.myOptions.series[0].data = this.chartList.map((item) =&gt; item.count);</code></p>
<p>Therefore, the number of parameters received by the front end is much less, and this part of the logic only needs to be slightly modified based on the logic of the backend query in the previous article. In fact, it is to make a little modification in the SQL code, no longer return the detailed information of <code>select</code>, but return the result of <code>count</code> function after <code>group by</code> months.</p>
<p>However, it is worth noting that the monthly data needs to be dynamically displayed here, so part of the logic needs to be completed in the backend; at the same time, the requirement also reminds that if the number of employees due in the current month is 0, it still needs to be displayed. This conflicts with the expression logic of SQL, because the 0 value may be ignored during group by (of course, it can also be ignored through SQL), but it may be better to write this part of the code in the backend:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;chartVO&gt; <span class="hljs-title function_">plotChart</span><span class="hljs-params">(chartDTO queryParam)</span>&#123;<br>        <span class="hljs-comment">// if deptCode is null, then give a default dept code by userId</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(queryParam.getDeptCode()))&#123;<br>            queryParam.setDeptCode(anotherService.setHighDeptCode());<br>        &#125;<br>        List&lt;chartVO&gt; chartData = mapper.plotChart(queryParam);<br>        List&lt;chartVO&gt; chartVO = nextNmonthData(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// Map, time complexity O(n)</span><br>        HashMap&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(chartData.size());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; chartData.size();i++)&#123;<br>            map.put(chartData.get(i).getMonth(),chartData.get(i).getCount());<br>        &#125;<br>        <span class="hljs-keyword">for</span>(chartVO vo : chartVO)&#123;<br>            <span class="hljs-keyword">if</span>(map.containsKey(vo.getMonth()))&#123;<br>                vo.setCount(map.get(vo.getMonth()));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> chartVO;        <br>    &#125;<br>    <br>    <span class="hljs-comment">/** return next N month data</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>    <br>    <span class="hljs-keyword">private</span> List&lt;chartVO&gt; <span class="hljs-title function_">nextNmonthData</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        AyyayList&lt;chartVO&gt; arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(n);<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-comment">// plus n month</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br>            <span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> today.plusMonth(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ym</span> <span class="hljs-operator">=</span> LocalDate.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-mm&quot;</span>));<br>            <span class="hljs-type">chartVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">chartVO</span>();<br>            vo.setMonth(ym);<br>            vo.setCount(<span class="hljs-string">&quot;0&quot;</span>);<br>            arr.add(vo);<br>         &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>Here I have written a new method to create a list that stores the next ten months and is all 0 — <code>chartVO</code>. The <code>chartVO</code> class has only two attributes, one is month and the other is count.</p>
<p>Then, HashMap is used here to traverse the query results of SQL. When there is data in the month corresponding to the SQL result, the data of the corresponding month in <code>chartVO</code> is changed from 0 to the corresponding data. The reason why HashMap is used is to optimize Time complexity, limited to <strong>O(N)</strong>.</p>
<p>So far, the display of the histogram is completed.</p>
<h3 id="Summarize-3"><a href="#Summarize-3" class="headerlink" title="Summarize"></a>Summarize</h3><p>The complete code is roughly like this:</p>
<p><strong>BaseController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(&quot;...&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/bi&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseController</span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BaseService baseService;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseController</span><span class="hljs-params">(BaseService baseService)</span>&#123;<br>        <span class="hljs-comment">// Constructor injection. If the code is bloated later, can add @AllArgsConstructora to remove 				this part</span><br>        <span class="hljs-built_in">this</span>.baseService = baseService;<br>    &#125;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/type&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;type information&quot;)</span><br>    <span class="hljs-keyword">public</span> WebResult&lt;List&lt;BaseEmployeeEntity&gt;&gt; <span class="hljs-title function_">findType</span><span class="hljs-params">()</span>&#123;<br>        &lt;List&lt;BaseEmployeeEntity&gt;&gt; list = baseService.findType();<br>        <span class="hljs-keyword">return</span> WebResult.ok(list);<br>    &#125;    <br>    <br>    <span class="hljs-meta">@PostMapping(&quot;/lineOrProcess&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;lineOrProcess information&quot;)</span><br>    <span class="hljs-keyword">public</span> WebResult&lt;List&lt;BaseEmployeeEntity&gt;&gt; <span class="hljs-title function_">findLineOrProcess</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> BaseEmployeeEntity queryParam)</span>&#123;<br>        &lt;List&lt;BaseEmployeeEntity&gt;&gt; list = baseService.findLineOrProcess(queryParam);<br>        <span class="hljs-keyword">return</span> WebResult.ok(list);<br>    &#125;     <br>    <br>    <span class="hljs-meta">@PostMapping(&quot;/findDetail&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;find all information to table&quot;)</span><br>    <span class="hljs-keyword">public</span> WebResult&lt;BaseVO&gt; <span class="hljs-title function_">findDetail</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> BaseDTO queryParam)</span>&#123;<br>        PageResult&lt;BaseVO&gt; vo = baseService.findDetail(queryParam);<br>        <span class="hljs-keyword">return</span> WebResult.ok(vo);<br>    &#125;  <br>    <br>    <span class="hljs-meta">@PostMapping(&quot;/plot&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;plot histogram&quot;)</span><br>    <span class="hljs-keyword">public</span> WebResult&lt;chartVO&gt; <span class="hljs-title function_">plotChart</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> chartDTO queryParam)</span>&#123;<br>        List&lt;chartVO&gt; vo = baseService.plotChart(queryParam);<br>        <span class="hljs-keyword">return</span> WebResult.ok(vo);<br>    &#125;  <br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>BaseService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BaseService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SysBaseService</span>&lt;BaseMapper,BaseEmployeeEntity&gt;&#123;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a list of type field, now (A,B,C,D)</span><br><span class="hljs-comment">	*/</span><br>    List&lt;BaseEmployeeEntity&gt; <span class="hljs-title function_">findType</span><span class="hljs-params">()</span>; <br>    <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>    <br>    List&lt;BaseEmployeeEntity&gt; <span class="hljs-title function_">findLineOrProcess</span><span class="hljs-params">(BaseEmployeeEntity queryParam)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>    <br>    PageResult&lt;BaseVO&gt; <span class="hljs-title function_">findDetail</span><span class="hljs-params">(BaseDTO queryParam)</span>;<br>    <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>    <br>    List&lt;chartVO&gt; <span class="hljs-title function_">plotChart</span><span class="hljs-params">(chartDTO queryParam)</span>;   <br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>BaseServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SysBaseServiceImpl</span>&lt;BaseMapper,BaseEmployeeEntity&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BaseService</span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AnotherService anotherService;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseServiceImpl</span><span class="hljs-params">(BaseServiceImpl baseServiceImpl)</span>&#123;<br>        <span class="hljs-comment">// Constructor injection. If the code is bloated later, can add @AllArgsConstructora to remove 				this part</span><br>        <span class="hljs-built_in">this</span>.anotherService = anotherService;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;BaseEmployeeEntity&gt; <span class="hljs-title function_">findLineOrProcess</span><span class="hljs-params">(BaseEmployeeEntity queryParam)</span>&#123;<br>        List&lt;BaseEmployeeEntity&gt; list;<br>        lists = mapper.findLineOrProcess(queryParams);<br>        <span class="hljs-keyword">return</span> lists;        <br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;BaseEmployeeEntity&gt; <span class="hljs-title function_">findType</span><span class="hljs-params">()</span>&#123;<br>        LambdaQuery&lt;BaseEmployeeEntity&gt; query = sqlManager.lambdaQuery(BaseEmployeeEntity.class);<br>        <span class="hljs-comment">// deduplication and check not empty</span><br>        List&lt;BaseEmployeeEntity&gt; select = query.andIsNotNull(BaseEmployeeEntity::getType)<br>            .groupBy(BaseEmployeeEntity::getType)<br>            .select(BaseEmployeeEntity::getType);<br>        <span class="hljs-keyword">return</span> select;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    publci PageResult&lt;BaseVO&gt; <span class="hljs-title function_">findDetail</span><span class="hljs-params">(BaseDTO queryParam)</span>&#123;<br>        <span class="hljs-comment">// if deptCode is null, then give a default dept code by userId</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(queryParam.getDeptCode()))&#123;<br>            queryParam.setDeptCode(anotherService.setHighDeptCode());<br>        &#125;<br>        Map&lt;String,Object&gt; pageParam = query.getPageParam();<br>        PageResult&lt;BaseVO&gt; vos = mapper.findDetail(queryParam.getPageRequest(),pageParam);<br>        <span class="hljs-keyword">return</span> vos;        <br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;chartVO&gt; <span class="hljs-title function_">plotChart</span><span class="hljs-params">(chartDTO queryParam)</span>&#123;<br>        <span class="hljs-comment">// if deptCode is null, then give a default dept code by userId</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(queryParam.getDeptCode()))&#123;<br>            queryParam.setDeptCode(anotherService.setHighDeptCode());<br>        &#125;<br>        List&lt;chartVO&gt; chartData = mapper.plotChart(queryParam);<br>        List&lt;chartVO&gt; chartVO = nextNmonthData(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// Map, time complexity O(n)</span><br>        HashMap&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(chartData.size());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; chartData.size();i++)&#123;<br>            map.put(chartData.get(i).getMonth(),chartData.get(i).getCount());<br>        &#125;<br>        <span class="hljs-keyword">for</span>(chartVO vo : chartVO)&#123;<br>            <span class="hljs-keyword">if</span>(map.containsKey(vo.getMonth()))&#123;<br>                vo.setCount(map.get(vo.getMonth()));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> chartVO;        <br>    &#125;<br>    <br>    <span class="hljs-comment">/** return next N month data</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>    <br>    <span class="hljs-keyword">private</span> List&lt;chartVO&gt; <span class="hljs-title function_">nextNmonthData</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        AyyayList&lt;chartVO&gt; arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(n);<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-comment">// plus n month</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br>            <span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> today.plusMonth(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ym</span> <span class="hljs-operator">=</span> LocalDate.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-mm&quot;</span>));<br>            <span class="hljs-type">chartVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">chartVO</span>();<br>            vo.setMonth(ym);<br>            vo.setCount(<span class="hljs-string">&quot;0&quot;</span>);<br>            arr.add(vo);<br>         &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><strong>BaseEmployeeEntity</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/** </span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>   <br><span class="hljs-meta">@Table(name = &quot;...&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TargetSQLManager(&quot;sqlManager&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEmployeeEntity</span>&#123;<br>    <br>    <span class="hljs-meta">@AssignId</span><br>    <span class="hljs-meta">@Column(&quot;ID&quot;)</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <br>    <span class="hljs-meta">@Column(&quot;employeeId&quot;)</span><br>    <span class="hljs-meta">@Excel(name=&quot;employeeId&quot;)</span><br>    <span class="hljs-keyword">private</span> String employeeId;<br>    <br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>BaseDTO</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/** </span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>   <br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(&quot;BaseDTO&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDTO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageParam</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> ...;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;deptCode&quot;)</span><br>    <span class="hljs-keyword">private</span> String deptCode;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;process&quot;)</span><br>    <span class="hljs-keyword">private</span> String processCode;<br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;line&quot;)</span><br>    <span class="hljs-keyword">private</span> String lineCode;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;type&quot;)</span><br>    <span class="hljs-keyword">private</span> String type;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;beginDate&quot;)</span><br>    <span class="hljs-keyword">private</span> String beginDate;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;endDate&quot;)</span><br>    <span class="hljs-keyword">private</span> String endDate;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;employeeId&quot;)</span><br>    <span class="hljs-keyword">private</span> String employeeId;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>BaseMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SqlResource(&quot;...&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BaseMapper</span> extends ...Mapper&lt;BaseEmployeeEntity&gt;&#123;<br>	<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>     <br>    List&lt;BaseEmployeeEntity&gt; <span class="hljs-title function_">findLineOrProcess</span><span class="hljs-params">(BaseEmployeeEntity queryParam)</span>;<br>	<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>      <br>    PageResult&lt;BaseVO&gt; <span class="hljs-title function_">findDetail</span><span class="hljs-params">(PageRequest&lt;BaseDTO&gt; query, <span class="hljs-meta">@Root</span> Map pageParam)</span>;<br>   <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">	 * ...</span><br><span class="hljs-comment">	*/</span>      <br>    List&lt;chartVO&gt; <span class="hljs-title function_">plotChart</span><span class="hljs-params">(chartDTO query)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>SQL -md file （Oracle)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">findDetail<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-comment">-- @pageTag()&#123;</span><br>name,employeeId,sex...<br><span class="hljs-comment">-- @&#125;</span><br><span class="hljs-keyword">FROM</span>(<br>nbe.name <span class="hljs-keyword">as</span> name,<br>nbe.employeeId <span class="hljs-keyword">as</span> employeeId,<br>...<br><span class="hljs-keyword">FROM</span><br>employee nbe <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>(<br><span class="hljs-keyword">SELECT</span> nbe.deptId,nbd.deptName<br>    <span class="hljs-keyword">FROM</span> department nbd <span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> nbd.deptId <span class="hljs-operator">=</span> #&#123;deptCode&#125; <br>    <span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">BY</span> nbd.up_deptId <span class="hljs-operator">=</span> PRIOR nbd.deptId<br>) nbd <span class="hljs-keyword">ON</span> nbd.deptId <span class="hljs-operator">=</span> nbe.deptId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> ...<br><span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-comment">-- @if(!isEmpty(projectCode) || !isBlank(projectCode))&#123;</span><br>	<span class="hljs-keyword">and</span> nbe.projectCode <span class="hljs-operator">=</span> #&#123;projectCode&#125;<br><span class="hljs-comment">-- @&#125;</span><br><span class="hljs-comment">-- @if(...)&#123;</span><br>	...<br><span class="hljs-comment">-- @&#125;</span><br>...<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>nbe.name,<br>nbe.employeeId,<br>...)<br><br>findLineOrProcess<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-keyword">SELECT</span> line_type,line_code,line_name<br><span class="hljs-keyword">from</span> A<br><span class="hljs-keyword">where</span> project_code <span class="hljs-operator">=</span> #&#123;projectCode&#125;<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> line_type,line_code,line_name<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;3&#x27;</span>,line_code,line_name<br><span class="hljs-keyword">from</span> B<br><span class="hljs-keyword">where</span> project_code <span class="hljs-operator">=</span> #&#123;projectCode&#125;<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> line_code,line_name<br></code></pre></td></tr></table></figure>

<p><strong>Employee.vue</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-container header-search&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:flex;flex-wrap:wrap;&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">cust-cascader</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.deptCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">class</span>= <span class="hljs-string">&quot;filter-item&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;Dept&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:props</span> = <span class="hljs-string">&quot;&#123;value:&#x27;deptId&#x27;,label:&#x27;name&#x27;&#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:show-all-levels</span>=<span class="hljs-string">&quot;false&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;orgTree.treeList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;cascader&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;project&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">filterable</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;selectLoading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.projectCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				@<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;prochange&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">			&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in projectArr&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.projectCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.projecName&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.projectCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                &gt;</span>                    </span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml">			</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;process&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">filterable</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;selectLoading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.processCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">			&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in processList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                &gt;</span>                    </span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;line&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">filterable</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;selectLoading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.lineCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">			&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in lineList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                &gt;</span>                    </span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;type&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">filterable</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;selectLoading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.type&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">			&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in typeArr&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                &gt;</span>                    </span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;daterange&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:range-separator</span>=<span class="hljs-string">&quot;to&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:start-placeholder</span>=<span class="hljs-string">&quot;startTime&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:end-placeholder</span>=<span class="hljs-string">&quot;endTime&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">value-format</span>=<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">				<span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.dateRange&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    			<span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span>    </span></span><br><span class="hljs-tag"><span class="language-xml">                @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;dateChange&quot;</span>          </span></span><br><span class="hljs-tag"><span class="language-xml">            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.name&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;name&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.employeeId&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;employeeId&quot;</span>  </span></span><br><span class="hljs-tag"><span class="language-xml">            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">app-filter-form</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                @<span class="hljs-attr">search</span>=<span class="hljs-string">&quot;handleSearch&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                @<span class="hljs-attr">reset</span>=<span class="hljs-string">&quot;resetForm&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-filter-form</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-row</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 20px;&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;echart-box&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">histogram</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;myOptions&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;typeByMonth&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">histogram</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span>            </span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 5px;&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">el-tabs</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;tabCurrent&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 6px;&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">app-table</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;table&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-table&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">v-loading</span>=<span class="hljs-string">&quot;dataTable.loading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">:boarder</span>=<span class="hljs-string">&quot;true&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;dataTable.dataList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">:columns</span>=<span class="hljs-string">&quot;tableFields&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">overflow</span>=<span class="hljs-string">&quot;auto&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-table</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">el-tabs</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">pagination</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;dataTable.total&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:page.sync</span>=<span class="hljs-string">&quot;queryParam.page&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">:limit.sync</span>=<span class="hljs-string">&quot;queryParam.limit&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    @<span class="hljs-attr">pagination</span>=<span class="hljs-string">&quot;handleList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pagination</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    </span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;mapActions,mapGetters&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> lineProcessApi <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;...&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">AppTable</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;...&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">AppFilterForm</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;...&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ApiList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;...&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Histogram</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;...&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">CustCascader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;...&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">AppTable</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">AppFilterForm</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">Histogram</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">CustCascader</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            lineProcessApi,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">tabCurrent</span>:<span class="hljs-string">&quot;1&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">projectId</span>:<span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">lineList</span>:[],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">processList</span>:[],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">chartList</span>:[],</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">queryParam</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">projectCode</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">lineCode</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">processCode</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">type</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">deptCode</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">beginDate</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">endDate</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">dateRange</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">employeeId</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">name</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">limit</span>:<span class="hljs-number">10</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">page</span>:<span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">selectLoading</span>:<span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">dataTable</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">loading</span>:<span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">dataList</span>:[],</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">total</span>:<span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">orgTree</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">treeList</span>:[],</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">selectId</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">defaultProps</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">children</span>:<span class="hljs-string">&quot;children&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">label</span>:<span class="hljs-string">&quot;label&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">myOptions</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">title</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">text</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">tooltip</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">trigger</span>:<span class="hljs-string">&quot;axis&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">axisPointer</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;shadow&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">grid</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">left</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">right</span>:<span class="hljs-string">&quot;...&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">xAxis</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">data</span>:[],</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">axisPointer</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;shadow&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">yAxis</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">series</span>:[</span></span><br><span class="language-javascript"><span class="language-xml">                    &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;bar&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">itemStyle</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-attr">normal</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#5470c6&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">data</span>:[]</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                ],</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">rules</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">deptCode</span>:[</span></span><br><span class="language-javascript"><span class="language-xml">                    &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">required</span>:<span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">trigger</span>:<span class="hljs-string">&quot;change&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">                ],</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">computed</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        ...<span class="hljs-title function_">mapGetters</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">projectArr</span>:<span class="hljs-string">&quot;getProjectArr&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">typeArr</span>:<span class="hljs-string">&quot;getType&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;),</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">tableFields</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span>[</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">label</span>:<span class="hljs-string">&quot;name&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">prop</span>:<span class="hljs-string">&quot;name&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">label</span>:<span class="hljs-string">&quot;employeeId&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">prop</span>:<span class="hljs-string">&quot;employeeId&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">label</span>:<span class="hljs-string">&quot;process&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">prop</span>:<span class="hljs-string">&quot;process&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">label</span>:<span class="hljs-string">&quot;project&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">prop</span>:<span class="hljs-string">&quot;project&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                ...</span></span><br><span class="language-javascript"><span class="language-xml">            ];</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// see lms.js document</span></span></span><br><span class="language-javascript"><span class="language-xml">        ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;updateProjectArr&#x27;</span>,<span class="hljs-string">&#x27;updateTypeArr&#x27;</span>]),</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateProjectArr</span>();</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateTypeArr</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// when project change, start to search line and process</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">prochange</span>(<span class="hljs-params">val</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toSectionSearch</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// when date change,give queryParam value</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">dateChange</span>(<span class="hljs-params">val</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">beginDate</span> = val[<span class="hljs-number">0</span>];</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">endDate</span> = val[<span class="hljs-number">1</span>];</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">toSectionSearch</span>(<span class="hljs-params">val</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// project can not be null</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span>(</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span> == <span class="hljs-string">&quot;&quot;</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span> == <span class="hljs-literal">undefined</span></span></span><br><span class="language-javascript"><span class="language-xml">            )&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;project can not be null&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">return</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// Some projects only have processes or lines, and some have both processes and lines</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span>(val != <span class="hljs-string">&quot;&quot;</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectLoading</span> = <span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span>=[];</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span>=[];</span></span><br><span class="language-javascript"><span class="language-xml">                lineProcessApi.<span class="hljs-title function_">lineOrProcess</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">projectCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-keyword">let</span> sectionData = res.<span class="hljs-property">data</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-comment">// lineType is 3 means line</span></span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span> = sectionData.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-keyword">if</span>(item.<span class="hljs-property">lineType</span> == <span class="hljs-string">&quot;3&quot;</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">value</span>:item.<span class="hljs-property">lineCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">label</span>:item.<span class="hljs-property">lineName</span></span></span><br><span class="language-javascript"><span class="language-xml">                            &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">value</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">label</span>:<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">                            &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-comment">// lineType is 3 means process</span></span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span> = sectionData.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-keyword">if</span>(item.<span class="hljs-property">lineType</span> == <span class="hljs-string">&quot;2&quot;</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">value</span>:item.<span class="hljs-property">lineCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">label</span>:item.<span class="hljs-property">lineName</span></span></span><br><span class="language-javascript"><span class="language-xml">                            &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">value</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">label</span>:<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">                            &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;                        </span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-comment">// remove all null</span></span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-keyword">return</span> item.<span class="hljs-property">value</span> != <span class="hljs-literal">null</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-keyword">return</span> item.<span class="hljs-property">value</span> != <span class="hljs-literal">null</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span>=[];</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span>=[];</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectLoading</span>=<span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// get data to table</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">async</span> <span class="hljs-title function_">handleList</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">loading</span>=<span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">await</span> lineProcessApi.<span class="hljs-title function_">findDetail</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">deptCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">deptCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">projectCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">processCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">processCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">lineCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">lineCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">type</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">type</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">beginDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">beginDate</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">endDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">endDate</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">name</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">employeeId</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">employeeId</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">page</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">page</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">limit</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">limit</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>,&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">dataList</span>:res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">total</span>:res.<span class="hljs-property">data</span>.<span class="hljs-property">totalRow</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">loading</span>=<span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">handleSearch</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">page</span> = <span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleList</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// reset button</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">resetForm</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>=&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">projectCode</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">lineCode</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">processCode</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">type</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">deptCode</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">beginDate</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">endDate</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">dateRange</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">employeeId</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">name</span>:<span class="hljs-literal">null</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">limit</span>:<span class="hljs-number">10</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">page</span>:<span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleSearch</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// get deptTree</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">handleOrgTreeList</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-title class_">ApiList</span>.<span class="hljs-title function_">getOrgListDialog</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">orderBy</span>:<span class="hljs-string">&quot;orderNum&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">const</span> data = res.<span class="hljs-property">data</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">orgTree</span>.<span class="hljs-property">treeList</span> = data;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// plot chart</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">typeByMonth</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            lineProcessApi.<span class="hljs-title function_">plotChart</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">deptCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">deptCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">projectCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">processCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">processCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">lineCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">lineCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">type</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">type</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">beginDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">beginDate</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">endDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">endDate</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">name</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">employeeId</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">employeeId</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">page</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">page</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">limit</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">limit</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span>(res.<span class="hljs-property">code</span> == <span class="hljs-number">200</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chartList</span> = res.<span class="hljs-property">data</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>.<span class="hljs-property">xAxis</span>.<span class="hljs-property">data</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chartList</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">month</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>.<span class="hljs-property">series</span>[<span class="hljs-number">0</span>].<span class="hljs-property">data</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chartList</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">count</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">typeByMonth</span>.<span class="hljs-title function_">redraw</span>();</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleSearch</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleOrgTreeList</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.$isNotEmpty(<span class="hljs-variable language_">this</span>.<span class="hljs-property">orgTree</span>.<span class="hljs-property">treeList</span>))&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">const</span> firstNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">orgTree</span>.<span class="hljs-property">treeList</span>[<span class="hljs-number">0</span>];</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.echart-box</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dcdfe6</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">4px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.12</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.04</span>);</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.header-search</span> <span class="hljs-selector-class">.el-select</span>,</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.header-search</span> <span class="hljs-selector-class">.el-input</span>,</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.header-search</span> <span class="hljs-selector-class">.el-cascader</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">width</span>: <span class="hljs-number">163px</span>;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p><strong>histogram.vue</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;echarts&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;echarts&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;width,height&#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> ...</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>:&#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">props</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">width</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;2400px&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">height</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;200px&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">options</span>:<span class="hljs-title class_">Object</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">watch</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">options</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">handler</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newVal,oldVal</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">redrae</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">computed</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">myOptions</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> || &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">myChart</span>:<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span>=<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span> = <span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        bus.$off(<span class="hljs-string">&#x27;toggleSideBar&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span> = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">echarts</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">setOption</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">resize</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            bus.$on(<span class="hljs-string">&#x27;toggleSideBar&#x27;</span>,<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">redraw</span>()</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">resize</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">showLoading</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">showLoading</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">hideLoading</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">hideLoading</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">redraw</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>) <span class="hljs-keyword">return</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">clear</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">setOption</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">resize</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.echarts</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p><strong>lms.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> projectApi <span class="hljs-keyword">from</span> ...<br><span class="hljs-keyword">import</span> lineProcessApi <span class="hljs-keyword">from</span> ...<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">state</span>:&#123;<br>        <span class="hljs-attr">projectArr</span>:[],<br>        <span class="hljs-attr">projectArrVisited</span>:<span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">typeArr</span>:[],<br>        <span class="hljs-attr">typeArrVisited</span>:<span class="hljs-literal">false</span><br>    &#125;,<br>    <span class="hljs-attr">getters</span>:&#123;<br>        <span class="hljs-attr">getProjectArr</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">projectArr</span>,<br>        <span class="hljs-attr">getTypeArr</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">typeArr</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>:&#123;<br>        <span class="hljs-title function_">setProjectArr</span>(<span class="hljs-params">state,project</span>)&#123;<br>            state.<span class="hljs-property">projectArr</span> = project<br>            state.<span class="hljs-property">projectArrVisited</span> = <span class="hljs-literal">true</span><br>        &#125;,<br>        <span class="hljs-title function_">setTypeArr</span>(<span class="hljs-params">state,type</span>)&#123;<br>            state.<span class="hljs-property">typeArr</span> = type<br>            state.<span class="hljs-property">typeArrVisited</span> = <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>:&#123;<br>        <span class="hljs-title function_">updateProjectArr</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">            commit,</span><br><span class="hljs-params">            state</span><br><span class="hljs-params">        &#125;,ignorant</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!state.<span class="hljs-property">projectArrVisited</span> || ignorant)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">let</span> queryParam = &#123;<br>                        <span class="hljs-attr">query</span>:&#123;<br>                            <span class="hljs-attr">projectCode</span>:<span class="hljs-literal">null</span>,<br>                            <span class="hljs-attr">projectName</span>:<span class="hljs-literal">null</span><br>                        &#125;,<br>                        <span class="hljs-attr">pageSize</span>:<span class="hljs-number">9999</span>,<br>                        <span class="hljs-attr">pageNum</span>:<span class="hljs-number">1</span>,<br>                        <span class="hljs-attr">pageQuery</span>:<span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">fuzzyQuery</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">// default fuzzy query</span><br>                        <span class="hljs-attr">orderby</span>:<span class="hljs-literal">null</span><br>                    &#125;<br>                    projectApi.<span class="hljs-title function_">list</span>(queryParam).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">if</span>(res.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>)&#123;<br>                            <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setProjectArr&#x27;</span>,res.<span class="hljs-property">data</span>)<br>                            <span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>)<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-title function_">reject</span>()<br>                        &#125;<br>                    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-title function_">reject</span>()<br>                    &#125;);<br>                &#125;)<br>            &#125;<br>        &#125;,<br>        <span class="hljs-title function_">updateTypeArr</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">            commit,</span><br><span class="hljs-params">            state</span><br><span class="hljs-params">        &#125;,ignorant</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!state.<span class="hljs-property">typeArrVisited</span> || ignorant)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>                    lineProcessApi.<span class="hljs-title function_">type</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">if</span>(res.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>)&#123;<br>                            <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setTypeArr&#x27;</span>,res.<span class="hljs-property">data</span>)<br>                            <span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>)<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-title function_">reject</span>()<br>                        &#125;<br>                    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-title function_">reject</span>()<br>                    &#125;);<br>                &#125;)<br>            &#125;<br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>lineProcess.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">BaseAPI</span> <span class="hljs-keyword">from</span> ...<br><br><span class="hljs-comment">// use to run controller class as default</span><br><span class="hljs-keyword">const</span> api = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseAPI</span>(<span class="hljs-string">&#x27;/bi&#x27;</span>)<br><br>api.<span class="hljs-property">lineOrProcess</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">query</span>)&#123;<br>    <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">httpRequest</span>(&#123;<br>        <span class="hljs-comment">// baseUrl is the default url &quot;/&quot; when the url is empty </span><br>        <span class="hljs-attr">url</span>:api.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&#x27;/lineOrProcess&#x27;</span>,<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:query || &#123;&#125;<br>    &#125;)<br>&#125;;<br><br>api.<span class="hljs-property">type</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">query</span>)&#123;<br>    <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">httpRequest</span>(&#123;<br>        <span class="hljs-attr">url</span>:api.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&#x27;/type&#x27;</span>,<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:query || &#123;&#125;<br>    &#125;)<br>&#125;;<br><br>api.<span class="hljs-property">findDetail</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">query</span>)&#123;<br>    <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">httpRequest</span>(&#123;<br>        <span class="hljs-attr">url</span>:api.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&#x27;/findDetail&#x27;</span>,<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:query || &#123;&#125;<br>    &#125;)<br>&#125;;<br><br>api.<span class="hljs-property">plot</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">query</span>)&#123;<br>    <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">httpRequest</span>(&#123;<br>        <span class="hljs-attr">url</span>:api.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&#x27;/plot&#x27;</span>,<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:query || &#123;&#125;<br>    &#125;)<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> api<br><br></code></pre></td></tr></table></figure>

<p>In general, the requirements this time are much more difficult than before, but the overall logic is not difficult. To complete the report requirements, only need to think clearly:</p>
<blockquote>
<p>What data does the front end need, and what data does the back end need to pass in from the front end?</p>
</blockquote>
<p>In addition, I also learned some ideas about functional design:</p>
<ol>
<li><strong>Cascade selector design</strong></li>
<li><strong>Drop-down box design and back-end interaction</strong></li>
<li><strong>The drop-down box with prerequisite requirements interacts with the backend</strong></li>
<li><strong>Table data display and back-end interaction</strong></li>
<li><strong>Histogram design</strong></li>
</ol>
<hr>
<h2 id="5-Oracle-table-triggers"><a href="#5-Oracle-table-triggers" class="headerlink" title="5. Oracle table triggers"></a>5. Oracle table triggers</h2><hr>
<h3 id="Requirement-Description-4"><a href="#Requirement-Description-4" class="headerlink" title="Requirement Description"></a>Requirement Description</h3><p>Today there is a new project requirement, which is related to database tables and relatively simple.</p>
<p>There is a table A now, which only records today’s data, and its data changes every five minutes. It deletes all previous data and inserts the updated data. Although table A deletes all previous data, the updated data is not modified for data from five minutes ago; it only performs an insertion operation.</p>
<p><strong>TIPS: As for why we cannot directly perform an insertion operation here, the big data department on the other side has reported that this cannot be done, and the specific reasons are unknown.</strong></p>
<p>In summary, based on the current requirements, a trigger is needed to insert the same data into table B when table A inserts data. However, the data in table B will not be deleted, and it will not only retain data for today. In addition, for the incremental table B, to avoid performance issues, it needs to be checked when table A inserts data. If the newly inserted data already exists in table B, it should not be inserted again.</p>
<h3 id="Idea-and-Implementation-3"><a href="#Idea-and-Implementation-3" class="headerlink" title="Idea and Implementation"></a>Idea and Implementation</h3><p>Here it is worth mentioning the <code>MERGE INTO</code> trigger function.</p>
<p>In Oracle SQL, the <code>MERGE INTO</code> statement is used to specify the target table for merging data; <code>USING</code> specifies the source table from which to get data; ‘<code>ON</code>‘ specifies the condition for matching rows in the source and target tables. If the condition is true, it performs an <code>UPDATE</code> operation when there is a match; otherwise, it performs an <code>INSERT</code> operation when there is no match. ‘<code>WHEN NOT MATCHED THEN</code>‘ specifies the block of operations to execute when there is no match between the source and target tables.</p>
<p>Clearly, here, using ‘<code>MERGE INTO</code>‘ can meet the requirements.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> insert_trigger<br>AFTER <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> A<br><span class="hljs-keyword">REFERENCING</span> <span class="hljs-keyword">OLD</span> <span class="hljs-keyword">AS</span> &quot;OLD&quot; <br><span class="hljs-keyword">NEW</span> <span class="hljs-keyword">AS</span> &quot;NEW&quot;<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><br><span class="hljs-keyword">BEGIN</span><br>	<span class="hljs-keyword">MERGE</span> <span class="hljs-keyword">INTO</span> B<br>	<span class="hljs-keyword">USING</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> DUAL) <span class="hljs-keyword">ON</span> (B.employeeId <span class="hljs-operator">=</span> :NEW.employeeId <span class="hljs-keyword">and</span> B.date <span class="hljs-operator">=</span> <span class="hljs-keyword">NEW</span>:<span class="hljs-type">date</span>)<br>	<span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">NOT</span> MATCHED <span class="hljs-keyword">THEN</span><br>	<span class="hljs-keyword">INSERT</span> (ID,employeeId,<span class="hljs-type">date</span>,...)<br>	<span class="hljs-keyword">VALUES</span> (:NEW.ID,:NEW.employeeId,:NEW.date,...);<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>

<p>In the code above, we created a trigger called <code>insert_trigger</code>. It is an ‘<code>AFTER INSERT</code>‘ trigger, which means it executes after data is inserted into table A</p>
<ol>
<li>When new data is inserted into table A, the trigger is activated.</li>
<li>The trigger defines named references using ‘<code>REFERENCING</code>,’ using ‘<code>OLD</code>‘ to represent the previous rows (before the insertion) and ‘<code>NEW</code>‘ to represent the newly inserted rows.</li>
<li>The trigger defines ‘<code>FOR EACH ROW</code>,’ indicating that it will execute once for each inserted row.</li>
<li>Between ‘<code>BEGIN</code>‘ and ‘<code>END</code>‘ is the main logic of the trigger. Here, the trigger uses a ‘<code>MERGE</code>‘ statement to handle data in table B.</li>
<li>The ‘<code>MERGE INTO</code>‘ statement allows data from a data source (in this case, ‘<code>SELECT 1 FROM DUAL</code>‘) to be merged into the target table B. In this example, it uses table B as the target.</li>
<li>The ‘<code>USING</code>‘ clause specifies the data source, using a simple ‘<code>SELECT 1 FROM DUAL</code>.’ This clause is typically used to specify a virtual table or query to provide the data to be inserted.</li>
<li>The ‘<code>ON</code>‘ clause defines the conditions for the merge operation. It uses a condition that matches the ‘<code>employeeId</code>‘ column in table B with the ‘<code>employeeId</code>‘ column in the newly inserted row in table A and also matches the ‘<code>date</code>‘ column with ‘<code>NEW:date</code>.’</li>
<li>‘<code>WHEN NOT MATCHED THEN</code>‘ defines the operation to be executed when the condition doesn’t match during the merge operation. Here, it performs an insertion operation, inserting the data from the new row into table B. (<strong>Only when the ‘<code>employeeId</code>‘ column in table B does not match the ‘<code>employeeId</code>‘ column in the newly inserted row in table A and the ‘<code>date</code>‘ column does not match ‘<code>NEW:date</code>‘</strong>)</li>
<li>The ‘<code>INSERT</code>‘ clause specifies the columns to be inserted and their corresponding values. These values come from the newly inserted row in table A (:NEW.ID, :NEW.employeeId, :NEW.date, etc.).</li>
</ol>
<p>In summary, the trigger’s purpose is to check for matching rows in table B when new data is inserted into table A and insert the new data into table B if the conditions do not match.</p>
<p>With this, our trigger implementation is complete.</p>
<h3 id="Summarize-4"><a href="#Summarize-4" class="headerlink" title="Summarize"></a>Summarize</h3><blockquote>
<p>This requirement is relatively straightforward, and the main takeaway is learning about a new trigger function, <code>MERGE INTO</code>.</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Project Records</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SQL</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo switch language, suitable for any theme</title>
    <url>/en/2023/05/20/Hexo%20switch%20language,%20suitable%20for%20any%20theme/</url>
    <content><![CDATA[<p>This article mainly discusses how Hexo achieves internationalization in the simplest way, and this method is highly applicable. I personally think that there is no requirement for which theme to use.</p>
<h1 id="Ideal-Solution"><a href="#Ideal-Solution" class="headerlink" title="Ideal Solution"></a>Ideal Solution</h1><p>There is a button on the home page, by clicking this button, you can switch the language page with one click (the example of this blog will be Chinese and English). At the same time, the realization of this method does not need to buy a new domain name.</p>
<p>It is worth noting that this method is not a direct translation, so you need to maintain N blog files of the post at the same time (N is the number of your languages), so if you need to update the blog, you need to update N files at the same time.</p>
<p>The following implementation process will use Chinese and English as examples. For more languages, please refer to this tutorial:</p>
<h2 id="Implementation-Process"><a href="#Implementation-Process" class="headerlink" title="Implementation Process"></a>Implementation Process</h2><p>（1）Divide the page folder, assuming that your original files are stored in a folder called hexo, which mainly stores Chinese files. Now create a new folder called hexo-en to store the English folder. Note: they are siblings!</p>
<p>The built folder should be as follows:</p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(1).png" alt="文件夹位置展示"></p>
<p>(2) Copy all files except node_modules from hexo to hexoen, separate the site</p>
<p>(3) Next, modify the contents of the <strong>_config.yml</strong> files of the two hexo files. The first one in the figure below is hexo, and the second one is hexo-en: (this step is to modify the main language of website)</p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(2).png" alt="hexo"></p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(3).png" alt="hexo-en"></p>
<p>(4) Continue to modify the root directory url and root of <strong>_config.yml</strong>, the first one in the figure below is hexo, and the second one is hexo-en:</p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(4).png" alt="hexo"></p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(5).png" alt="hexo-en"></p>
<p>(5) Modify the jump link of your own menu corresponding to the theme. Note that there is a hint here—**You can jump to the link of your own github.io&#x2F;en, and you can also jump to the link of your own domain name&#x2F;en . I don’t know why the jump to github.io failed here, and 404 was displayed, but the jump to the domain name thellu.com&#x2F;en succeeded. **You can choose the jump address according to your actual situation.</p>
<p>In addition, note that if you have a Chinese homepage, the menu should be set to English; if you are an English homepage, the menu should be set to Chinese.</p>
<p>The first picture below is hexo, and the second one is hexo-en:</p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(6).png" alt="hexo"></p>
<p><img src="/en/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(7).png" alt="hexo-en"></p>
<p>(6) Congratulations, the basic configuration is now complete! Now execute <strong>npm install</strong> in the hexoen folder to install the required plugins.</p>
<p>(7) Finally, modify the command that you submit files to github every time, you need to use cp to merge and submit files every time. I am using an absolute path here, so it is convenient to modify the address when cd path:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /d/Blog/hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd /d/Blog/hexoen &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd /d/Blog/hexo &amp;&amp; cp -r /d/Blog/hexoen/public/. /d/Blog/hexo/public/en/ &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>

<p>(8) Congratulations, the configuration is now complete! You can check to see if your website has successfully redirected the page. The only downside is that clicking will jump to a new page instead of updating the old one.</p>
<h2 id="Common-Error"><a href="#Common-Error" class="headerlink" title="Common Error"></a>Common Error</h2><p>When uploading with the above code after writing the md file normally, sometimes an error will be reported inexplicably:</p>
<blockquote>
<p>err : Error: Spawn Failed</p>
</blockquote>
<p>The problem usually occurs in the .deploy_git folder, which is a Git repository generated by the hexo framework rendering. The <em><code>hexo d</code></em> command is to push it to github. Most of the problems are caused by git changing the contents of some .deploy_git files when pushing or hexo d, resulting in an error.</p>
<p>All in all, just delete this file.</p>
<p>Then call the following command:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs hexo">git config --global core.autocrlf false<br></code></pre></td></tr></table></figure>

<p>Then execute the clean g d command of hexo.</p>
<p>But note that there are two other reasons for this error:</p>
<ul>
<li>Our submission to github code uses absolute path. If you open git bash in hexoen, the .deploy_git file may be saved in the hexoen folder. Remember to delete it at this time.</li>
<li>Network fluctuations, delete .deploy_git and wait for a while for it to be fine</li>
</ul>
]]></content>
      <categories>
        <category>front-end</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Data Backup</title>
    <url>/en/2023/09/09/MySQL%20Data%20Backup/</url>
    <content><![CDATA[<p>“This blog post is intended to document the new knowledge I’ve acquired during the learning process, specifically about how to perform data backup in MySQL. If needed in the future, it can serve as a reference.”</p>
<p>Take a look at the code directly.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">Q1:<span class="hljs-keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;<br>Q2:<span class="hljs-keyword">START</span> TRANSACTION  <span class="hljs-keyword">WITH</span> CONSISTENT SNAPSHOT；<br><span class="hljs-comment">/* other tables */</span><br>Q3:<span class="hljs-keyword">SAVEPOINT</span> sp;<br><span class="hljs-comment">/* Time 1 */</span><br>Q4:<span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `t1`;<br><span class="hljs-comment">/* Time 2 */</span><br>Q5:<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `t1`;<br><span class="hljs-comment">/* Time 3 */</span><br>Q6:<span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">TO</span> <span class="hljs-keyword">SAVEPOINT</span> sp;<br><span class="hljs-comment">/* Time 4 */</span><br><span class="hljs-comment">/* other tables */</span><br></code></pre></td></tr></table></figure>

<p>At the beginning of the backup process, to ensure the Repeatable Read (RR) isolation level, set the RR isolation level once more (Q1).</p>
<p>Start a transaction, using ‘<code>WITH CONSISTENT SNAPSHOT</code>‘ to ensure that a consistent view is obtained as soon as this statement is executed (Q2).</p>
<p>Set a savepoint (Q3).</p>
<p>Use ‘<code>SHOW CREATE</code>‘ to retrieve the table structure (Q4), and then proceed to export the data (Q5). After that, roll back to the savepoint ‘sp,’ where its purpose is to release the MDL lock on ‘t1’ (Q6).</p>
<p>Please note, if at this point, a DDL statement is received, assuming it is for a small table and if it starts executing shortly after arrival and can complete quickly, what would be the scenario?</p>
<ul>
<li>If it arrives before the execution of the Q4 statement, i.e., at <strong>time 1</strong>, the scenario is: No impact; the backup will capture the table structure after the DDL statement.</li>
<li>If it arrives at “<strong>time 2</strong>,” the table structure has been altered. When Q5 is executed, it will result in an error: “Table definition has changed, please retry transaction.” Scenario: mysqldump terminates.</li>
<li>If it arrives between <strong>“time 2</strong>“ and “<strong>time 3</strong>,” mysqldump holds the MDL read lock on t1, and the binlog is blocked. Scenario: There is master-slave replication delay until Q6 is completed.</li>
<li>Starting from “<strong>time 4</strong>,” mysqldump releases the MDL read lock. Scenario: No impact; the backup captures the table structure before the DDL statement.</li>
</ul>
<p>This blog post references content from ‘MySQL in Action: 45 Lectures’ ^(1)^.</p>
<hr>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>(1) <a href="https://time.geekbang.org/column/article/70215">https://time.geekbang.org/column/article/70215</a></p>
<hr>
]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA quickly adds JavaDoc comments</title>
    <url>/en/2023/08/20/IDEA%20quickly%20adds%20JavaDoc%20comments/</url>
    <content><![CDATA[<p>As a programmer, adding Javadoc comments can be considered an essential step. However, manually adding extensive content each time can undoubtedly become a cumbersome task.</p>
<p>This article serves as a record, aiming to facilitate the process of reconfiguration when changing environments in the future:</p>
<p>(The method described here is auto-generated by IntelliJ IDEA and does not require installing additional plugins.)</p>
<h2 id="Class、Interface-Comments"><a href="#Class、Interface-Comments" class="headerlink" title="Class、Interface Comments"></a>Class、Interface Comments</h2><ol>
<li>File–&gt;settings–&gt;Editor–&gt;File and Code Templates–&gt;Files–&gt;Class</li>
<li>Add documentation comment templates to the template:</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  *<span class="hljs-doctag">@ClassName</span> $&#123;NAME&#125;</span><br><span class="hljs-comment">  *<span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment">  *<span class="hljs-doctag">@Author</span> $&#123;USER&#125;</span><br><span class="hljs-comment">  *<span class="hljs-doctag">@DATE</span> $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="hljs-comment">  *<span class="hljs-doctag">@Version</span> 1.0 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">$</span>&#123;Name&#125;&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<p>Once completed, every time a class or interface is created, the comments will be automatically generated.</p>
<h2 id="Method-Comments"><a href="#Method-Comments" class="headerlink" title="Method Comments"></a>Method Comments</h2><ol>
<li>File–&gt;Settings–&gt;Editor–&gt;Live Templates</li>
<li>Click on the right-hand side <code>+</code> icon, select &#96;Template Group…, and create a new custom template group. You can name it with your desired name.</li>
<li>Select the created template group, click on the right-hand side <code>+</code> icon, choose <code>Live Template</code>, and set the value of <code>abbreviation</code> to <code>*</code>.</li>
<li>Set the template content: Choose <code>Template Text</code> and enter the following code below:</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">*<br> * <span class="hljs-meta">@Author</span> $user$<br> * <span class="hljs-meta">@Description</span> <span class="hljs-comment">//TODO</span><br> * <span class="hljs-meta">@Date</span> $time$ $date$<br> * <span class="hljs-meta">@Param</span> $param$<br> * <span class="hljs-meta">@return</span> $<span class="hljs-keyword">return</span>$<br> **/<br></code></pre></td></tr></table></figure>

<ol start="5">
<li>Configure where this template should be effective: Select <code>Define</code>“ below, then choose <code>Everywhere</code> and <code>Java</code> to ensure it only takes effect in Java files.</li>
<li>Select the <code>Edit variables</code> button on the right-hand side and configure as follows:</li>
</ol>
<p><img src="/en/images/IDEA%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0JavaDoc%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/%E6%B3%A8%E9%87%8A%EF%BC%881%EF%BC%89.png" alt="注释图片"></p>
<ol start="7">
<li>Use <code>/* </code>+ the template name we just set (in this case, it’s the asterisk <code>*</code>) + <code>tab</code> (this is the default template expansion shortcut, as set in <code>By default expand with</code> above). So now, when you use <code>/**</code> + <code>tab</code>, it will auto-complete, and the effect will be as follows:</li>
</ol>
<p><img src="/en/images/IDEA%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0JavaDoc%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/%E6%B3%A8%E9%87%8A%EF%BC%882%EF%BC%89.png" alt="注释图片2"></p>
<p>With this, the configuration is complete.</p>
<hr>
]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Method Static Dispatch</title>
    <url>/en/2023/08/11/Method%20Static%20Dispatch/</url>
    <content><![CDATA[<p>This example is referencing the book “Understanding the Java Virtual Machine”.</p>
<p>Firstly, contemplate the expected output of the following code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticDisptach</span>&#123;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Human</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Woman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Human</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Human people)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,people&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Man man)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,man&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Woman woman)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,woman&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Human</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>();<br>        <span class="hljs-type">Human</span> <span class="hljs-variable">woman</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">woman</span>();<br>        <span class="hljs-type">StaticDisptach</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticDisptach</span>();<br>        sr.sayHello(man);<br>        sr.sayHello(woman);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<p>The execution result is:</p>
<blockquote>
<p>hello,people</p>
<p>hello,people</p>
</blockquote>
<p>Understanding the reason the virtual machine executes the overloaded version with the parameter type “Human” involves an understanding of method overloading.</p>
<p>Let’s start by defining two key concepts for the following code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Human</span> <span class="hljs-variable">man</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>(); <br></code></pre></td></tr></table></figure>

<p>The <code>Human</code> in the above code is called the “<strong>static type</strong>“ of the variable, or “<strong>appearance type</strong>“, and the following <code>Man</code> is called the “<strong>actual type</strong>“ or “<strong>runtime type</strong>“.</p>
<p>Static and actual types can both change within a program, but the distinction lies in how they change. Changes in static type only occur when used, and the variable’s static type itself remains unchanged. Additionally, the static type is known at compile time. Changes in actual type only become apparent at runtime, and the compiler isn’t aware of an object’s actual type during the compilation phase.</p>
<p>So, what does this sentence mean?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Human</span> <span class="hljs-variable">human</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>()).nextBoolean()?<span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>():<span class="hljs-keyword">new</span> <span class="hljs-title class_">Woman</span>;<br><br>sr.sayHello((Man) human);<br>sr.sayHello((Woman) human);<br></code></pre></td></tr></table></figure>

<p>The actual type of the object <code>human</code> is variable, you cannot know whether it is <code>Man</code> or <code>Woman</code> at compile time, you need to wait until run time to know. However, the static type <code>Human</code> of <code>human</code> can be temporarily changed through mandatory type conversion during use, but this change can be known at the compile time—call the <code>sayhello</code> method twice, and the compile time can know whether it is <code>Man</code> or <code> Woman</code>.</p>
<p>Therefore, for the previous overload, for the <code>sayHello</code> method, under the premise that the method receiver has been determined to be the object “sr”, which overloaded version to use depends entirely on the number and data type of the incoming parameters. <strong>Compilation is judged by the static type of the parameter instead of the actual type when overloading</strong>. Since the static type is known at compile time, Javac compile time determines which overloaded version will be used according to the static type of the parameter during compilation, so <code>sayHello(Human)</code> is selected as the call target, and the symbol of this method is The references are written to the parameters of the two <code>invokevirtual</code> instructions in the <code>main()</code> method.</p>
<p>Furthermore, during the Java compiler’s compilation phase, although it can determine the overloaded version of a method, this version isn’t always unique. More often, the compiler can only determine the most appropriate version. This leads to the concept of overload method resolution priority: (such cases arise primarily due to inherent ambiguity in the semantics of literals.)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(Object arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;object&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;int&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(<span class="hljs-type">long</span> arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;long&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(Character arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Character&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(<span class="hljs-type">char</span> arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;char&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(<span class="hljs-type">char</span>... arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;char...&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(Serializable arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Serializable&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>		sayHi(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>After the above code runs, it will generate “<code>char</code>“</p>
<p>This is easy to understand, because <code>&#39;a&#39;</code> is a char type data. But if the <code>sayHi(char arg)</code> method is commented out, the output becomes:</p>
<blockquote>
<p>int</p>
</blockquote>
<p>This is because an automatic type conversion occurs, <code>&#39;a&#39;</code> not only represents a character, but also the number 97 (Unicode). Now comment out <code>sayHi(int arg)</code>, the result becomes:</p>
<blockquote>
<p>long</p>
</blockquote>
<p>This is because two automatic type conversions have occurred, <code>&#39;a&#39;</code> is converted from a character to an integer 97, and then converted to a long integer 97L. The automatic type conversion may still continue, that is</p>
<blockquote>
<p>char -&gt; int -&gt; long -&gt; float -&gt; double </p>
</blockquote>
<p>Please note that there is no casting involving <code>short</code> and <code>byte</code>, as their casting is considered unsafe.</p>
<p>If you proceed by commenting out the <code>sayHi(long arg)</code> method, the result will become:</p>
<blockquote>
<p>Character</p>
</blockquote>
<p>This is due to autoboxing taking place. If you continue by commenting out the <code>sayHi(Character arg)</code> method, the output will change to:</p>
<blockquote>
<p>Serializable</p>
</blockquote>
<p>The reason why the result appears as “Serializable” is because <code>java.lang.Serializable</code> is an interface implemented by the <code>java.lang.Character</code> class. When autoboxing cannot find a boxing class but can identify an interface implemented by the boxing class, it performs another round of autoboxing.</p>
<p>A <code>char</code> can be cast to an <code>int</code>, but a <code>Character</code> will not be cast to an <code>Integer</code>. It can safely be cast only to an interface or superclass it implements or extends.</p>
<p>Here’s a subtle detail: <code>Character</code> also implements another interface, <code>Comparable&lt;Character&gt;</code>. If there are two methods, one with a parameter of type <code>Serializable</code> and the other with a parameter of type <code>Comparable&lt;Character&gt;</code>, their priorities will be equal. The compiler will show a type ambiguity error and refuse to compile. In such a case, explicit invocation is required.</p>
<p>If you continue by commenting out the <code>sayHi(Serializable arg)</code> method, the result will become:	</p>
<blockquote>
<p>Object</p>
</blockquote>
<p>Clearly, this is the result of a <code>char</code> being boxed and then cast to its superclass. If there are multiple superclasses, the search is performed from bottom to top, with <code>Object</code> having the lowest priority.</p>
<p>Finally, if you comment out the <code>sayHi(Object arg)</code> method, there will be one last output result:</p>
<blockquote>
<p>char…</p>
</blockquote>
<p>As can be observed, variable-length arguments have the lowest priority. In this case, the character <code>&#39;a&#39;</code> is treated as an element of a <code>char[]</code> array.</p>
<p>The above example is somewhat extreme and is rarely encountered in practical work outside of using it to challenge job applicants in interviews. Nevertheless, gaining an understanding of such concepts can be helpful for a deeper comprehension of Java.</p>
<p>If you have any more questions or need further clarification, feel free to ask!</p>
<hr>
]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle SQL optimization</title>
    <url>/en/2023/07/24/Oracle%20SQL%20optimization/</url>
    <content><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Recently, I encountered a problem when writing a SQL, and the execution time of SQL was too long:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">as</span> type,<br><span class="hljs-built_in">count</span>(adl.is_attend) <span class="hljs-keyword">as</span> count,<br>round(<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> adl.is_attend <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>)<span class="hljs-operator">/</span> <span class="hljs-built_in">count</span>(adl.is_attend),<span class="hljs-number">2</span>) <span class="hljs-operator">*</span> <span class="hljs-number">100</span> <span class="hljs-keyword">as</span> rate<br><span class="hljs-keyword">from</span><br>attendance adl<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> deptId <span class="hljs-keyword">from</span> department <span class="hljs-keyword">start</span> <span class="hljs-keyword">with</span> deptId <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;...&#x27;</span><br>            <span class="hljs-keyword">connect</span> <span class="hljs-keyword">by</span> up_daptId <span class="hljs-operator">=</span> prior deptId) <span class="hljs-keyword">as</span> nbd <span class="hljs-keyword">on</span> adl.deptId <span class="hljs-operator">=</span> nbd.deptId<br><span class="hljs-keyword">where</span> <br>to_date(adl.date,<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&gt;=</span> to_date( #&#123;begin_date&#125;<br>    ,<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br><span class="hljs-keyword">and</span> to_date(adl.date,<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&lt;=</span> to_date( #&#123;end_date&#125;<br>    ,<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br>    <br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><br>......<br></code></pre></td></tr></table></figure>

<p>The above code is a SQL code used in combination with <code>Union</code>. The other parts of the code are very similar to this part of the code, except that the department id in the <code>inner join</code> statement and <code>type</code> in the <code>select</code> statement. The total running time of the code reaches about 110s, and the running time of a single SQL code is about 18s, which can be said runtime is too long.</p>
<p>In addition, <code>#&#123;begin_date&#125;</code> and <code>#&#123;end_date&#125;</code> are the parameters that will be passed in by the backend respectively, and are used for dynamic query.</p>
<h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><p>First analyze the most immediate question - why is the running time so long?</p>
<p>In fact, the problem here is not very complicated. There are more than 13 million pieces of data in the <code>attendance</code> table. The huge amount of data takes about 20 seconds for even the most basic and simple query.</p>
<p>In addition, the department table that needs to be associated is a recursive <code>join</code>, which will query all the small departments under the given <code>deptId</code>, and the query here is also time-consuming.</p>
<p>So, how to solve the problem?</p>
<p><strong>Solution 1</strong>: First of all, the problem of data volume is unsolvable. It is impossible for us to say that a certain piece of data is directly discarded. Moreover, our <code>where</code> condition has already limited the time, so there is actually a certain limit on the data volume. Therefore, the first idea of optimization is on <code>Join</code>:</p>
<blockquote>
<p>Recursive <code>Join</code> is a very time-consuming operation, so we can directly think of building an index on <code>deptId</code>-in fact, this is the correct idea, and the running time of indexing is directly optimized from 18S to 2S.</p>
</blockquote>
<p>Solution 2: Here can also optimize the query condition of <code>where</code>:</p>
<blockquote>
<p>The <code>to_date</code> function is used when the date is limited. In fact, when only comparing the year, month, and day, we can directly not use this function for string comparison. This is because Oracle SQL’s <a href="https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Data-Type-Comparison-Rules.html#GUID-6A02902A-1EF1-41E4-9494-381488BD272F">Data Priority</a> will implicitly convert low-priority strings to date formats. Here, through implicit conversion, the running time can be continuously optimized, from 2S to 1S.</p>
</blockquote>
<p><strong>But note, this is risky - first, implicit data type conversion may have a negative impact on performance (of course here is a positive); also, implicit conversion may produce strange results. Depending on the value of the <code>NLS_DATE_FORMAT</code> parameter.</strong> </p>
<p>When converting a datetime value to text via an implicit conversion or an explicit conversion that does not specify a format model, the format model is defined by one of the globalization session parameters, namely <code>NLS_DATE_FORMAT</code>, <code>NLS_TIMESTAMP_FORMAT</code>, or <code>NLS_TIMESTAMP_TZ_FORMAT</code>.</p>
<p>For example, the default value of the <code>NLS_DATE_FORMAT</code> setting is <code>&#39;DD-MON-RR&#39;</code> two-digit year, so the century time may be lost when the date is converted to a string, and replaced by 1900 or 2000 when converted back to a date based on the decade value; and assuming that the original time has some minutes and seconds, this data will also be lost.</p>
<p>In conclusion, different parameters may have different results.</p>
<p>So, considering that the optimization of Solution 2 is not necessary, I still keep the date function.</p>
<hr>
]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>How to debug spring boot scheduling tasks</title>
    <url>/en/2023/06/27/How%20to%20debug%20springboot%20scheduled%20scheduling%20tasks/</url>
    <content><![CDATA[<p>When I was doing enterprise development recently, there was a requirement for me to adjust and optimize the scheduled  tasks for sending emails.</p>
<h2 id="Scheduled-tasks"><a href="#Scheduled-tasks" class="headerlink" title="@Scheduled  tasks"></a>@Scheduled  tasks</h2><p>The scheduled task of sending emails that has been completed looks like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailScheduled</span>&#123;<br>    <br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0 23 * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">emailSend</span><span class="hljs-params">()</span>&#123;<br>        ...       <br>        <br>    &#125;        <br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>The difficulty of optimization and adjustment lies in the trouble of debugging:</p>
<ul>
<li>The code of the current development environment does not set a unified interface to debug back-end timing tasks through the front-end</li>
<li>If you debug by modifying cron, you need to restart the project, and more importantly, you will send a lot of harassing emails</li>
<li>Another idea is to call the method in the test code, but it is also very tricky</li>
</ul>
<p>In fact, there is a relatively simple idea, rewriting the <em><code>afterPropertiesSet</code></em> method of the <em><code>InitialzingBean</code></em> class.</p>
<p>When spring initializes a bean, if the bean implements the <em><code>InitializingBean</code></em> interface, it will automatically call the <em><code>afterPropertiesSet</code></em> method, so it is conceivable that in this way, you can debug by restarting idea:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailScheduled</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span>&#123;<br>    <br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0 23 * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">emailSend</span><span class="hljs-params">()</span>&#123;<br>        ...             <br>    &#125; <br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        emailSend();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Is not it simple? Of course, this may not be the optimal solution, but if it is only used briefly in the project, it is not a big problem.</p>
]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Intranet projects avoid pitfall</title>
    <url>/en/2023/06/06/Intranet%20projects%20avoid%20pitfall/</url>
    <content><![CDATA[<p>As we all know, some projects are completely established in the offline mode of the intranet. The first time I came into contact with this offline mode project recently, record the problems encountered:</p>
<h2 id="Maven-offline-model"><a href="#Maven-offline-model" class="headerlink" title="Maven offline model"></a>Maven offline model</h2><p>Due to the requirements of the intranet, the project is running on a virtual machine, and the development environment cannot be connected to the Internet on the virtual machine, so all projects need to be downloaded again. There was a problem when configuring pom.xml, and idea kept reporting a strange error:</p>
<blockquote>
<p>Cannot access maven-default-http-blocker (<a href="http://0.0.0.0/">http://0.0.0.0/</a>) in offline mode</p>
</blockquote>
<p>At first, according to the instructions on the Internet, I turned on the offline mode of maven, but it still couldn’t solve the problem. Later, I found out that it was a Maven version problem.</p>
<p>This is because the default Bundled (Maven3) of the idea I use, the maven version here is too high above 3.8, and there is a mirror text in the setting.xml file of the high version maven:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-default-http-blockerid&gt;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>external:http:*mirrorOf&gt;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.name&gt;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://0.0.0.0/url&gt;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">blocked</span>&gt;</span>trueblocked&gt;<br>   <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>This thing is that maven blocks external HTTP repositories by default, and the simple solution is to comment it out. </p>
<p>If the user does not take the initiative to comment out the maven-default-http-blocker configuration, this will cause persistence problems when IDEA uses the bundled maven.</p>
<p>This is actually a bit inconvenient. The main reason for setting this is to use the HTTP protocol to download dependencies, which may lead to man-in-the-middle attacks. So Maven 3.8.1 prohibits all Maven repositories of the HTTP protocol.</p>
<p>So, there are mainly two solutions:</p>
<ol>
<li><strong>Downgrade the version</strong></li>
<li>When idea loads the external configuration file, it will first load the settings.xml in the \plugins\maven\lib\maven3\conf folder in the installation directory, and <strong>comment the maven-default-http-blocker configuration in this file</strong></li>
</ol>
<h2 id="idea-SVN-import-project"><a href="#idea-SVN-import-project" class="headerlink" title="idea SVN import project"></a>idea SVN import project</h2><p>The project runs on the amazing SVN instead of git. When trying to import a project from SVN, similar to git, we open the interface from idea File -&gt; new -&gt; project from version control:</p>
<p><img src="/en/images/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.png" alt="内网项目踩坑记录"></p>
<p>You can see that there is a version control option on the top, and the drop-down menu here can choose subversion (ie SVN).</p>
<p>After selecting, enter the url of the company’s SVN project, and the corresponding folder will be automatically generated, which contains project code, test code, packages and so on. However, problems often occur now, and an error will be reported here:</p>
<blockquote>
<p>Cannot run program “svn”: CreateProcess error&#x3D;2</p>
</blockquote>
<p>The reason is that SVN needs to use command-line tools. If there is no SVN command-line tool locally, an error will result.</p>
<p>So reopen the msi file where you installed SVN, select modify (click the picture on the left instead of the text), install the command line client tools and it will be OK.</p>
<p><img src="/en/images/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95(2).png" alt="内网项目"></p>
]]></content>
      <categories>
        <category>Project Records</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Initialization of Java virtual machine class loading</title>
    <url>/en/2023/06/03/Initialization%20of%20Java%20virtual%20machine%20class%20loading/</url>
    <content><![CDATA[<p>We know that “Java Virtual Machine Specification” chapter 5.5 Initialization ^(1)^ strictly stipulates that there are only six situations where the class must be initialized immediately:</p>
<blockquote>
<ul>
<li>Encountered new (instantiated object), getstatic (read a class static field which is not modified by final or does not put the result into the constant pool at compile time), putstatic (set a class static field which is not modified by final or does not put the result into the constant pool at compile time) or invokestatic (calling a static method of a class) these four bytecode instructions, if the class has not been initialized, initialization needs to be triggered.</li>
<li>Use the methods of the java.lang.reflect package to make reflective calls on types</li>
<li>the parent class has not been initialized</li>
<li>When the virtual machine starts, the user needs to specify a main class (main) to be executed</li>
<li>When using the dynamic language support newly added by java7, if the final analysis result of a MthodHandle instance is REF_getStatic, REF_putstatic, REF_invokestatic, REF_newInvokeSpecial four types of method handles</li>
<li>An interface defines the interface method modified by default, and the implementation class of the interface is initialized at the same time</li>
</ul>
</blockquote>
<p>In addition, all reference types do not trigger initialization:</p>
<h2 id="Subclass-references-parent-class"><a href="#Subclass-references-parent-class" class="headerlink" title="Subclass references parent class"></a>Subclass references parent class</h2><p>Referring to a static field of a superclass through a subclass does not cause the subclass to be initialized:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Super</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;System.out.println(<span class="hljs-string">&quot;Super&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Super</span>&#123;<br>    <span class="hljs-keyword">static</span>&#123;System.out.println(<span class="hljs-string">&quot;Sub&quot;</span>);&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeName</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(Sub.value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>What happens in the end? It will output “Super” first, and then the value of “value”.</p>
<p>For static fields, only the class that directly defines this field will be initialized, so the static field of the parent class is referenced through the subclass, and only the parent class will be initialized.</p>
<h2 id="Array-reference-class"><a href="#Array-reference-class" class="headerlink" title="Array reference class"></a>Array reference class</h2><p>Referencing a class through an array definition does not trigger initialization of this class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeName</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Sub[] sp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>[<span class="hljs-number">5</span>];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>What happens in the end?</p>
<p>nothing.</p>
<p>It can be seen that the Sub class has not been initialized. But this code triggers the initialization phase of another class named “[Lcom.example.demo.Sub”. This thing is automatically generated by the virtual machine and a subclass directly inherited from Object , and the creation action is triggered by the bytecode instruction anewarray (that is, creating a new reference array).</p>
<p>The one-dimensional array represented by this class, users can only directly use the length property modified as public and the clone method. Of course, the properties and methods used in the array are all implemented in this class. This is because Java wraps the access to the array elements (it is the movement of the array pointer in C), which is why Java detects that the array is out of bounds and throws an ArrayIndexOutOfBoundsException instead of an illegal memory access like C.</p>
<p>To be precise, Java’s out-of-bounds check is not encapsulated in the class for array element access, but encapsulated in xaload (array elements pushed onto the stack) and xastore (array operations) bytecode instructions for array access.</p>
<h2 id="Constant-pool-reference"><a href="#Constant-pool-reference" class="headerlink" title="Constant pool reference"></a>Constant pool reference</h2><p>Constants will be stored in the constant pool of the calling class during the compilation phase, and essentially there is no direct reference to the class that defines the constant</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Super</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;System.out.println(<span class="hljs-string">&quot;Super&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HELLO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeName</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(Super.HELLO);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>The code here also does not output “Super” after running.</p>
<p>The constant value of hello has actually been converted into a reference of the SomeName class to its own constant pool during the compilation phase, so the two of them have nothing to do with each other.</p>
<h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><p>Interfaces are a little different than classes. In fact, the interface also has an initialization process, but the interface cannot use static code blocks to output initialization information like a class. The compiler will generate a “<clinit>“ class constructor for the interface to initialize the member variables defined in the interface. and:</p>
<p>The interface does not require all parent interfaces to be initialized, only when it is used will it be initialized.</p>
<hr>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>(1) Yellin, F. and Lindholm, T., 1996. The java virtual machine specification.</p>
]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Why anonymous inner class parameters must be final</title>
    <url>/en/2023/06/02/Why%20anonymous%20inner%20class%20parameters%20must%20be%20final/</url>
    <content><![CDATA[<p>Recently, when I wrote some anonymous inner classes, I felt a little difficult to understand, so I reviewed this part again. I found some points that I didn’t notice before - the formal parameters of the anonymous inner class must be prefixed with final (unless the anonymous inner class does not use it)</p>
<p>So, how to understand the principle behind this matter?</p>
<h2 id="How-inner-classes-work"><a href="#How-inner-classes-work" class="headerlink" title="How inner classes work"></a>How inner classes work</h2><p>First, think about how inner classes work. We know that after the internal class is successfully compiled, it will generate a new class file.</p>
<p>The class file only retains references to external classes.</p>
<p>For example, when the parameters passed in by the outer class need to be called by the inner class, it looks like it is called directly:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OuterClass</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name,<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;your name is &quot;</span> + name + <span class="hljs-string">&quot; and age is &quot;</span> + age);<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-type">InnerClass</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerClass</span>();<br>        in.show();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>But in fact name is not directly called by the inner class, in fact it looks like this after java compilation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OuterClass$InnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InnerClass</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.InnerClass$name = name;<br>        <span class="hljs-built_in">this</span>.InnerClass$age = age;<br>    &#125;  <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;your name is &quot;</span> + <span class="hljs-built_in">this</span>.InnerClass$name + <span class="hljs-string">&quot; and age is &quot;</span> + <span class="hljs-built_in">this</span>.InnerClass$age );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Therefore, from the above code, the internal class does not directly call the parameters passed in by the method, but the internal class backs up the passed parameters to its own interior through its own constructor, and the internal method call is actually its own properties instead of parameters of outer class methods!<br>With this understanding, it is easy to figure out why final is used. </p>
<p><strong>Assuming that the inner class modifies the values of these parameters, the values of the original parameters do not change, which affects the consistency of the parameters.</strong> </p>
<p>From the programmer’s point of view, this parameter is the same, but if the value of the parameter is changed in the inner class, but the value is not changed when the external call is made, it may be very confusing, so in order to avoid this kind of embarrassing problem, the compiler designers set the parameters that can be used by inner classes to be final.</p>
<h2 id="How-anonymous-inner-classes-work"><a href="#How-anonymous-inner-classes-work" class="headerlink" title="How anonymous inner classes work"></a>How anonymous inner classes work</h2><p>OK, what’s the difference between an anonymous inner class and an inner class - it has no name.</p>
<p>There is no name, so it is constructed with the default no-argument constructor. If parameters are required, then give him a constructor with parameters.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>(); <br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> outer.getInner(<span class="hljs-string">&quot;Inner&quot;</span>); <br>        System.out.println(inner.getName()); <br>    &#125; <br> <br>    <span class="hljs-keyword">public</span> Inner <span class="hljs-title function_">getInner</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name)</span> &#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>(name) &#123; <br>            <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">nameStr</span> <span class="hljs-operator">=</span> name; <br> <br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123; <br>                <span class="hljs-keyword">return</span> nameStr; <br>            &#125; <br>        &#125;; <br>    &#125; <br>&#125; <br> <br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123; <br>    Inner(String name) &#123; <br>        System.out.println(name); <br>    &#125; <br> <br>    <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>; <br>&#125; <br><br></code></pre></td></tr></table></figure>

<p>Look, here the parameter of the getInner method is final, the reason is the same as the reason for adding final to the inner class part before. </p>
<h2 id="Sometimes-you-can-also-not-add-final"><a href="#Sometimes-you-can-also-not-add-final" class="headerlink" title="Sometimes you can also not add final"></a>Sometimes you can also not add final</h2><p>When can you not add final? If the inner class does not use it, you can not add final, which is easy to understand:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>(); <br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> outer.getInner(<span class="hljs-number">1</span>); <br>        System.out.println(inner.f()); <br>    &#125; <br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Inner <span class="hljs-title function_">getInner</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>(i) &#123; <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;f()&quot;</span>);<br>            &#125;<br>        &#125;; <br>    &#125; <br>&#125; <br> <br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123; <br>    Inner(<span class="hljs-type">int</span> i) &#123; <br>        System.out.println(i); <br>    &#125; <br> <br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>; <br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>The actual process of class initialization</title>
    <url>/en/2023/05/19/The%20actual%20process%20of%20class%20initialization/</url>
    <content><![CDATA[<h2 id="Class-initialization-order"><a href="#Class-initialization-order" class="headerlink" title="Class initialization order"></a>Class initialization order</h2><p>Many people know that the order of class initialization is as follows:<br>(1) Call the base class constructor and repeat this process until the bottom layer<br>(2) Then call the initialization methods of the members in the order of declaration<br>(3) Call the body of the class constructor</p>
<h2 id="The-actual-process-of-class-initialization"><a href="#The-actual-process-of-class-initialization" class="headerlink" title="The actual process of class initialization"></a>The actual process of class initialization</h2><p>However, consider this example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br><br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">walk</span><span class="hljs-params">()</span>&#123;<br>		System.out.println(<span class="hljs-string">&quot;Animal.walk()&quot;</span>);<br>	&#125;<br>	Animal()&#123;<br>		System.out.println(<span class="hljs-string">&quot;Animal() before walk()&quot;</span>);<br>		walk();<br>		System.out.println(<span class="hljs-string">&quot;Animal() after walk()&quot;</span>);<br>	&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>	<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>	<br>	<span class="hljs-meta">@Override</span><br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">walk</span><span class="hljs-params">()</span> &#123;<br>		System.out.println(<span class="hljs-string">&quot;Cat.walk(), step = &quot;</span> + step);<br>	&#125;<br>	<br>	Cat(<span class="hljs-type">int</span> step)&#123;<br>		<span class="hljs-built_in">this</span>.step = step;<br>		System.out.println(<span class="hljs-string">&quot;Cat.Cat(), step = &quot;</span> + step);<br>	&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>	<br>	<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-number">500</span>);<br>	<br>&#125;  <br><br></code></pre></td></tr></table></figure>

<p>The walk method of the Animal class is designed to be overridden in the Cat class, but Animal’s constructor calls the walk method, which results in a call to Cat.walk().<br>The generated result of the above code is:</p>
<blockquote>
<p>Animal() before walk()<br>Cat.walk(), step &#x3D; 0<br>Animal() after walk()<br>Cat.Cat(), step &#x3D; 500</p>
</blockquote>
<p>We will find that when the Animal constructor calls the walk() method, the step is not the default initial value of 100, but 0.<br>Therefore, the order of class initialization mentioned earlier is not complete. In fact, the order of class initialization should be like this:<br>(1) <strong>Allocate space before everything happens, and initialize the storage space allocated to the object to binary zero (or a value equivalent to zero in some special data types)</strong><br>(2) Call the base class constructor as mentioned above. At this time, the walk method must be called before calling the cat constructor, so the step value at this time is 0<br>(3) Call the initialization methods of the members in the order of declaration<br>(4) Call the body of the class constructor<br>Of course, this kind of error is not easy to find, so it is recommended that you try to avoid calling other methods in the constructor if possible. The only methods that can be safely called in the constructor are the final methods of the base class (because they will not be overrided, there will be no above-mentioned problems)。</p>
]]></content>
      <categories>
        <category>back-end</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
