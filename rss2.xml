<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hongjin&#39;s Blog</title>
    <link>http://lh728.github.io/</link>
    
    <atom:link href="http://lh728.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 08 May 2024 06:04:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>集合使用注意事项</title>
      <link>http://lh728.github.io/2024/04/08/%E9%9B%86%E5%90%88%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <guid>http://lh728.github.io/2024/04/08/%E9%9B%86%E5%90%88%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <pubDate>Sun, 07 Apr 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;集合判空&quot;&gt;&lt;a href=&quot;#集合判空&quot; class=&quot;headerlink&quot; title=&quot;集合判空&quot;&gt;&lt;/a&gt;集合判空&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;判断所有集合内部的元素是否为空，使用 isEmpty() 方法，而不是 size(</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="集合判空"><a href="#集合判空" class="headerlink" title="集合判空"></a>集合判空</h3><blockquote><p><strong>判断所有集合内部的元素是否为空，使用 isEmpty() 方法，而不是 size()&#x3D;&#x3D;0 的方式</strong></p></blockquote><p>这是因为 <code>isEmpty()</code> 方法的可读性更好，并且时间复杂度为 O(1)。</p><p>绝大部分我们使用的集合的 <code>size()</code> 方法的时间复杂度也是 O(1)，不过，也有很多复杂度不是 O(1) 的，比如 <code>java.util.concurrent</code> 包下的某些集合（<code>ConcurrentLinkedQueue</code>、<code>ConcurrentHashMap</code>…）。</p><p>下面是 <code>ConcurrentHashMap</code> 的 <code>size()</code> 方法和 <code>isEmpty()</code> 方法的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sumCount();<br>    <span class="hljs-keyword">return</span> ((n &lt; <span class="hljs-number">0L</span>) ? <span class="hljs-number">0</span> :<br>            (n &gt; (<span class="hljs-type">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :<br>            (<span class="hljs-type">int</span>)n);<br>&#125;<br><span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sumCount</span><span class="hljs-params">()</span> &#123;<br>    CounterCell[] as = counterCells; CounterCell a;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> baseCount;<br>    <span class="hljs-keyword">if</span> (as != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; as.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> ((a = as[i]) != <span class="hljs-literal">null</span>)<br>                sum += a.value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> sumCount() &lt;= <span class="hljs-number">0L</span>; <span class="hljs-comment">// ignore transient negative values</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="集合转Map"><a href="#集合转Map" class="headerlink" title="集合转Map"></a>集合转Map</h3><blockquote><p><strong>在使用 <code>java.util.stream.Collectors</code> 类的 <code>toMap()</code> 方法转为 <code>Map</code> 集合时，一定要注意当 value 为 null 时会抛 NPE 异常。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String phoneNumber;<br>     <span class="hljs-comment">// getters and setters</span><br>&#125;<br><br>List&lt;Person&gt; bookList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>bookList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-string">&quot;18163138123&quot;</span>));<br>bookList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;martin&quot;</span>,<span class="hljs-literal">null</span>));<br><span class="hljs-comment">// NPE</span><br>bookList.stream().collect(Collectors.toMap(Person::getName, Person::getPhoneNumber));<br><br></code></pre></td></tr></table></figure><p>首先，我们来看 <code>java.util.stream.Collectors</code> 类的 <code>toMap()</code> 方法 ，可以看到其内部调用了 <code>Map</code> 接口的 <code>merge()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, K, U, M <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Map</span>&lt;K, U&gt;&gt;<br>Collector&lt;T, ?, M&gt; toMap(Function&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">K</span>&gt; keyMapper,<br>                            Function&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">U</span>&gt; valueMapper,<br>                            BinaryOperator&lt;U&gt; mergeFunction,<br>                            Supplier&lt;M&gt; mapSupplier) &#123;<br>    BiConsumer&lt;M, T&gt; accumulator<br>            = (map, element) -&gt; map.merge(keyMapper.apply(element),<br>                                          valueMapper.apply(element), mergeFunction);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollectorImpl</span>&lt;&gt;(mapSupplier, accumulator, mapMerger(mergeFunction), CH_ID);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>Map</code> 接口的 <code>merge()</code> 方法如下，这个方法是接口中的默认实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">default</span> V <span class="hljs-title function_">merge</span><span class="hljs-params">(K key, V value,</span><br><span class="hljs-params">        BiFunction&lt;? <span class="hljs-built_in">super</span> V, ? <span class="hljs-built_in">super</span> V, ? extends V&gt; remappingFunction)</span> &#123;<br>    Objects.requireNonNull(remappingFunction);<br>    Objects.requireNonNull(value);<br>    <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> get(key);<br>    <span class="hljs-type">V</span> <span class="hljs-variable">newValue</span> <span class="hljs-operator">=</span> (oldValue == <span class="hljs-literal">null</span>) ? value :<br>               remappingFunction.apply(oldValue, value);<br>    <span class="hljs-keyword">if</span>(newValue == <span class="hljs-literal">null</span>) &#123;<br>        remove(key);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        put(key, newValue);<br>    &#125;<br>    <span class="hljs-keyword">return</span> newValue;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>merge()</code> 方法会先调用 <code>Objects.requireNonNull()</code> 方法判断 value 是否为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">requireNonNull</span><span class="hljs-params">(T obj)</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="集合遍历"><a href="#集合遍历" class="headerlink" title="集合遍历"></a>集合遍历</h3><blockquote><p><strong>不要在 foreach 循环里进行元素的 <code>remove/add</code> 操作。remove 元素请使用 <code>Iterator</code> 方式，如果并发操作，需要对 <code>Iterator</code> 对象加锁。</strong></p></blockquote><p>通过反编译你会发现 foreach 语法底层其实还是依赖 <code>Iterator</code> 。不过， <code>remove/add</code> 操作直接调用的是集合自己的方法，而不是 <code>Iterator</code> 的 <code>remove/add</code>方法</p><p>这就导致 <code>Iterator</code> 莫名其妙地发现自己有元素被 <code>remove/add</code> ，然后，它就会抛出一个 <code>ConcurrentModificationException</code> 来提示用户发生了并发修改异常。这就是单线程状态下产生的 <strong>fail-fast</strong></p><blockquote><p>fail-fast 机制：多个线程对 fail-fast 集合进行修改的时候，可能会抛出<code>ConcurrentModificationException</code>。 </p></blockquote><p>Java8 开始，可以使用 <code>Collection.removeIf()</code>方法删除满足特定条件的元素,如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i) &#123;<br>    list.add(i);<br>&#125;<br>list.removeIf(filter -&gt; filter % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>); <span class="hljs-comment">/* delete all even number in list */</span><br>System.out.println(list); <span class="hljs-comment">/* [1, 3, 5, 7, 9] */</span><br><br></code></pre></td></tr></table></figure><p>除了上面介绍的直接使用 <code>Iterator</code> 进行遍历操作之外，你还可以：</p><ul><li>使用普通的 for 循环</li><li>使用 fail-safe 的集合类。<code>java.util</code>包下面的所有的集合类都是 fail-fast 的，而<code>java.util.concurrent</code>包下面的所有的类都是 fail-safe 的。</li><li>…..</li></ul><h3 id="集合去重"><a href="#集合去重" class="headerlink" title="集合去重"></a>集合去重</h3><blockquote><p><strong>可以利用 <code>Set</code> 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 <code>List</code> 的 <code>contains()</code> 进行遍历去重或者判断包含操作。</strong></p></blockquote><p>这里我们以 <code>HashSet</code> 和 <code>ArrayList</code> 为例说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Set </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Set&lt;T&gt; <span class="hljs-title function_">removeDuplicateBySet</span><span class="hljs-params">(List&lt;T&gt; data)</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(data)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(data);<br>&#125;<br><br><span class="hljs-comment">// List </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">removeDuplicateByList</span><span class="hljs-params">(List&lt;T&gt; data)</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(data)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    &#125;<br>    List&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(data.size());<br>    <span class="hljs-keyword">for</span> (T current : data) &#123;<br>        <span class="hljs-keyword">if</span> (!result.contains(current)) &#123;<br>            result.add(current);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>两者的核心差别在于 <code>contains()</code> 方法的实现。</p><p><code>HashSet</code> 的 <code>contains()</code> 方法底部依赖的 <code>HashMap</code> 的 <code>containsKey()</code> 方法，时间复杂度接近于 O（1）（没有出现哈希冲突的时候为 O（1））。</p><p>我们有 N 个元素插入进 Set 中，那时间复杂度就接近是 O (n)。</p><p><code>ArrayList</code> 的 <code>contains()</code> 方法是通过遍历所有元素的方法来做的，时间复杂度接近是 O(n)。</p><h3 id="集合转数组"><a href="#集合转数组" class="headerlink" title="集合转数组"></a>集合转数组</h3><blockquote><p><strong>使用集合转数组的方法，必须使用集合的 <code>toArray(T[] array)</code>，传入的是类型完全一致、长度为 0 的空数组。</strong></p></blockquote><p><code>toArray(T[] array)</code> 方法的参数是一个泛型数组，如果 <code>toArray</code> 方法中没有传递任何参数的话返回的是 <code>Object</code>类 型数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">String [] s= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>    <span class="hljs-string">&quot;dog&quot;</span>, <span class="hljs-string">&quot;lazy&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;over&quot;</span>, <span class="hljs-string">&quot;jumps&quot;</span>, <span class="hljs-string">&quot;fox&quot;</span>, <span class="hljs-string">&quot;brown&quot;</span>, <span class="hljs-string">&quot;quick&quot;</span>, <span class="hljs-string">&quot;A&quot;</span><br>&#125;;<br>List&lt;String&gt; list = Arrays.asList(s);<br>Collections.reverse(list);<br><br>s=list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]);<br><br></code></pre></td></tr></table></figure><p>由于 JVM 优化，<code>new String[0]</code>作为<code>Collection.toArray()</code>方法的参数现在使用更好，<code>new String[0]</code>就是起一个模板的作用，指定了返回数组的类型，0 是为了节省空间，因为它只是为了说明返回的类型。</p><h3 id="数组转集合"><a href="#数组转集合" class="headerlink" title="数组转集合"></a>数组转集合</h3><blockquote><p><strong>使用工具类 <code>Arrays.asList()</code> 把数组转换成集合时，不能使用其修改集合相关的方法， 它的 <code>add/remove/clear</code> 方法会抛出 <code>UnsupportedOperationException</code> 异常。</strong></p></blockquote><p><code>Arrays.asList()</code>在平时开发中还是比较常见的，我们可以使用它将一个数组转换为一个 <code>List</code> 集合。</p><p>JDK 源码对于这个方法的说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns a fixed-size list backed by the specified array.  (Changes to</span><br><span class="hljs-comment">     * the returned list &quot;write through&quot; to the array.)  This method acts</span><br><span class="hljs-comment">     * as bridge between array-based and collection-based APIs, in</span><br><span class="hljs-comment">     * combination with &#123;<span class="hljs-doctag">@link</span> Collection#toArray&#125;.  The returned list is</span><br><span class="hljs-comment">     * serializable and implements &#123;<span class="hljs-doctag">@link</span> RandomAccess&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;This method also provides a convenient way to create a fixed-size</span><br><span class="hljs-comment">     * list initialized to contain several elements:</span><br><span class="hljs-comment">     * &lt;pre&gt;</span><br><span class="hljs-comment">     *     List&amp;lt;String&amp;gt; stooges = Arrays.asList(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;);</span><br><span class="hljs-comment">     * &lt;/pre&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a the array by which the list will be backed</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a list view of the specified array</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">asList</span><span class="hljs-params">(T... a)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(a);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>1、<code>Arrays.asList()</code>是泛型方法，传递的数组必须是对象数组，而不是基本类型。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] myArray = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">List</span> <span class="hljs-variable">myList</span> <span class="hljs-operator">=</span> Arrays.asList(myArray);<br>System.out.println(myList.size());<span class="hljs-comment">//1</span><br>System.out.println(myList.get(<span class="hljs-number">0</span>));<span class="hljs-comment">//array address</span><br>System.out.println(myList.get(<span class="hljs-number">1</span>));<span class="hljs-comment">//ArrayIndexOutOfBoundsException</span><br><span class="hljs-type">int</span>[] array = (<span class="hljs-type">int</span>[]) myList.get(<span class="hljs-number">0</span>);<br>System.out.println(array[<span class="hljs-number">0</span>]);<span class="hljs-comment">//1</span><br><br></code></pre></td></tr></table></figure><p>当传入一个原生数据类型数组时，<code>Arrays.asList()</code> 的真正得到的参数就不是数组中的元素，而是数组对象本身！此时 <code>List</code> 的唯一元素就是这个数组，这也就解释了上面的代码。</p><p><strong>2. 使用集合的修改方法: <code>add()</code>、<code>remove()</code>、<code>clear()</code>会抛出异常。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">myList</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>myList.add(<span class="hljs-number">4</span>);<span class="hljs-comment">//UnsupportedOperationException</span><br>myList.remove(<span class="hljs-number">1</span>);<span class="hljs-comment">//UnsupportedOperationException</span><br>myList.clear();<span class="hljs-comment">//UnsupportedOperationException</span><br><br></code></pre></td></tr></table></figure><p><code>Arrays.asList()</code> 方法返回的并不是 <code>java.util.ArrayList</code> ，而是 <code>java.util.Arrays</code> 的一个内部类,这个内部类并没有实现集合的修改方法或者说并没有重写这些方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">myList</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>System.out.println(myList.getClass());<span class="hljs-comment">//class java.util.Arrays$ArrayList</span><br><br></code></pre></td></tr></table></figure><p>这个内部类继承自AbstractList，实现了RandomAccess, Serializabl接口。</p><p>我们再看一下<code>java.util.AbstractList</code>的 <code>add/remove/clear</code> 方法就知道为什么会抛出 <code>UnsupportedOperationException</code> 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    add(size(), e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> index, E element)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    removeRange(<span class="hljs-number">0</span>, size());<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeRange</span><span class="hljs-params">(<span class="hljs-type">int</span> fromIndex, <span class="hljs-type">int</span> toIndex)</span> &#123;<br>    ListIterator&lt;E&gt; it = listIterator(fromIndex);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>, n=toIndex-fromIndex; i&lt;n; i++) &#123;<br>        it.next();<br>        it.remove();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>那么，<strong>那我们如何正确的将数组转换为 <code>ArrayList</code> ?</strong></p><p>1、手动实现工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JDK1.5+</span><br><span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">arrayToList</span><span class="hljs-params">(<span class="hljs-keyword">final</span> T[] array)</span> &#123;<br>  <span class="hljs-keyword">final</span> List&lt;T&gt; l = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;(array.length);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> T s : array) &#123;<br>    l.add(s);<br>  &#125;<br>  <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><br>Integer [] myArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br>System.out.println(arrayToList(myArray).getClass());<span class="hljs-comment">//class java.util.ArrayList</span><br><br></code></pre></td></tr></table></figure><p>2、最简便的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>))<br></code></pre></td></tr></table></figure><p>3、使用 Java8 的 <code>Stream</code>(推荐)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer [] myArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br><span class="hljs-type">List</span> <span class="hljs-variable">myList</span> <span class="hljs-operator">=</span> Arrays.stream(myArray).collect(Collectors.toList());<br><br><span class="hljs-type">int</span> [] myArray2 = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br><span class="hljs-type">List</span> <span class="hljs-variable">myList</span> <span class="hljs-operator">=</span> Arrays.stream(myArray2).boxed().collect(Collectors.toList());<br><br></code></pre></td></tr></table></figure><p>4、使用 Guava</p><p>对于不可变集合，你可以使用ImmutableList类及其of()与copyOf()工厂方法：（参数不能为空）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; il = ImmutableList.of(<span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;elements&quot;</span>);  <span class="hljs-comment">// from varargs</span><br>List&lt;String&gt; il = ImmutableList.copyOf(aStringArray);      <span class="hljs-comment">// from array</span><br></code></pre></td></tr></table></figure><p>对于可变集合，你可以使[<code>Lists</code>类及其<code>newArrayList()</code>工厂方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; l1 = Lists.newArrayList(anotherListOrCollection);    <span class="hljs-comment">// from collection</span><br>List&lt;String&gt; l2 = Lists.newArrayList(aStringArray);               <span class="hljs-comment">// from array</span><br>List&lt;String&gt; l3 = Lists.newArrayList(<span class="hljs-string">&quot;or&quot;</span>, <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;elements&quot;</span>); <span class="hljs-comment">// from varargs</span><br></code></pre></td></tr></table></figure><p>5、使用 Apache Commons Collections</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>CollectionUtils.addAll(list, str);<br></code></pre></td></tr></table></figure><p>6、 使用 Java9 的 <code>List.of()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>List&lt;Integer&gt; list = List.of(array);<br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>(1) <a href="https://javaguide.cn/java/collection/java-collection-precautions-for-use.html#%E6%95%B0%E7%BB%84%E8%BD%AC%E9%9B%86%E5%90%88">https://javaguide.cn/java/collection/java-collection-precautions-for-use.html#%E6%95%B0%E7%BB%84%E8%BD%AC%E9%9B%86%E5%90%88</a></p>]]></content:encoded>
      
      
      <category domain="http://lh728.github.io/categories/%E5%90%8E%E7%AB%AF/">后端</category>
      
      
      <category domain="http://lh728.github.io/tags/Java/">Java</category>
      
      
      <comments>http://lh728.github.io/2024/04/08/%E9%9B%86%E5%90%88%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MySQL数据备份</title>
      <link>http://lh728.github.io/2023/09/09/MySQL%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</link>
      <guid>http://lh728.github.io/2023/09/09/MySQL%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</guid>
      <pubDate>Fri, 08 Sep 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;该博文用于记录一下学习过程中学到的新知识，关于如何在MySQL中进行数据备份。如果之后有用到，可以用作参考。&lt;/p&gt;
&lt;p&gt;直接看代码：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</description>
        
      
      
      
      <content:encoded><![CDATA[<p>该博文用于记录一下学习过程中学到的新知识，关于如何在MySQL中进行数据备份。如果之后有用到，可以用作参考。</p><p>直接看代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">Q1:<span class="hljs-keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;<br>Q2:<span class="hljs-keyword">START</span> TRANSACTION  <span class="hljs-keyword">WITH</span> CONSISTENT SNAPSHOT；<br><span class="hljs-comment">/* other tables */</span><br>Q3:<span class="hljs-keyword">SAVEPOINT</span> sp;<br><span class="hljs-comment">/* 时刻 1 */</span><br>Q4:<span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `t1`;<br><span class="hljs-comment">/* 时刻 2 */</span><br>Q5:<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `t1`;<br><span class="hljs-comment">/* 时刻 3 */</span><br>Q6:<span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">TO</span> <span class="hljs-keyword">SAVEPOINT</span> sp;<br><span class="hljs-comment">/* 时刻 4 */</span><br><span class="hljs-comment">/* other tables */</span><br></code></pre></td></tr></table></figure><p>在备份开始的时候，为了确保 RR（可重复读）隔离级别，再设置一次 RR 隔离级别 (Q1);</p><p>启动事务，这里用 WITH CONSISTENT SNAPSHOT 确保这个语句执行完就可以得到一个一致性视图（Q2)；</p><p>设置一个保存点（Q3）；</p><p>show create 是为了拿到表结构 (Q4)，然后正式导数据 （Q5），回滚到 SAVEPOINT sp，在这里的作用是释放 t1 的 MDL 锁 （Q6）。</p><p>注意如果这时传来一个DDL语句，假设这是一个小表，并且到达后如果开始执行，很快能够执行完成。这时会有什么现象呢？</p><ul><li>如果在 Q4 语句执行之前到达，即时刻一，现象：没有影响，备份拿到的是 DDL 后的表结构。</li><li>如果在“时刻 2”到达，则表结构被改过，Q5 执行的时候，报 Table definition has changed, please retry transaction，现象：mysqldump 终止；</li><li>如果在“时刻 2”和“时刻 3”之间到达，mysqldump 占着 t1 的 MDL 读锁，binlog 被阻塞，现象：主从延迟，直到 Q6 执行完成。</li><li>从“时刻 4”开始，mysqldump 释放了 MDL 读锁，现象：没有影响，备份拿到的是 DDL 前的表结构。</li></ul><p>该博文引用了《MySQL 实战 45 讲》的内容 ^(1)^</p><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>(1) <a href="https://time.geekbang.org/column/article/70215">https://time.geekbang.org/column/article/70215</a></p><hr>]]></content:encoded>
      
      
      <category domain="http://lh728.github.io/categories/%E5%90%8E%E7%AB%AF/">后端</category>
      
      
      <category domain="http://lh728.github.io/tags/SQL/">SQL</category>
      
      
      <comments>http://lh728.github.io/2023/09/09/MySQL%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>方法静态分派</title>
      <link>http://lh728.github.io/2023/08/10/%E6%96%B9%E6%B3%95%E9%9D%99%E6%80%81%E5%88%86%E6%B4%BE/</link>
      <guid>http://lh728.github.io/2023/08/10/%E6%96%B9%E6%B3%95%E9%9D%99%E6%80%81%E5%88%86%E6%B4%BE/</guid>
      <pubDate>Wed, 09 Aug 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;该例子参考了书《深入理解Java虚拟机》。&lt;/p&gt;
&lt;p&gt;首先，思考下面代码的返回结果：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<p>该例子参考了书《深入理解Java虚拟机》。</p><p>首先，思考下面代码的返回结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticDisptach</span>&#123;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Human</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Woman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Human</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Human people)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,people&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Man man)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,man&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Woman woman)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,woman&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Human</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>();<br>        <span class="hljs-type">Human</span> <span class="hljs-variable">woman</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">woman</span>();<br>        <span class="hljs-type">StaticDisptach</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticDisptach</span>();<br>        sr.sayHello(man);<br>        sr.sayHello(woman);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果是：</p><blockquote><p>hello,people</p><p>hello,people</p></blockquote><p>如果对重载有所了解，得到这个结果并不难。但是为什么虚拟机会执行参数类型为Human的重载版本呢？</p><p>首先我们定义两个关键概念，对于如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Human</span> <span class="hljs-variable">man</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>(); <br></code></pre></td></tr></table></figure><p>上面代码的<code>Human</code> 称为变量的“<strong>静态类型</strong>”，或者“<strong>外观类型</strong>”，后面的<code>Man</code>被称为变量的“<strong>实际类型</strong>”或者“<strong>运行时类型</strong>”。</p><p>静态类型和实际类型在程序中都可能会发生变化，区别是静态类型变化仅仅在使用时才会发生，变量本身静态类型不会改变，并且最终静态类型在编译期可知；实际类型变化的结果只有在运行期才可知，编译期在编译阶段并不知道对象的实际类型是什么。</p><p>这句话什么意思呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Human</span> <span class="hljs-variable">human</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>()).nextBoolean()?<span class="hljs-keyword">new</span> <span class="hljs-title class_">Man</span>():<span class="hljs-keyword">new</span> <span class="hljs-title class_">Woman</span>;<br><br>sr.sayHello((Man) human);<br>sr.sayHello((Woman) human);<br></code></pre></td></tr></table></figure><p>对象<code>human</code>的实际类型是可变的，编译期你不可能知道它究竟是<code>Man</code>还是<code>Woman</code>，需要等到运行期才知道。而<code>human</code>的静态类型<code>Human</code>可以在使用时通过强制类型转换临时改变，但这个改变在编译期可知——两次调用<code>sayhello</code>方法，编译期可以知道转型的是<code>Man</code>还是<code>Woman</code>。</p><p>因此，对于之前的重载，对于<code>sayHello</code>方法，方法接收者已经确定是对象“sr”的前提下，使用哪个重载版本就完全取决于传入参数的数量和数据类型。<strong>编译期在重载时是通过参数的静态类型而不是实际类型做判断的</strong>。由于静态类型在编译期可知，所以在编译阶段，Javac编译期就根据参数的静态类型决定了会使用哪个重载版本，因此选择了<code>sayHello(Human)</code>作为调用目标，并把这个方法的符号引用写到<code>main()</code>方法里面的两条<code>invokevirtual</code>指令的参数中。</p><p>另外，Javac编译期虽然能确定方法的重载版本，但是这个重载版本并不是唯一的，往往只能确定一个更合适的版本。因此有了重载方法匹配优先级的说法：（这种情况的出现主要是因为字面量天生的语义模糊）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(Object arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;object&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;int&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(<span class="hljs-type">long</span> arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;long&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(Character arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Character&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(<span class="hljs-type">char</span> arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;char&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(<span class="hljs-type">char</span>... arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;char...&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">(Serializable arg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Serializable&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>sayHi(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码运行结束后会生成 “<code>char</code>”</p><p>这很好理解，因为<code>&#39;a&#39;</code>就是一个char类型数据。但是如果把<code>sayHi(char arg)</code> 方法注释掉，输出会变成：</p><blockquote><p>int</p></blockquote><p>这是因为发生了自动类型转换，<code>&#39;a&#39;</code> 不仅代表一个字符，还代表数字97（Unicode）。现在再把 <code>sayHi(int arg)</code> 注释掉，结果就变成了：</p><blockquote><p>long</p></blockquote><p>这是因为发生了两次自动类型转换，<code>&#39;a&#39;</code>从字符转型成整数97，然后转型为长整数 97L，自动类型转换可能还可以继续进行，即 </p><blockquote><p>char -&gt; int -&gt; long -&gt; float -&gt; double的顺序</p></blockquote><p>注意没有short和byte的转型，因为它们的转型是不安全的。</p><p>接下来如果继续注释掉 <code>sayHi(long arg)</code> 方法，结果就会变成：</p><blockquote><p>Character</p></blockquote><p>这是因为发生了自动装箱，如果继续注释   <code>sayHi(Character arg)</code>，则输出会变为：</p><blockquote><p>Serializable</p></blockquote><p>之所以会出现 Serializable 这样的结果，是因为 <code>java.lang.Serializable</code> 是 <code>java.lang.Character</code> 类所实现的一个接口，当自动装箱还是找不到装箱类，但是找到了装箱类所实现的接口类型，所以会再做一次自动装箱。</p><p>char可以转型为 int，但是<code>Character</code>不会转型为<code>Integer</code>的，只能安全地转型为它实现的接口或者父类。</p><p>这里有个小细节， <code>Character</code> 还实现了另一个接口 <code>Comparable&lt;Character&gt;</code> ，如果有两个参数分别为 <code>Serializable</code> 和 <code>Comparable&lt;Character&gt;</code>，它们此时的优先级是一样的，编译器会提示类型模糊并拒绝编译。此时需要显式调用。</p><p>如果继续注释掉 <code>sayHi(Serializable arg)</code>方法，结果就会变成：</p><blockquote><p>Object</p></blockquote><p>很明显这是char装箱后转型为父类了，如果有多个父类会从下往上搜索，Object是优先级最低的。</p><p>最后，把 <code>sayHi(Object arg)</code> 方法注释掉，还有一个输出结果：</p><blockquote><p>char…</p></blockquote><p>可见变长参数的优先级是最低的，这时候字符’a’被当做了一个char[] 数组的元素。</p><p>以上例子属于比较极端的例子，除了面试时用作难为求职者外实际工作中很难有所用途，但是有所了解相信也对java的进一步认知有帮助。</p>]]></content:encoded>
      
      
      <category domain="http://lh728.github.io/categories/%E5%90%8E%E7%AB%AF/">后端</category>
      
      
      <category domain="http://lh728.github.io/tags/Java/">Java</category>
      
      
      <comments>http://lh728.github.io/2023/08/10/%E6%96%B9%E6%B3%95%E9%9D%99%E6%80%81%E5%88%86%E6%B4%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Oracle SQL优化</title>
      <link>http://lh728.github.io/2023/07/24/Oracle%20SQL%E4%BC%98%E5%8C%96/</link>
      <guid>http://lh728.github.io/2023/07/24/Oracle%20SQL%E4%BC%98%E5%8C%96/</guid>
      <pubDate>Sun, 23 Jul 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;最近在写一个项目SQL的时候遇到了问题，SQL的执行时间过长：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;tab</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近在写一个项目SQL的时候遇到了问题，SQL的执行时间过长：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br><span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">as</span> type,<br><span class="hljs-built_in">count</span>(adl.is_attend) <span class="hljs-keyword">as</span> count,<br>round(<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> adl.is_attend <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>)<span class="hljs-operator">/</span> <span class="hljs-built_in">count</span>(adl.is_attend),<span class="hljs-number">2</span>) <span class="hljs-operator">*</span> <span class="hljs-number">100</span> <span class="hljs-keyword">as</span> rate<br><span class="hljs-keyword">from</span><br>attendance adl<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> deptId <span class="hljs-keyword">from</span> department <span class="hljs-keyword">start</span> <span class="hljs-keyword">with</span> deptId <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;...&#x27;</span><br>            <span class="hljs-keyword">connect</span> <span class="hljs-keyword">by</span> up_daptId <span class="hljs-operator">=</span> prior deptId) <span class="hljs-keyword">as</span> nbd <span class="hljs-keyword">on</span> adl.deptId <span class="hljs-operator">=</span> nbd.deptId<br><span class="hljs-keyword">where</span> <br>to_date(adl.date,<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&gt;=</span> to_date( #&#123;begin_date&#125;<br>    ,<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br><span class="hljs-keyword">and</span> to_date(adl.date,<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="hljs-operator">&lt;=</span> to_date( #&#123;end_date&#125;<br>    ,<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)<br>    <br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><br>......<br></code></pre></td></tr></table></figure><p>上面的代码是一个配合Union组合使用的SQL代码，其他部分的代码和这一部分的代码很相似，仅仅是修改了<code>select</code>中的<code>type</code>和<code>inner join</code> 的部门id。代码的总运行时间达到了110s左右，单段SQL代码运行时间在18S左右，可以说是非常长的运行时间了。</p><p>另外， <code>#&#123;begin_date&#125;</code>，<code>#&#123;end_date&#125;</code>分别是后端将会传入的参数，做动态查询使用。</p><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>首先分析最直接的问题——为什么运行时间这么长？</p><p>其实这里的问题并没有很复杂，<code>attendance</code>表的数据有一千三百多万条，庞大的数据量光是最基础的简单的查询都需要花费20S左右。</p><p>另外，需要关联的部门表是一个递归<code>join</code>，这里会查询出给出的<code>deptId</code>下面的所有小部门，这里的查询也很耗时间。</p><p>那么，怎么解决问题呢？</p><p>方案一：首先数据量的问题是无解的，我们不可能说某一段数据直接舍弃了，而且注意，我们的where 条件是限制了时间的，因此对数据量实际上是有一定限制的。因此首先优化的思路就是在<code>Join</code>上：</p><blockquote><p>递归<code>Join</code>是很耗时的一个操作，因此我们可以直接想到在<code>deptId</code>上建立一个索引——事实上这是个正确的思路，通过建立索引运行时间直接从18S优化到了2S。</p></blockquote><p>方案二：这里还可以优化<code>where</code>的查询条件：</p><blockquote><p>在日期限制的时候使用了<code>to_date</code>函数，事实上仅仅做年月日对比的时候，可以直接不使用这个函数做字符串比较。这是因为Oracle SQL的<a href="https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Data-Type-Comparison-Rules.html#GUID-6A02902A-1EF1-41E4-9494-381488BD272F">数据优先级</a>，会将低优先级的字符串隐式转换转为日期格式。这里通过隐式转换，运行时间可以继续优化，从2S提升至1S。</p></blockquote><p><strong>但是注意，这是有风险的——首先，隐式数据类型转换可能会对性能产生负面影响（当然这里是正面的）；而且，隐式转换可能会产生奇怪的结果。具体取决于<code>NLS_DATE_FORMAT</code>参数的值。</strong></p><p>当通过隐式转换或不指定格式模型的显式转换将日期时间值转换为文本时，格式模型由全球化会话参数之一定义，即<code>NLS_DATE_FORMAT</code>、<code>NLS_TIMESTAMP_FORMAT</code>或者<code>NLS_TIMESTAMP_TZ_FORMAT</code>。</p><p>举个例子，<code>NLS_DATE_FORMAT</code>设置的默认值是<code>&#39;DD-MON-RR&#39;</code>两位数年份，因此当日期转换为字符串时，世纪时间可能会丢失，并在根据十年的值转换回日期时被 1900 或 2000 替换掉；并且假设原始时间有时分秒，这些数据也会丢失掉。</p><p>总之，不同的参数可能有不同的结果。</p><p>所以，考虑到方案2的优化并不是必要的，我还是保留了日期函数。</p><hr>]]></content:encoded>
      
      
      <category domain="http://lh728.github.io/categories/%E5%90%8E%E7%AB%AF/">后端</category>
      
      
      <category domain="http://lh728.github.io/tags/SQL/">SQL</category>
      
      
      <comments>http://lh728.github.io/2023/07/24/Oracle%20SQL%E4%BC%98%E5%8C%96/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>内网项目踩坑记录</title>
      <link>http://lh728.github.io/2023/07/24/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <guid>http://lh728.github.io/2023/07/24/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <pubDate>Sun, 23 Jul 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;众所周知，有的项目是完全建立在内网的离线模式的。最近第一次接触这种离线模式的项目，记录一下遇到的问题：&lt;/p&gt;
&lt;h2 id=&quot;Maven-offline-model&quot;&gt;&lt;a href=&quot;#Maven-offline-model&quot; class=&quot;headerlink&quot; ti</description>
        
      
      
      
      <content:encoded><![CDATA[<p>众所周知，有的项目是完全建立在内网的离线模式的。最近第一次接触这种离线模式的项目，记录一下遇到的问题：</p><h2 id="Maven-offline-model"><a href="#Maven-offline-model" class="headerlink" title="Maven offline model"></a>Maven offline model</h2><p>由于内网要求，所以项目是运行在虚拟机上的，开发环境在虚拟机上不能联网，所以所有项目都是需要重新下载下来。在配置pom.xml的时候出现了问题，idea一直报一个奇怪的错误：</p><blockquote><p>Cannot access maven-default-http-blocker (<a href="http://0.0.0.0/">http://0.0.0.0/</a>) in offline mode</p></blockquote><p>最开始按照网上指示，开启了maven的offline模式，但是还是不能解决问题，后来发现是Maven的版本问题</p><p>这是因为我使用的idea默认的Bundled(Maven3)，这里的maven版本是3.8以上太高了，在高版本的maven的setting.xml文件中有一个镜像：</p><p>首先，思考内部类是怎么运行的。我们知道在内部类编译成功后，它会产生一个新的class文件。</p><p>该class文件仅仅只保留了对外部类的引用。</p><p>举个例子，当外部类传入的参数需要被内部类调用时，直接看起来好像就是被直接调用的： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-default-http-blockerid&gt;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>external:http:*mirrorOf&gt;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.name&gt;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://0.0.0.0/url&gt;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">blocked</span>&gt;</span>trueblocked&gt;<br>   <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个东西是maven默认阻止外部 HTTP 存储库，简单的处理就是把它注释掉。如果用户不主动注释掉maven-default-http-blocker配置，这会导致IDEA在使用捆绑的maven时出现持久性问题。</p><p>这个其实有点不方便，设置这个主要原因是使用HTTP协议下载依赖，可能会导致中间人攻击。所以Maven 3.8.1就禁止了所有HTTP协议的Maven仓库。</p><p>所以，解决方案主要就是两种：</p><ol><li>降低版本</li><li>当idea加载外部配置文件时会优先加载安装目录下\plugins\maven\lib\maven3\conf文件夹内的settings.xml，注释该文件中maven-default-http-blocker配置</li></ol><h2 id="idea-SVN导入项目"><a href="#idea-SVN导入项目" class="headerlink" title="idea SVN导入项目"></a>idea SVN导入项目</h2><p>项目是运行于神奇的SVN而不是git上的，当尝试从svn导入项目的时候，类似git，我们从idea File -&gt; new -&gt; project from version control打开界面：</p><p><img src="/images/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.png" alt="内网项目踩坑记录"></p><p>可以看到上方有一个version control的选项，这里的下拉菜单可以选择subversion（即SVN).</p><p>选择之后输入公司SVN项目的url，就会自动生成对应的文件夹，里面有项目代码，测试代码，包这些。但是第一次运行SVN的时候往往会出问题，这里会报错：</p><blockquote><p>Cannot run program “svn”: CreateProcess error&#x3D;2</p></blockquote><p>原因是SVN需要使用命令行工具，如果本地没有SVN的命令行工具，则导致出错。</p><p>所以重新打开你安装SVN的msi文件，选择modify （点击左边的图片而不是文字），安装command line client tools就OK了。</p><p><img src="/images/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95(2).png" alt="内网项目"></p>]]></content:encoded>
      
      
      <category domain="http://lh728.github.io/categories/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/">项目记录</category>
      
      
      <category domain="http://lh728.github.io/tags/Java/">Java</category>
      
      
      <comments>http://lh728.github.io/2023/07/24/%E5%86%85%E7%BD%91%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>如何调试springboot定时调度任务</title>
      <link>http://lh728.github.io/2023/06/27/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95springboot%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/</link>
      <guid>http://lh728.github.io/2023/06/27/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95springboot%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/</guid>
      <pubDate>Mon, 26 Jun 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;最近在做企业开发的时候，有个需求需要我对发送邮件的定时调度任务做调整和优化。&lt;/p&gt;
&lt;h2 id=&quot;Scheduled-定时调度任务&quot;&gt;&lt;a href=&quot;#Scheduled-定时调度任务&quot; class=&quot;headerlink&quot; title=&quot;@Scheduled 定时调</description>
        
      
      
      
      <content:encoded><![CDATA[<p>最近在做企业开发的时候，有个需求需要我对发送邮件的定时调度任务做调整和优化。</p><h2 id="Scheduled-定时调度任务"><a href="#Scheduled-定时调度任务" class="headerlink" title="@Scheduled 定时调度任务"></a>@Scheduled 定时调度任务</h2><p>已经完成的发送邮件定时调度任务大概长这样：</p><p>首先，思考内部类是怎么运行的。我们知道在内部类编译成功后，它会产生一个新的class文件。</p><p>该class文件仅仅只保留了对外部类的引用。</p><p>举个例子，当外部类传入的参数需要被内部类调用时，直接看起来好像就是被直接调用的： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailScheduled</span>&#123;<br>    <br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0 23 * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">emailSend</span><span class="hljs-params">()</span>&#123;<br>        ...       <br>        <br>    &#125;        <br>&#125;<br><br></code></pre></td></tr></table></figure><p>优化调整的困难点在于debug麻烦：</p><ul><li>目前的开发环境的代码并没有设置统一接口来通过前端调试后端定时任务</li><li>如果通过修改cron来调试，需要重启项目，更重要的是会发很多骚扰邮件出去</li><li>还有一个思路是在测试代码里面调用方法，但是也很麻烦</li></ul><p>实际上还有一个比较简洁的思路，重写*<code>InitialzingBean</code><em>类的</em><code>afterPropertiesSet</code>*方法。</p><p>spring初始化bean的时候，如果bean实现了*<code>InitializingBean</code><em>接口，会自动调用</em><code>afterPropertiesSet</code>*方法，所以可以想到，通过这样的方式，就可以通过重启打断点进行调试了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailScheduled</span>&#123;<br>    <br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0 23 * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">emailSend</span><span class="hljs-params">()</span>&#123;<br>        ...             <br>    &#125; <br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        emailSend();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>是不是很简单？当然，这可能不是最优解，但是如果只在项目中短暂使用，也是问题不大的。</p>]]></content:encoded>
      
      
      <category domain="http://lh728.github.io/categories/%E5%90%8E%E7%AB%AF/">后端</category>
      
      
      <category domain="http://lh728.github.io/tags/Java/">Java</category>
      
      
      <comments>http://lh728.github.io/2023/06/27/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95springboot%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>IDEA如何快速添加JavaDoc文档注释</title>
      <link>http://lh728.github.io/2023/06/22/IDEA%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0JavaDoc%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/</link>
      <guid>http://lh728.github.io/2023/06/22/IDEA%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0JavaDoc%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/</guid>
      <pubDate>Wed, 21 Jun 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;作为程序员，添加javadoc注释可以说是必要的一步，但是每一次都自己手动添加大段内容也无疑是一件很麻烦的事情。&lt;/p&gt;
&lt;p&gt;该文章主要做个记录，方便自己下次如果需要换环境的时候重新配置：&lt;/p&gt;
&lt;p&gt;（这里的方法是idea自动生成的，不需要安装插件）&lt;/p&gt;
&lt;h2 </description>
        
      
      
      
      <content:encoded><![CDATA[<p>作为程序员，添加javadoc注释可以说是必要的一步，但是每一次都自己手动添加大段内容也无疑是一件很麻烦的事情。</p><p>该文章主要做个记录，方便自己下次如果需要换环境的时候重新配置：</p><p>（这里的方法是idea自动生成的，不需要安装插件）</p><h2 id="类、接口注释"><a href="#类、接口注释" class="headerlink" title="类、接口注释"></a>类、接口注释</h2><ol><li>File–&gt;settings–&gt;Editor–&gt;File and Code Templates–&gt;Files–&gt;Class</li><li>在模板上加入文档注释模板：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  *<span class="hljs-doctag">@ClassName</span> $&#123;NAME&#125;</span><br><span class="hljs-comment">  *<span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment">  *<span class="hljs-doctag">@Author</span> $&#123;USER&#125;</span><br><span class="hljs-comment">  *<span class="hljs-doctag">@DATE</span> $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="hljs-comment">  *<span class="hljs-doctag">@Version</span> 1.0 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">$</span>&#123;Name&#125;&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>完成之后以后每次创建类或者接口的时候就会自动生成注释了</p><h2 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h2><ol><li>File–&gt;Settings–&gt;Editor–&gt;Live Templates</li><li>单击右侧“+”号，选择Template Group…，新建一个自定义模板组，可以使用自己的名字命名；</li><li>选择该模板组，单击右侧“+”号，选择“Live TempLate”，设置“abbreviation”的值为”*”；</li><li>设置模板内容：选择Temple Text，在下方输入如下代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">*<br> * <span class="hljs-meta">@Author</span> $user$<br> * <span class="hljs-meta">@Description</span> <span class="hljs-comment">//TODO</span><br> * <span class="hljs-meta">@Date</span> $time$ $date$<br> * <span class="hljs-meta">@Param</span> $param$<br> * <span class="hljs-meta">@return</span> $<span class="hljs-keyword">return</span>$<br> **/<br></code></pre></td></tr></table></figure><ol start="5"><li>设置该模板在哪些文件生效，选择下方的define -&gt; everywhere -&gt; java，设置只在java文件中生效</li><li>选择右侧的Edit variables按钮，进行如下配置：</li></ol><p><img src="/images/IDEA%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0JavaDoc%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/%E6%B3%A8%E9%87%8A%EF%BC%881%EF%BC%89.png" alt="注释图片"></p><ol start="7"><li>使用&#x2F;<em>+刚设置的模板名（此处为我们前面设置的“ * ”）+tab（默认模板补全快捷键，在上方的“By default expand with”设置），所以此时我们使用&#x2F;</em>* + tab就能补全，效果如下:</li></ol><p><img src="/images/IDEA%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0JavaDoc%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/%E6%B3%A8%E9%87%8A%EF%BC%882%EF%BC%89.png" alt="注释图片2"></p><p>至此，配置完成</p><hr>]]></content:encoded>
      
      
      <category domain="http://lh728.github.io/categories/%E5%90%8E%E7%AB%AF/">后端</category>
      
      
      <category domain="http://lh728.github.io/tags/java/">java</category>
      
      
      <comments>http://lh728.github.io/2023/06/22/IDEA%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0JavaDoc%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>项目记录——企业需求</title>
      <link>http://lh728.github.io/2023/06/19/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/</link>
      <guid>http://lh728.github.io/2023/06/19/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/</guid>
      <pubDate>Sun, 18 Jun 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这里将会记录一些我在企业开发中的一些项目需求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;——————————————-快速检索和翻页请见右侧目录—————————–&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;——————————————-快速检索和翻页请见右侧目录————</description>
        
      
      
      
      <content:encoded><![CDATA[<p>这里将会记录一些我在企业开发中的一些项目需求</p><p><strong>——————————————-快速检索和翻页请见右侧目录—————————–&gt;</strong></p><p><strong>——————————————-快速检索和翻页请见右侧目录—————————–&gt;</strong></p><p><strong>——————————————-快速检索和翻页请见右侧目录—————————–&gt;</strong></p><hr><h2 id="Redisson分布式锁"><a href="#Redisson分布式锁" class="headerlink" title="Redisson分布式锁"></a>Redisson分布式锁</h2><hr><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>最近自己做项目的时候，需要对一个查询菜单项目的缓存加锁，以优化查询性能。但是后续由于搭建了Redis集群的原因，多线程锁不能满足需求了（多线程锁只能锁住当前JVM，没办法锁住集群其他JVM），需要使用分布式锁完成该性能优化。</p><h3 id="思路与实现"><a href="#思路与实现" class="headerlink" title="思路与实现"></a>思路与实现</h3><p>下面是我本来的代码，用于实现多线程锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catalog2Vo&gt;&gt; <span class="hljs-title function_">getCtegoryJsonFromDbWithRedisLock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// distributed lock</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    redisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, uuid, <span class="hljs-number">100</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;lock&quot;</span>))) &#123;<br>        <span class="hljs-comment">// if lock is empty, wait and try again</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> getCategoryJsonFromDbWithRedisLock();<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        Map&lt;String, List&lt;Catalog2Vo&gt;&gt; categoryJsonFromDB;<br>        <span class="hljs-keyword">try</span>&#123;<br>            categoryJsonFromDB = getCategoryJsonFromDB();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// lua script, release lock</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redisTemplate.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;(script, Long.class), List.of(<span class="hljs-string">&quot;lock&quot;</span>), uuid);<br>        &#125;<br>        <span class="hljs-keyword">return</span> categoryJsonFromDB;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里具体做了这些事：</p><ol><li>生成一个唯一的UUID作为锁的值。</li><li>使用Redis的<code>setIfAbsent</code>方法尝试获取锁，如果成功获取锁则返回true，否则返回false。在这里，设置了一个100秒的锁过期时间。</li><li>如果未能获取到锁（即<code>get(&quot;lock&quot;)</code>返回了空），则等待100毫秒后重新尝试获取锁，直到成功获取到为止。</li><li>如果获取到了锁，则执行数据库操作，获取分类信息。</li><li>最后，通过执行一段Lua脚本释放锁。该脚本首先检查锁的值是否与当前的UUID相匹配，如果匹配则删除锁，释放资源。这一步确保了只有持有锁的线程或实例才能释放锁，避免了错误释放他人持有的锁。</li></ol><p>现在需要将该部分内容修改为分布式锁，手写分布式锁既繁琐又容易出错，因此我这里选择直接用现成的已有的成熟方案：Redisson的分布式锁完成这部分修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catalog2Vo&gt;&gt; <span class="hljs-title function_">getCategoryJsonFromDbWithRedissonLock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// distributed lock</span><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;CategoryJson-lock&quot;</span>);<br>    lock.lock(<span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>    Map&lt;String, List&lt;Catalog2Vo&gt;&gt; categoryJsonFromDB;<br>    <span class="hljs-keyword">try</span>&#123;<br>        categoryJsonFromDB = getCategoryJsonFromDB();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">return</span> categoryJsonFromDB;<br>&#125;<br></code></pre></td></tr></table></figure><p>Redisson配置完成后，getLock方法可以直接设置一个分布式锁，极大简化了代码，提升了效率。</p><p>Redisson实现分布式锁，是利用了 Redis 的原子性操作和发布&#x2F;订阅功能来实现分布式环境下的可靠锁定机制。</p><ol><li><strong>基于 Redis 的原子操作</strong>：Redisson 利用 Redis 的原子性操作来实现分布式锁。Redis 的 <code>SETNX</code> 命令可以将键设置为具有指定值的字符串，但仅在键不存在时。这意味着只有一个客户端能够成功地将键设置为具有锁定值的状态。</li><li><strong>锁超时和自动续期</strong>：Redisson 允许设置锁的超时时间。如果获取锁的客户端在指定的时间内未能释放锁，Redisson 将自动释放该锁。此外，Redisson 支持自动续期锁的超时时间，以防止锁的持有者因为业务逻辑导致操作时间过长而导致锁过期。</li><li><strong>监视锁的释放</strong>：Redisson 使用 Redis 的发布&#x2F;订阅功能来监视锁的释放。当锁被释放时，Redisson 会向订阅了锁的客户端发送消息，以便其他等待获取锁的客户端能够尝试获取锁。</li><li><strong>可重入性</strong>：Redisson 支持可重入锁，即同一个线程可以多次获取同一把锁而不会出现死锁。</li><li><strong>Fairness（公平性）</strong>：Redisson 提供了公平锁和非公平锁两种模式。在公平锁模式下，锁将按照获取锁的请求顺序进行分配；而在非公平锁模式下，锁将被立即分配给等待队列中的任何一个线程。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，加深了对一些辅助工具例如Redisson的使用，对于锁的使用也加深了理解。这类问题也可以使用Spring Cache解决，但是细化的要求还是使用Redisson手动加锁更合适。</p><hr><h2 id="表格单元格合并、动态列与Excel导出"><a href="#表格单元格合并、动态列与Excel导出" class="headerlink" title="表格单元格合并、动态列与Excel导出"></a>表格单元格合并、动态列与Excel导出</h2><hr><h3 id="需求描述-1"><a href="#需求描述-1" class="headerlink" title="需求描述"></a>需求描述</h3><p>最近我又制作了一个新的报表：人员追溯表（PersonnelTraceability），这个报表需要记录某个项目下面的某个线体下面的某个岗位的员工工作情况。举例来讲，如下图所示，项目A下面可能会有两个线体：Assembly和Production, 每个线体还对应了一个jobName。另外注意，一个项目下面的一个线体的一个岗位可能有多个人，对于这种情况，需要把所有人都显示出来，这些人按照逗号分隔。</p><p>报表还支持项目、线体的下拉搜索，开始结束日期的选取以及员工ID和姓名的模糊搜索。</p><p>除此之外，表格会根据选择的日期进行纵向展开，这也就意味着动态列名的生成：即图中 2023&#x2F;1&#x2F;1- 2023&#x2F;1&#x2F;5 这样的列生成，但是project&#x2F; line&#x2F;job这样的列式固定的。</p><p>最后，该报表还需要支持搜索、重置和Excel导出功能。</p><p><img src="/images/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82%EF%BC%885%EF%BC%89.png" alt="表格单元格合并与动态列"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>这个需求有很多功能点，其中的核心难点是什么呢？</p><ul><li><p>如何处理动态列的展示？</p></li><li><p>单元格如何合并？</p></li><li><p>Excel导出怎么实现？</p></li></ul><h3 id="思路与实现-1"><a href="#思路与实现-1" class="headerlink" title="思路与实现"></a>思路与实现</h3><h4 id="后端与SQL"><a href="#后端与SQL" class="headerlink" title="后端与SQL"></a>后端与SQL</h4><p>在进行这些问题的处理之前，先要规定好后端的传值逻辑。</p><p>在这里，我们将会使用如下的<code>findDetail</code>后端方法用于返回后端数据，其Controller类如下所示： </p><p>(<code>exportExcel</code> 方法会在后面讲excel导出的时候使用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/personnelTraceability&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonnelTraceabilityController</span> &#123;<br>    <span class="hljs-keyword">final</span> PersonnelTraceabilityService personnelTraceabilityService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PersonnelTraceabilityController</span><span class="hljs-params">(PersonnelTraceabilityService personnelTraceabilityService)</span>&#123;<br>        <span class="hljs-built_in">this</span>.personnelTraceabilityService = personnelTraceabilityService;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/findDetail&quot;)</span><br>    <span class="hljs-keyword">public</span> WebResult&lt;PageResult&lt;Map&lt;String,Object&gt;&gt;&gt; <span class="hljs-title function_">findDetail</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PersonnelTraceabilityDTO queryParam)</span>&#123;<br>        PageResult&lt;Map&lt;String,Object&gt;&gt; pageResult = personnelTraceabilityService.findDeatil(queryParam);<br>        <span class="hljs-keyword">return</span> WebResult.ok(pageResult);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/exportExcel&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportExcel</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> <span class="hljs-meta">@RequestBody</span> PersonnelTraceabilityDTO queryParams, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        personnelTraceabilityService.exportExcel(queryParams, response);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到，<code>findDetail</code>方法的返回值是一个<code>PageResult&lt;Map&lt;String,Object&gt;&gt;</code>，对于PageResult类就不赘述了，大致用途就是提供<code>page</code>和<code>limit</code>属性用于分页，重点在于返回的<code>Map&lt;String,Object&gt;</code>。</p><p>那么问题来了，这里的<code>Map&lt;String,Object&gt;</code> 究竟接收到了什么数据？</p><p>要回答这个问题，需要分析怎么做数据库交互的，即SQL查询语句。我们的数据来源于一个表 New_Base_Call_Names, 该表主要列如下所示：</p><table><thead><tr><th align="center">id</th><th align="center">project_Name</th><th align="center">Line_Name</th><th align="center">job_Name</th><th align="center">EmployeeId</th><th align="center">EmployeeName</th><th align="center">D_date</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">A</td><td align="center">Assembly</td><td align="center">PM</td><td align="center">1259539</td><td align="center">Jack</td><td align="center">2023-08-09</td></tr><tr><td align="center">2</td><td align="center">A</td><td align="center">Production</td><td align="center">QCI</td><td align="center">1659467</td><td align="center">Julia</td><td align="center">2023-08-10</td></tr><tr><td align="center">3</td><td align="center">B</td><td align="center">Production</td><td align="center">QCI</td><td align="center">1659467</td><td align="center">Julia</td><td align="center">2023-08-12</td></tr></tbody></table><p>这是一个标准的表数据，基本上存储了所有我们需要的信息，问题在于我们需要把日期横向展示作为列名，而不是像现在这样只存储在行数据里面。于是，很自然我们能想到使用 <strong>pivot</strong> 即转置函数。</p><p>但是，Oracle sql确实支持 pivot 转置，但是要求提前知道要将哪些列转换为行，因此它不直接支持动态列名。PIVOT函数的语法要求你在查询中指定要转换为行的列，并在查询中明确列出这些列的名称。</p><p>所以，我们只能在Java代码里面完成SQL 语句的拼接来完成这个任务。</p><p>首先我们创建一个DTO类存放前端传来的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> PersonnelTraceabilityDTO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> lhj</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@DATE</span> 2023/10/22 1:56</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonnelTraceabilityDTO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageParam</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String projectCode;<br>    <span class="hljs-keyword">private</span> String lineCode;<br>    <span class="hljs-keyword">private</span> String employeeId;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String beginDate; <span class="hljs-comment">// use to generate dynamic column</span><br>    <span class="hljs-keyword">private</span> String endDate;<span class="hljs-comment">// use to generate dynamic column</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>要在Java中完成该任务，首先明确动态列将是什么？在这里，动态生成的列应该是日期，也就是说，用户在前端选择的日期会作为参数传递到SQL语句中，用户选择的日期当然只有开始日期和结束日期，因此这里我们需要把开始日期和结束日期中间每一天的日期都取出来存放在一个List里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title function_">getDateList</span><span class="hljs-params">(LocalDate startDate, LocalDate endDate)</span> &#123;<br>    ArrayList&lt;String&gt; dateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">currentDate</span> <span class="hljs-operator">=</span> startDate;<br>    <span class="hljs-keyword">while</span> (!currentDate.isAfter(endDate))&#123;<br>        dateList.add(currentDate.format(DateTimeFormatter.ISO_DATE));<br>        currentDate = currentDate.plusDays(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dateList;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的dateList将会在下面的代码中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getSql</span><span class="hljs-params">(PersonnelTraceabilityDTO queryParam, List&lt;String&gt; dateList)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> SqlUtils.formatSql(<span class="hljs-string">&quot;select * from (select distinct &quot;</span> +<br>            <span class="hljs-string">&quot;project_Name as projectName&quot;</span> +<br>            <span class="hljs-string">&quot;Line_Name as lineName,&quot;</span> +<br>            <span class="hljs-string">&quot;job_Name as jobName,&quot;</span> +<br>            <span class="hljs-string">&quot;EmployeeId || &#x27;/&#x27; || EmployeeName as employeeInfo,&quot;</span> +<br>            <span class="hljs-string">&quot;D_date,&quot;</span> +<br>            <span class="hljs-string">&quot;from NEW_BASE_CALL_NAMES&quot;</span> +<br>            <span class="hljs-string">&quot;where employeeId is not null&quot;</span> +<br>            (StringUtils.isNotEmpty(queryParam.getProjectCode()) ? <span class="hljs-string">&quot; and project_code = &#x27;&quot;</span> + queryParam.getProjectCode() + <span class="hljs-string">&quot;&#x27;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) +<br>            (StringUtils.isNotEmpty(queryParam.getLineCode()) ? <span class="hljs-string">&quot; and line_code = &#x27;&quot;</span> + queryParam.getLineCode() + <span class="hljs-string">&quot;&#x27;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) +<br>            (StringUtils.isNotEmpty(queryParam.getEmployeeId()) ? <span class="hljs-string">&quot; and employeeId like &#x27;%&quot;</span> + queryParam.getProjectCode() + <span class="hljs-string">&quot;%&#x27;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) +<br>            (StringUtils.isNotEmpty(queryParam.getName()) ? <span class="hljs-string">&quot; and name like &#x27;%&quot;</span> + queryParam.getName() + <span class="hljs-string">&quot;%&#x27;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) +<br>            <span class="hljs-string">&quot;and d_date &gt;= &#x27;&quot;</span> + queryParam.getBeginDate() + <span class="hljs-string">&quot;&#x27; and d_date &lt;= &#x27;&quot;</span> + queryParam.getEndDate() +<br>        <span class="hljs-string">&quot;&#x27; ) pivot (listagg(employeeInfo, &#x27;,&#x27;) with group (order by employeeInfo) for d_date in &quot;</span> +<br>        Tools.listToStr(dateList) + <span class="hljs-string">&quot;)&quot;</span>);<br>    <span class="hljs-keyword">return</span> sql;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述拼接语句中，使用了三元运算符，例如 <code>StringUtils.isNotEmpty(queryParam.getProjectCode()</code> 即对部分参数的非空判断，如果不为空才在where语句中进行判断，如果为空则在sql字符串中拼接 “”。另外，对于动态列名的生成，值得注意的是，在Oracle sql中，pivot的使用需要给每一个转置后的列名加上单引号，举个例子，pivot的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> Region, <span class="hljs-keyword">Month</span>, Sales <span class="hljs-keyword">FROM</span> sales)<br>PIVOT (<span class="hljs-built_in">SUM</span>(Sales) <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">Month</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Jan&#x27;</span> , <span class="hljs-string">&#x27;Feb&#x27;</span> , <span class="hljs-string">&#x27;Mar&#x27;</span> ));<br></code></pre></td></tr></table></figure><p>因此，我们使用了<code>Tools.listToStr</code>的方法处理动态数据，将传入的List<String> 的每个元素两边都加上单引号，再用逗号分隔拼接在一起。具体的方法这里就不详细展开了。</p><p>除此之外，由于需求还需要把多个人的姓名和工号组合在一起并通过逗号分隔，所以这里还使用了 <code>EmployeeId || &#39;/&#39; || EmployeeName as employeeInfo</code> 拼接字符，再通过 <code>pivot (listagg(employeeInfo, &#39;,&#39;) with group (order by employeeInfo) for d_date in</code> 分隔每个员工。</p><p>总而言之，通过下面的代码执行SQL并分页之后，传给前端的格式就确定了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageResult&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">findDeatil</span><span class="hljs-params">(PersonnelTraceabilityDTO queryParam)</span> &#123;<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">startDate</span> <span class="hljs-operator">=</span> LocalDate.parse(queryParam.getBeginDate(), DateTimeFormatter.ISO_DATE);<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">endDate</span> <span class="hljs-operator">=</span> LocalDate.parse(queryParam.getEndDate(), DateTimeFormatter.ISO_DATE);<br><br>    List&lt;String&gt; dateList = getDateList(startDate,endDate);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> getSql(queryParam,dateList);<br>    <span class="hljs-type">PageRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> DefaultPageRequest.of(queryParam.getPage(),queryParam.getLimit);<br>    PageResult&lt;Map&lt;String, Object&gt;&gt; result = getSqlManager().execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLReady</span>(sql), Map.class, request);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的Map格式如下：</p><table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>projectName</td><td>A</td></tr><tr><td>lineName</td><td>…</td></tr><tr><td>jobName</td><td>…</td></tr><tr><td>‘2023-08-09’</td><td>…</td></tr><tr><td>‘2023-08-10’</td><td>…</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>以上就是Map 是后端即将传给前端的数据了。</p><h4 id="动态列展示"><a href="#动态列展示" class="headerlink" title="动态列展示"></a>动态列展示</h4><p>现在，前端接收参数，并把分页后的数据存放进 <code>dataList</code> ，把数据总数存放进 <code>total</code>: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">handleList</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">true</span>;<br>            personTraceApi.<span class="hljs-title function_">findDetail</span>(&#123;<br>                <span class="hljs-attr">projectCode</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">projectCode</span>,<br>                <span class="hljs-attr">lineCode</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">lineCode</span>,<br>                <span class="hljs-attr">beginDate</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">beginDate</span>,<br>                <span class="hljs-attr">endDate</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">endDate</span>,<br>                <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">name</span>,<br>                <span class="hljs-attr">employeeId</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">employeeId</span>,<br>                <span class="hljs-attr">page</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">page</span>,<br>                <span class="hljs-attr">limit</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">limit</span>,<br>            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>,&#123;<br>                    <span class="hljs-attr">dataList</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>,<br>                    <span class="hljs-attr">total</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">totalRow</span><br>                &#125;);<br>            &#125;);<br>        &#125;<br></code></pre></td></tr></table></figure><p>现在，我们可以想象到，一个 <code>List&lt;Map&lt;String,Object&gt;&gt;</code>已经被存放在了 <code>this.dataTable.dataList</code> 里面了，现在我们要思考，怎么把这样的结果显示在前端。</p><p>其实很简单，element-ui支持这样的操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;el-table-column<br>    v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;columnn in dynamicColumns&quot;</span><br>    :key=<span class="hljs-string">&quot;columnn.index&quot;</span><br>    :prop=<span class="hljs-string">&quot;column&quot;</span><br>    :label=<span class="hljs-string">&quot;column&quot;</span><br>    width=<span class="hljs-string">&quot;100px&quot;</span><br>&gt;&lt;/el-table-column&gt; <br></code></pre></td></tr></table></figure><p>通过 v-for 遍历一个数组，作为每一个列来展示。</p><p>因此，我们可以想到，只需要把每次后端出来的数据里面的map的key都存放在<code>dynamicColumns</code>中就可以每次都动态展示出来了。但是，其实有一个更简单的方法，虽然我们的列数量确实是动态的，但是实际上有哪些列需要被展示是可以被基本确定的——用户需要首先选择日期，因此，实际上把选择的日期范围作为动态列的范围即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">generateDateRange</span>(<span class="hljs-params">startdate,enddate</span>)&#123;<br>    <span class="hljs-keyword">const</span> startdate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(startdate);<br>    <span class="hljs-keyword">const</span> enddate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(endDate);<br>    <span class="hljs-keyword">const</span> dateArray = [];<br>    <span class="hljs-keyword">const</span> currentDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(startdate);<br>    <span class="hljs-comment">// Loop through each day and convert it to a string.</span><br>    <span class="hljs-keyword">while</span>(currentDate &lt;= enddate)&#123;<br>        <span class="hljs-keyword">const</span> formattedDate = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">formatDate</span>(currentDate);<br>        dateArray.<span class="hljs-title function_">push</span>(formattedDate);<br>        currentDate.<span class="hljs-title function_">setDate</span>(currentDate.<span class="hljs-title function_">getDate</span>() + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dateArray;<br>&#125;,<br></code></pre></td></tr></table></figure><p>通过上述方程，假设用户选择 2023-08-08 至 2023-08-10，则 <code>dateArray = [2023-08-08,2023-08-09,2023-08-10]</code>。把该值放进 <code>dynamicColumns</code> 即可，handleList() 方法可以拓展为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">handleList</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">true</span>;<br>            personTraceApi.<span class="hljs-title function_">findDetail</span>(&#123;<br>                <span class="hljs-attr">projectCode</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">projectCode</span>,<br>                <span class="hljs-attr">lineCode</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">lineCode</span>,<br>                <span class="hljs-attr">beginDate</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">beginDate</span>,<br>                <span class="hljs-attr">endDate</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">endDate</span>,<br>                <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">name</span>,<br>                <span class="hljs-attr">employeeId</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">employeeId</span>,<br>                <span class="hljs-attr">page</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">page</span>,<br>                <span class="hljs-attr">limit</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">limit</span>,<br>            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>,&#123;<br>                    <span class="hljs-attr">dataList</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>,<br>                    <span class="hljs-attr">total</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">totalRow</span><br>                &#125;);<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dynamicColumns</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">generateDateRange</span>(<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">beginDate</span>,<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">endDate</span>,<br>                );<br>            &#125;);<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="单元格合并"><a href="#单元格合并" class="headerlink" title="单元格合并"></a>单元格合并</h4><p>动态列的问题我们解决了，现在思考如何实现表格行数据的单元格合并。</p><p>首先， element-ui 是支持单元格合并的，不过需要我们自己配置合并函数在 <code>:span-method</code> 里面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;el-table<br>    :data=<span class="hljs-string">&quot;this .dataTable.dataList&quot;</span><br>    style=<span class="hljs-string">&quot;width: 100%&quot;</span><br>    :span-method=<span class="hljs-string">&quot;arraySpanMethod&quot;</span><br>    border<br>    :header-cell-style=<span class="hljs-string">&quot;&#123;&#x27;text-align&#x27;:&#x27;center&#x27;&#125;&quot;</span><br>    :v-loading=<span class="hljs-string">&quot;this.dataTable.loading&quot;</span>            <br>    &gt;<br>&lt;/el-table&gt;<br></code></pre></td></tr></table></figure><p>合并函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// cell merged</span><br><span class="hljs-title function_">arraySpanMethod</span>(<span class="hljs-params">&#123;row,column,rowIndex,columnIndex&#125;</span>)&#123;<br>    <span class="hljs-comment">// determine whether current column is first column (project)</span><br>    <span class="hljs-keyword">if</span> (columnIndex == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> _row = <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr</span>[rowIndex]<br>        <span class="hljs-keyword">const</span> _col = _row &gt; <span class="hljs-number">0</span>? <span class="hljs-number">1</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">rowspan</span>: _row,<br>            <span class="hljs-attr">colspan</span>: _col<br>        &#125;;<br>    &#125;<br>    <span class="hljs-comment">// determine whether current column is second column (line)</span><br>        <span class="hljs-keyword">if</span> (columnIndex == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">const</span> _row2 = <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr2</span>[rowIndex]<br>        <span class="hljs-keyword">const</span> _col2 = _row2 &gt; <span class="hljs-number">0</span>? <span class="hljs-number">1</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">rowspan</span>: _row2,<br>            <span class="hljs-attr">colspan</span>: _col2<br>        &#125;;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>函数接受一个包含信息的参数对象，包括 <code>row</code>（当前行名）、<code>column</code>（当前列名）、<code>rowIndex</code>（当前行索引）和 <code>columnIndex</code>（当前列索引）。</p><p>在代码中，首先检查 <code>columnIndex</code> 是否为0。如果是，它执行接下来的逻辑进行行合并。</p><p>如果 <code>columnIndex</code> 是0，它会检查一个名为 <code>spanArr</code> 的数组（或类似结构）来获取该行中当前列需要合并的行数和列数。然后，它将这些合并信息作为一个对象返回，包括 <code>rowspan</code>（行合并数）和 <code>colspan</code>（列合并数）。</p><p>接着，代码类似地检查 <code>columnIndex</code> 是否为1，以确定第二列（line）是否需要进行行合并和列合并。这部分的逻辑与第一部分类似。</p><p>而spanArr 数组通过以下的方式获得：（其实就是对数据进行判断，如果相等为1不相等为0）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Obtain the array of cells that need to be merged.</span><br><span class="hljs-title function_">getSpanArr</span>(<span class="hljs-params">data</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; data.<span class="hljs-property">length</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr</span> = []<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr2</span> = []<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr2</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">pos</span> = <span class="hljs-number">0</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">pos2</span> = <span class="hljs-number">0</span><br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// Determine if the current element is equal to the previous element</span><br>            <span class="hljs-keyword">if</span> (data[i].<span class="hljs-property">projectName</span> === data[i - <span class="hljs-number">1</span>].<span class="hljs-property">projectName</span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">pos</span>] += <span class="hljs-number">1</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">0</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">pos</span> = i<br>            &#125;<br>            <span class="hljs-keyword">if</span> (data[i].<span class="hljs-property">lineName</span> === data[i - <span class="hljs-number">1</span>].<span class="hljs-property">lineName</span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr2</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">pos2</span>] += <span class="hljs-number">1</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr2</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">0</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">spanArr2</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">pos2</span> = i<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>使用一个循环来遍历数据数组 <code>data</code>。</p><p>在第一个迭代（<code>i</code> 等于0）中，初始化 <code>spanArr</code> 和 <code>spanArr2</code> 为一个包含一个元素的数组，该元素的值为1。然后初始化 <code>pos</code> 和 <code>pos2</code> 为0。</p><p>对于后续迭代（<code>i</code> 大于0），它检查当前元素（<code>data[i]</code>）与前一个元素（<code>data[i - 1]</code>）是否满足特定条件。这些条件涉及到数据的某些属性，比如 <code>projectName</code> 和 <code>lineName</code>。</p><p>如果当前元素的 <code>projectName</code> 与前一个元素相同，表示需要进行行合并，因此在 <code>spanArr</code> 数组中对应的位置的值加1，并在 <code>spanArr</code> 中添加一个0，以表示需要列合并。</p><p>否则，如果 <code>projectName</code> 不同，表示需要在下一个单元格开始一个新的行，因此在 <code>spanArr</code> 中添加一个1，并更新 <code>pos</code> 为当前迭代的索引 <code>i</code>。类似的逻辑使用于 spanArr2，即lineName列</p><p>至此，我们完成了行数据的合并：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">handleList</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">true</span>;<br>            personTraceApi.<span class="hljs-title function_">findDetail</span>(&#123;<br>                <span class="hljs-attr">projectCode</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">projectCode</span>,<br>                <span class="hljs-attr">lineCode</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">lineCode</span>,<br>                <span class="hljs-attr">beginDate</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">beginDate</span>,<br>                <span class="hljs-attr">endDate</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">endDate</span>,<br>                <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">name</span>,<br>                <span class="hljs-attr">employeeId</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">employeeId</span>,<br>                <span class="hljs-attr">page</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">page</span>,<br>                <span class="hljs-attr">limit</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">limit</span>,<br>            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>,&#123;<br>                    <span class="hljs-attr">dataList</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>,<br>                    <span class="hljs-attr">total</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">totalRow</span><br>                &#125;);<br>                <span class="hljs-keyword">const</span> modifiedData = [];<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">dataList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">const</span> modifieditem = &#123;&#125;;<br>                    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(item).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>                        <span class="hljs-comment">// Eliminate single quotes on both sides of a string &#x27;yyyy-mm-dd&#x27; </span><br>                        <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;&#x27;$/</span>.<span class="hljs-title function_">test</span>(key))&#123;<br>                            modifieditem[key.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>)] = item[key];<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            modifieditem[key] = item[key];<br>                        &#125;   <br>                    &#125;);<br>                    modifiedData.<span class="hljs-title function_">push</span>(modifieditem);<br>                &#125;);<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">dataList</span> = modifiedData;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">false</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSpanArr</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">dataList</span>);<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dynamicColumns</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">generateDateRange</span>(<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">beginDate</span>,<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">endDate</span>,<br>                );<br>            &#125;);<br>        &#125;,<br></code></pre></td></tr></table></figure><p>另外，我还在代码中添加了一个逻辑，还记得吗，从后端获取到的数据日期格式是” ‘yyyy-mm-dd’ “格式的，这里的单引号会在前端显示出来，所以我用正则表达式进行匹配并去除了单引号。</p><h4 id="Excel导出"><a href="#Excel导出" class="headerlink" title="Excel导出"></a>Excel导出</h4><p>Excel导出和搜索有点类似，不过区别在于收集到的数据不需要分页，需要进行全量展示。这里的前端代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">handleExport</span>(<span class="hljs-params"></span>)&#123;<br>    personTraceApi.<span class="hljs-title function_">exportExcel</span>(&#123;<br>        <span class="hljs-attr">projectCode</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">projectCode</span>,<br>        <span class="hljs-attr">lineCode</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">lineCode</span>,<br>        <span class="hljs-attr">beginDate</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">beginDate</span>,<br>        <span class="hljs-attr">endDate</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">endDate</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">name</span>,<br>        <span class="hljs-attr">employeeId</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">query</span>.<span class="hljs-property">employeeId</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([res],&#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span><br>        &#125;);<br>        <span class="hljs-keyword">const</span> downloadElemnt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-keyword">const</span> href = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob);<br>        downloadElemnt.<span class="hljs-property">herf</span> = href<br>        downloadElemnt.<span class="hljs-property">download</span> = <span class="hljs-string">&quot;personnelTraceability.xls&quot;</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(downloadElemnt);<br>        downloadElemnt.<span class="hljs-title function_">click</span>();<br>        downloadElemnt.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(downloadElemnt);<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(href);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>一旦请求成功并获取到导出的数据（在 <code>then</code> 部分），数据以二进制流的形式存储在 <code>res</code> 变量中。</li><li>接下来，代码使用 <code>Blob</code> 对象将数据包装成二进制数据，同时设置数据的类型为 Excel 文件，这是通过 <code>type</code> 设置的。</li><li>之后，代码创建一个 <code>&lt;a&gt;</code> 元素（超链接元素），用于触发下载操作。它设置了 <code>href</code> 属性，将之前创建的 Blob 对象的 URL 赋给 <code>href</code>。</li><li>然后，给这个 <code>&lt;a&gt;</code> 元素设置了 <code>download</code> 属性，指定下载时的文件名为 “personnelTraceability.xls”。</li><li>接着，将这个 <code>&lt;a&gt;</code> 元素添加到 <code>document.body</code>，这样它会在页面上占据一个位置。</li><li>通过触发 <code>click</code> 事件，模拟用户点击这个链接，从而触发文件下载操作。</li><li>最后，代码将这个 <code>&lt;a&gt;</code> 元素从 <code>document.body</code> 中移除，以避免在页面上留下不必要的元素。</li><li>最后，调用 <code>window.URL.revokeObjectURL</code> 来释放之前创建的 Blob URL，以释放浏览器资源。</li></ol><p>那么，后端应该做些什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportExcel</span><span class="hljs-params">(PersonnelTraceabilityDTO queryParams, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    List&lt;Map&gt; list = findList(queryParams);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>首先，获取数据是方法的第一步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;Map&gt; <span class="hljs-title function_">findList</span><span class="hljs-params">(PersonnelTraceabilityDTO queryParams)</span> &#123;<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">startDate</span> <span class="hljs-operator">=</span> LocalDate.parse(queryParams.getBeginDate(), DateTimeFormatter.ISO_DATE);<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">endDate</span> <span class="hljs-operator">=</span> LocalDate.parse(queryParams.getEndDate(), DateTimeFormatter.ISO_DATE);<br><br>    List&lt;String&gt; dateList = getDateList(startDate,endDate);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> getSql(queryParams,dateList);<br>    List&lt;Map&gt; result = getSqlManager().execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLReady</span>(sql),Map.class);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法和前面的后端方法几乎一模一样，区别仅仅只是没有使用PageResult接收来进行分页。</p><p>在该项目里，还需要对里面的表头和数据进行翻译（因为初始数据是中文的），这里就不详细讲解翻译的内容了，总而言之，数据和表头都需要单独作为列表展示出来，同时转化为<code>List&lt;List&lt;Object&gt;&gt;</code>的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">private</span> List&lt;List&lt;Object&gt;&gt; <span class="hljs-title function_">getTranslatedData</span><span class="hljs-params">(List&lt;Map&gt; list, Map&lt;String, String&gt; translatedMap, List&lt;String&gt; headers)</span> &#123;<br>      <span class="hljs-comment">// translated and replace single quotes</span><br>...<br>      <span class="hljs-comment">// change data to required List&lt;List&lt;Object&gt;&gt;</span><br>      List&lt;List&lt;Object&gt;&gt; lists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-keyword">for</span> (Map&lt;String,Object&gt; map : list) &#123;<br>          ArrayList&lt;Object&gt; objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; headers.size(); i++) &#123;<br>              objects.add(map.get(headers.get(i)));<br>          &#125;<br>          lists.add(objects);<br>      &#125;<br>      <span class="hljs-keyword">return</span> lists;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">createdHead</span><span class="hljs-params">(List&lt;String&gt; headerMap)</span> &#123;<br>      List&lt;List&lt;String&gt;&gt; headList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-comment">// change headers to required List&lt;List&lt;Object&gt;&gt;</span><br>      <span class="hljs-keyword">for</span> (String head : headerMap) &#123;<br>          ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>          list.add(head);<br>          headList.add(list);<br>      &#125;<br>      <span class="hljs-keyword">return</span> headList;<br>  &#125;<br></code></pre></td></tr></table></figure><p>最后，以下代码会用于导出EXCEL：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportExcel</span><span class="hljs-params">(PersonnelTraceabilityDTO queryParams, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      List&lt;Map&gt; list = findList(queryParams);<br><br>...getTranslatedData...<br><br>      <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>( <span class="hljs-string">&quot;&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      filePath = file.getCanonicalPath();<br>      filePath = filePath +<span class="hljs-string">&quot;/downloadExportTemplate&quot;</span>;<br>      <span class="hljs-keyword">if</span> (!FileUtil.isDirectory(filePath))&#123;<br>          FileUtil.mkdir(filePath);<br>      &#125;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> filePath.concat( <span class="hljs-string">&quot;/personnelTraceability.xls&quot;</span>);<br><br>      <span class="hljs-type">ExcelWriterBuilder</span> <span class="hljs-variable">writerBuilder</span> <span class="hljs-operator">=</span> EasyExcel.write(fileName)<br>              <span class="hljs-comment">// set column width</span><br>              .registerWriteHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleColumnWidthStyleStrategy</span>(<span class="hljs-number">25</span>))<br>              .head(createdHead(headers));<br>      writerBuilder.sheet(<span class="hljs-string">&quot;personnelTraceability&quot;</span>).doWrite(datalist);<br><br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(fileName);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>      response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>      response.setContentType(<span class="hljs-string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span>);<br>      response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment; filename=&quot;</span> + encode);<br>      <span class="hljs-type">HSSFWorkbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>(in);<br>      workbook.write(response.getOutputStream());<br>      in.close();<br>  &#125;<br></code></pre></td></tr></table></figure><ol><li><code>File file = new File(&quot;&quot;);</code>：这一行创建了一个空的 <code>File</code> 对象，实际上并没有指定文件路径。</li><li><code>String filePath = null;</code>：初始化一个字符串变量 <code>filePath</code>。</li><li><code>filePath = file.getCanonicalPath();</code>：这一行获取当前项目或应用程序的工作目录，并将其存储在 <code>filePath</code> 中。</li><li><code>filePath = filePath +&quot;/downloadExportTemplate&quot;;</code>：将字符串 <code>&quot;/downloadExportTemplate&quot;</code> 添加到 <code>filePath</code> 中，用于指定下载文件的目录。</li><li><code>if (!FileUtil.isDirectory(filePath))</code>：检查指定的目录是否存在，如果不存在，执行下面的操作。</li><li><code>FileUtil.mkdir(filePath);</code>：如果目录不存在，创建该目录。这是通过项目中的 <code>FileUtil</code> 类或者第三方库来执行的，这里就不详细解释了。</li><li><code>String fileName = filePath.concat( &quot;/personnelTraceability.xls&quot;);</code>：设置要生成的 Excel 文件的文件名和路径。</li><li><code>ExcelWriterBuilder writerBuilder = EasyExcel.write(fileName)</code>：创建一个 EasyExcel 的写入器，用于将数据写入 Excel 文件。指定了文件名和路径。</li><li><code>.registerWriteHandler(new SimpleColumnWidthStyleStrategy(25))</code>：设置列宽样式，这里指定了列宽为 25。</li><li><code>.head(createdHead(headers))</code>：设置 Excel 表格的表头信息，<code>createdHead(headers)</code> 方法用于创建表头的内容。</li><li><code>writerBuilder.sheet(&quot;personnelTraceability&quot;).doWrite(datalist);</code>：创建一个工作表（sheet）命名为 “personnelTraceability”，并将数据列表 <code>datalist</code> 写入到 Excel 文件中。</li><li><code>InputStream in = new FileInputStream(fileName);</code>：打开生成的 Excel 文件并创建一个输入流。</li><li><code>String encode = URLEncoder.encode(fileName, &quot;UTF-8&quot;);</code>：将文件名进行 URL 编码。</li><li><code>response.setCharacterEncoding(&quot;UTF-8&quot;);</code>：设置 HTTP 响应字符编码为 UTF-8。</li><li><code>response.setContentType(&quot;application/vnd.ms-excel;charset=utf-8&quot;);</code>：设置响应的内容类型为 Excel 文件。</li><li><code>response.setHeader(&quot;Content-Disposition&quot;,&quot;attachment; filename=&quot; + encode);</code>：设置响应头，告诉浏览器这是一个附件，并提供文件名。</li><li><code>HSSFWorkbook workbook = new HSSFWorkbook(in);</code>：创建一个 HSSFWorkbook 对象，用于处理 Excel 文件。</li><li><code>workbook.write(response.getOutputStream());</code>：将 Excel 数据写入 HTTP 响应的输出流，以便浏览器下载。</li><li><code>in.close();</code>：关闭输入流。</li></ol><p>至此，整个需求已基本完成了。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>全部代码可以在Github上看到：</p><p><a href = "https://github.com/lh728/BlogCode/tree/72fb88c591dde967f19cc58fe0756ec0838a2e37/Project%20Records%20-%20Enterprise%20Requirement/Table%20Cell%20Merging%20and%20Dynamic%20Columns" >Github</a></p><p>学习到了新的三类功能的实现思路。</p><hr><h2 id="Oracle表触发器"><a href="#Oracle表触发器" class="headerlink" title="Oracle表触发器"></a>Oracle表触发器</h2><hr><h3 id="需求描述-2"><a href="#需求描述-2" class="headerlink" title="需求描述"></a>需求描述</h3><p>今天有个新的项目需求，这个需求是有关数据库表的，相对简单。</p><p>现在有一个表A，它只记录当天的数据，并且它的数据每五分钟都会进行变化，它会删掉之前的所有数据，再把更新后的数据插入进来。并且尽管表A会删除掉之前的所有数据，但是更新后的数据对于五分钟之前的数据并不会做修改，只是做了添加操作。</p><p><strong>TIPS: 至于说这里为什么不能直接进行添加操作，另一边的大数据部门反馈这里做不到，具体的原因不得而知了。</strong></p><p>总而言之，需要根据目前的需求，做一个触发器，当表A插入数据的时候，把相同的数据插入进表B，但是表B的数据不会删除，并且也不仅仅只保留当天的。另外，对于增量表B，为了避免性能问题，当表A插入的时候需要判断一下，如果新插入的数据表B已经存在了，则不要再插入了。</p><h3 id="思路与实现-2"><a href="#思路与实现-2" class="headerlink" title="思路与实现"></a>思路与实现</h3><p>这里就不得不提一下<code>merger into</code> 这个触发器函数了。</p><p>在Oracle SQL中，<code>MERGE INTO</code>语句用于指定要合并数据的目标表；<code>USING</code> 指定要从中获取数据的源表；<code>ON</code> 指定用于匹配源表和目标表行的条件。如果条件为真，则执行匹配时的UPDATE操作，否则执行不匹配时的INSERT操作；<code>WHEN NOT MATCHED THEN</code> 在源表和目标表之间不存在匹配的情况下执行的操作块。</p><p>很显然，在这里，使用<code>merge into</code> 是能满足要求的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> insert_trigger<br>AFTER <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> A<br><span class="hljs-keyword">REFERENCING</span> <span class="hljs-keyword">OLD</span> <span class="hljs-keyword">AS</span> &quot;OLD&quot; <br><span class="hljs-keyword">NEW</span> <span class="hljs-keyword">AS</span> &quot;NEW&quot;<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">MERGE</span> <span class="hljs-keyword">INTO</span> B<br><span class="hljs-keyword">USING</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> DUAL) <span class="hljs-keyword">ON</span> (B.employeeId <span class="hljs-operator">=</span> :NEW.employeeId <span class="hljs-keyword">and</span> B.date <span class="hljs-operator">=</span> <span class="hljs-keyword">NEW</span>:<span class="hljs-type">date</span>)<br><span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">NOT</span> MATCHED <span class="hljs-keyword">THEN</span><br><span class="hljs-keyword">INSERT</span> (ID,employeeId,<span class="hljs-type">date</span>,...)<br><span class="hljs-keyword">VALUES</span> (:NEW.ID,:NEW.employeeId,:NEW.date,...);<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><p>在上面的代码里面，我们创建了一个触发器 <code>insert_trigger</code>， 它是一个<code>AFTER INSERT</code>触发器，这意味着它会在数据插入到表A之后执行。</p><ol><li>当在表A中插入新数据时，触发器将被激活。</li><li>触发器定义了一个命名引用（REFERENCING），使用OLD代表之前的行（在插入之前的行）和NEW代表新插入的行。</li><li>触发器定义了FOR EACH ROW，这表示它会针对每一行插入操作都执行一次。</li><li>在BEGIN和END之间是触发器的主体逻辑。在这里，触发器使用MERGE语句来处理表B中的数据。</li><li>MERGE INTO语句允许将数据从一个数据源（在这里是SELECT 1 FROM DUAL）合并到目标表B中。在这个例子中，它使用表B作为目标。</li><li>USING子句指定了数据源，这里使用了一个简单的SELECT 1 FROM DUAL。这个子句通常用于指定一个虚拟表或查询，用来提供要插入的数据。</li><li>ON子句定义了合并操作的条件。它使用了一个条件，即B表的employeeId列与插入到A表的新行的employeeId列以及date列与NEW:date相匹配。</li><li>WHEN NOT MATCHED THEN定义了在合并操作中当条件不匹配时要执行的操作。在这里，它执行了插入操作，将新行的数据插入到表B中。（<strong>仅当B表的employeeId列与插入到A表的新行的employeeId列以及date列与NEW:date不匹配的时候</strong>）</li><li>INSERT子句指定了要插入的列和相应的值。这些值来自于新插入到表A中的行（:NEW.ID，:NEW.employeeId，:NEW.date等等）。</li></ol><p>总之，这个触发器的作用是在表A中插入新数据后，检查是否存在符合条件的表B中的数据行，如果条件不匹配，则将新数据插入到表B中。</p><p>至此，我们的触发器实现了。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><blockquote><p>这个需求相对容易很多，主要是学习到了一个新的触发器函数 <code>merge into</code></p></blockquote><hr><hr><h2 id="具有下拉框-x2F-直方图的报表"><a href="#具有下拉框-x2F-直方图的报表" class="headerlink" title="具有下拉框&#x2F;直方图的报表"></a>具有下拉框&#x2F;直方图的报表</h2><hr><p>这是一个新的特别完整的页面报表需求，包含有下拉框设计以及对应的数据收集和限制，以及数据直方图在Vue的显示等。</p><h3 id="需求描述-3"><a href="#需求描述-3" class="headerlink" title="需求描述"></a>需求描述</h3><p>需要构建类似如下的画面，包含的基本功能需求有：</p><p><img src="/images/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82%EF%BC%883%EF%BC%89.png" alt="项目记录-企业需求3"></p><ul><li>下拉框功能实现</li><li>强制先选择项目才能获取line和process</li><li>直方图的实现</li><li>日期选择的实现</li><li>姓名，员工id的input框</li><li>数据表格的实现</li></ul><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>正如在需求描述中所写的一样，需要实现的功能与我的问题高度相关：</p><ul><li><p>下拉框功能应该怎么实现？</p></li><li><p>部门树应该怎么获取？</p></li><li><p>line和process需要先获取项目了再显示，应该怎么做？</p></li><li><p>动态的直方图功能应该怎么实现？</p></li><li><p>日期、姓名、员工id等参数怎么在后端做查询？</p></li><li><p>表格数据应该怎么呈现？</p></li></ul><h3 id="思路与实现-3"><a href="#思路与实现-3" class="headerlink" title="思路与实现"></a>思路与实现</h3><p>这个项目涉及了很多功能的实现，让我们一步一步的思考，这次不会再区分前后端代码，而是围绕需求或者说问题去分析，因为一个功能往往是既涉及前端代码也涉及到后端代码的。如果围绕需求或者说问题去分析，可能更容易理解一点。</p><h4 id="Dept部门树级联选择器"><a href="#Dept部门树级联选择器" class="headerlink" title="Dept部门树级联选择器"></a>Dept部门树级联选择器</h4><p>这一块<strong>我不会详谈</strong>，因为既涉及到了公司隐私，而且也是个已经完成的接口，后端直接调用该接口，传递给前端即可。</p><p>这里的前端代码是利用<strong>element-ui</strong>的cascader实现的，Vue代码如下：</p><p>（注意尽管封装好了一个cust-cascader组件，但是功能和<strong>el-cascader</strong>差不多）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;cust-cascader<br>v-model=<span class="hljs-string">&quot;queryParam.deptCode&quot;</span><br><span class="hljs-keyword">class</span>= <span class="hljs-string">&quot;filter-item&quot;</span> <br>:placeholder=<span class="hljs-string">&quot;Dept&quot;</span><br>:props = <span class="hljs-string">&quot;&#123;value:&#x27;deptId&#x27;,label:&#x27;name&#x27;&#125;&quot;</span><br>:show-all-levels=<span class="hljs-string">&quot;false&quot;</span><br>:options=<span class="hljs-string">&quot;orgTree.treeList&quot;</span><br>ref=<span class="hljs-string">&quot;cascader&quot;</span><br>size=<span class="hljs-string">&quot;mini&quot;</span><br>style=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span><br>/&gt;<br></code></pre></td></tr></table></figure><ul><li><code>v-model</code>绑定的数据是未来会通过前端传递给后端的；</li><li><code>class,style,size</code>等属性用于美化；</li><li><code>show-all-levels</code>属性属于<strong>el-cascader</strong>的一部分，用于确定输入框中是否显示选中值的完整路径（即部门树的完整路径）</li><li><code>placeholder</code>显示文字在框内</li></ul><p>那么这个下拉框的原始数据是从哪里来的呢？——通过options和<code>props</code>组合获取，<code>:options</code>获取的orgTree的treeList，这个treeList是从<code>data</code>属性获取的，<code>data</code>的属性又通过放在<code>created</code>里面的方法实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>&#123;<br>        <span class="hljs-attr">orgTree</span>:&#123;<br>            <span class="hljs-attr">treeList</span>:[],<br>            <span class="hljs-attr">selectId</span>:<span class="hljs-literal">null</span>,<br>            <span class="hljs-attr">defaultProps</span>:&#123;<br>                <span class="hljs-attr">children</span>:<span class="hljs-string">&quot;children&quot;</span>,<br>                <span class="hljs-attr">label</span>:<span class="hljs-string">&quot;label&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;,<br>    <br><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> ...<br><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">handleOrgTreeList</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">getOrgList</span>(&#123;<span class="hljs-attr">orderBy</span>:<span class="hljs-string">&quot;orderNum&quot;</span>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> data = res.<span class="hljs-property">data</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">orgTree</span>.<span class="hljs-property">treeList</span> = data;<br>        &#125;)<br>    &#125;        <br>&#125;,<br>    <br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleOrgTreeList</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.$isNotEmpty(<span class="hljs-variable language_">this</span>.<span class="hljs-property">orgTree</span>.<span class="hljs-property">treeList</span>))&#123;<br>            <span class="hljs-keyword">const</span> firstNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">orgTree</span>.<span class="hljs-property">treeList</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>可见，当组件创建的时候，调用了<code>handleOrgTreeList</code>方法，即调用了后端接口，为orgTree.treeList赋值，然后在DOM渲染完毕后自然放进了级联选择器中显示出来了。</p><h4 id="Project与Type-下拉框"><a href="#Project与Type-下拉框" class="headerlink" title="Project与Type 下拉框"></a>Project与Type 下拉框</h4><p>我们知道，按照正常的设计逻辑，下拉框的内容肯定应该是在用户点击的时候就显示出来，而不是等待用户输入几个字符之后才开始搜索数据并显示，因此这里很自然能想到应该把方法的实现写在created或者mounted里面。</p><p>事实上这两个下拉框的实现逻辑是一样的，我在这里以Type下拉框作为例子展示，Project下拉框和Type下拉框的差距仅仅在SQL查询上。</p><p>这次首先先写后端的内容，后端首先在Controller类里面完成一个很简单的代码逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(&quot;...&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/bi&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseController</span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BaseService baseService;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseController</span><span class="hljs-params">(BaseService baseService)</span>&#123;<br>        <span class="hljs-comment">// Constructor injection. If the code is bloated later, can add @AllArgsConstructora to remove this part</span><br>        <span class="hljs-built_in">this</span>.baseService = baseService;<br>    &#125;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/type&quot;)</span><br>    <span class="hljs-meta">@ApiOperation</span><br>    <span class="hljs-keyword">public</span> WebResult&lt;List&lt;BaseEmployeeEntity&gt;&gt; <span class="hljs-title function_">findType</span><span class="hljs-params">()</span>&#123;<br>        &lt;List&lt;BaseEmployeeEntity&gt;&gt; list = baseService.findType();<br>        <span class="hljs-keyword">return</span> WebResult.ok(list);<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><p>一个GetMapping的方法：</p><p>WebResult如之前所说，是一个封装好的类，用于定制返回值到WSDL的映射。</p><p>BaseEmployeeEntity，则是一个关联数据库的实体类，里面有很多字段，但是我们需要的只是关联type的那个字段，它将用于获取员工类型：A,B,C,D。</p><p>QueryParams类，一个封装的接收前端参数的类。</p><p>接下来，Service层和ServiceImpl层的代码如下所示：（比较基础）</p><p><strong>BaseService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BaseService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SysBaseService</span>&lt;BaseMapper,BaseEmployeeEntity&gt;&#123;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> a list of type field, now (A,B,C,D)</span><br><span class="hljs-comment">*/</span><br>    List&lt;BaseEmployeeEntity&gt; <span class="hljs-title function_">findType</span><span class="hljs-params">()</span>;   <br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>BaseServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SysBaseServiceImpl</span>&lt;BaseMapper,BaseEmployeeEntity&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BaseService</span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;BaseEmployeeEntity&gt; <span class="hljs-title function_">findType</span><span class="hljs-params">()</span>&#123;<br>        LambdaQuery&lt;BaseEmployeeEntity&gt; query = sqlManager.lambdaQuery(BaseEmployeeEntity.class);<br>        <span class="hljs-comment">// deduplication and check not empty</span><br>        List&lt;BaseEmployeeEntity&gt; select = query.andIsNotNull(BaseEmployeeEntity::getType)<br>            .groupBy(BaseEmployeeEntity::getType)<br>            .select(BaseEmployeeEntity::getType);<br>        <span class="hljs-keyword">return</span> select;<br>    &#125;<br></code></pre></td></tr></table></figure><p>Service的实现层，首先通过beetl sql建立了一个sql查询，然后通过andIsNotNull去除了数据表中type列为空的数据，再通过groupBy去重，最后通过select返回，这段代码大致上执行了如下的SQL语句：</p><p>注意这里对表的操作实际上是对BaseEmployeeEntity类关联的表做的操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> type <span class="hljs-keyword">from</span> ...<br><span class="hljs-keyword">where</span> type <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> type<br></code></pre></td></tr></table></figure><p>通过这段SQL，后端返回给前端A,B,C,D这四种员工类型。</p><p>Project下拉框的逻辑与Type基本一致，这里就不赘述了。</p><p>另外值得一提的是前端这部分的显示，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;el-select<br>:placeholder=<span class="hljs-string">&quot;project&quot;</span><br><span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span><br>size=<span class="hljs-string">&quot;mini&quot;</span><br>filterable<br>clearable<br>:loading=<span class="hljs-string">&quot;selectLoading&quot;</span><br>v-model=<span class="hljs-string">&quot;queryParam.projectCode&quot;</span><br>style=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span><br>@change=<span class="hljs-string">&quot;prochange&quot;</span><br>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in projectArr&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.projectCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.projecName&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.projectCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span>                    </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br>&lt;/el-select&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;type&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">filterable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;selectLoading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.type&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in typeArr&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span>                    </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>element-ui有适配的el-select组件帮助我们进行下拉框展示。这里需要注意的是loading属性，是在数据如果加载时间很长的时候启动，会有转圈等待的特效。</p><p>v-model双向绑定的值是未来需要传递给后端用来搜索的值。</p><p>那下拉框的值从哪里来呢？这个值需要从el-option组件里面获取，el-option前端显示的是:label标签的值，其对应的索引是:value的值。以获取Type和project为例，el-option显然是把typeArr和projectArr的值显示到了下拉框里面，它们的值又是通过后端方法获取的，那么，它们在前端是怎么和后端互动的呢？</p><p>这里使用的方法是mapGetters，mapActions，当然也可以选择直接在前端import一个api：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">computed</span>:&#123;<br>        ...<span class="hljs-title function_">mapGetters</span>(&#123;<br>            <span class="hljs-attr">projectArr</span>:<span class="hljs-string">&quot;getProjectArr&quot;</span>,<br>            <span class="hljs-attr">typeArr</span>:<span class="hljs-string">&quot;getType&quot;</span>,<br>        &#125;),<br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>        ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;updateProjectArr&#x27;</span>,<span class="hljs-string">&#x27;updateTypeArr&#x27;</span>]),<br>        <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateProjectArr</span>();<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateTypeArr</span>();<br>        &#125;<br>&#125;,<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>();<br>&#125;,    <br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> projectApi <span class="hljs-keyword">from</span> ...<br><span class="hljs-keyword">import</span> lineProcessApi <span class="hljs-keyword">from</span> ...<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">state</span>:&#123;<br>        <span class="hljs-attr">projectArr</span>:[],<br>        <span class="hljs-attr">projectArrVisited</span>:<span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">typeArr</span>:[],<br>        <span class="hljs-attr">typeArrVisited</span>:<span class="hljs-literal">false</span><br>    &#125;,<br>    <span class="hljs-attr">getters</span>:&#123;<br>        <span class="hljs-attr">getProjectArr</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">projectArr</span>,<br>        <span class="hljs-attr">getTypeArr</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">typeArr</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>:&#123;<br>        <span class="hljs-title function_">setProjectArr</span>(<span class="hljs-params">state,project</span>)&#123;<br>            state.<span class="hljs-property">projectArr</span> = project<br>            state.<span class="hljs-property">projectArrVisited</span> = <span class="hljs-literal">true</span><br>        &#125;,<br>        <span class="hljs-title function_">setTypeArr</span>(<span class="hljs-params">state,type</span>)&#123;<br>            state.<span class="hljs-property">typeArr</span> = type<br>            state.<span class="hljs-property">typeArrVisited</span> = <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>:&#123;<br>        <span class="hljs-title function_">updateProjectArr</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">            commit,</span><br><span class="hljs-params">            state</span><br><span class="hljs-params">        &#125;,ignorant</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!state.<span class="hljs-property">projectArrVisited</span> || ignorant)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">let</span> queryParam = &#123;<br>                        <span class="hljs-attr">query</span>:&#123;<br>                            <span class="hljs-attr">projectCode</span>:<span class="hljs-literal">null</span>,<br>                            <span class="hljs-attr">projectName</span>:<span class="hljs-literal">null</span><br>                        &#125;,<br>                        <span class="hljs-attr">pageSize</span>:<span class="hljs-number">9999</span>,<br>                        <span class="hljs-attr">pageNum</span>:<span class="hljs-number">1</span>,<br>                        <span class="hljs-attr">pageQuery</span>:<span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">fuzzyQuery</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">// default fuzzy query</span><br>                        <span class="hljs-attr">orderby</span>:<span class="hljs-literal">null</span><br>                    &#125;<br>                    projectApi.<span class="hljs-title function_">list</span>(queryParam).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">if</span>(res.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>)&#123;<br>                            <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setProjectArr&#x27;</span>,res.<span class="hljs-property">data</span>)<br>                            <span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>)<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-title function_">reject</span>()<br>                        &#125;<br>                    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-title function_">reject</span>()<br>                    &#125;);<br>                &#125;)<br>            &#125;<br>        &#125;,<br>        <span class="hljs-title function_">updateTypeArr</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">            commit,</span><br><span class="hljs-params">            state</span><br><span class="hljs-params">        &#125;,ignorant</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!state.<span class="hljs-property">typeArrVisited</span> || ignorant)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>                    lineProcessApi.<span class="hljs-title function_">type</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">if</span>(res.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>)&#123;<br>                            <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setTypeArr&#x27;</span>,res.<span class="hljs-property">data</span>)<br>                            <span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>)<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-title function_">reject</span>()<br>                        &#125;<br>                    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-title function_">reject</span>()<br>                    &#125;);<br>                &#125;)<br>            &#125;<br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>其中state和getters用来保存状态；mutations和actions用来改变状态；监听状态用的是Vue组件中的computed属性；module是用来组织整个应用的状态管理代码，使状态划分模块，更易于管理；辅助函数用来在监听状态时候简化代码，createStore则用来创建状态管理对象。</p><p>通过Vuex的mapActions可以直接获取到对应的数据，例如ProjectArr。</p><p>至此，下拉框的功能就实现完毕了。</p><h4 id="有要求的下拉框"><a href="#有要求的下拉框" class="headerlink" title="有要求的下拉框"></a>有要求的下拉框</h4><p>回顾一下我们的需求——除了dept,project和type下拉框，我们还有Line和process下拉框，这两个下拉框的数据有些不同，它必须要先选择了项目，才会出现下拉选项。而且，它还有一些映射关系：</p><ul><li>一个项目可能只有line，这个时候process下拉框没有数据</li><li>一个项目可能只有process，这个时候line下拉框没有数据</li><li>一个项目可能既有line又有process，这个时候两个下拉框都有数据</li></ul><p>同时，这里数据的收集也很有意思，A表中的数据既有line和process，B表只有line的数据，所以假设项目a只有line，则必须在两个表中查询，不过A表可能没有需要的数据，只有B表才有。</p><p>这里在后端的实现与前面并没有什么区别，不过需要使用<code>PostMapping</code>而不是<code>GetMapping</code>了，因为需要接收一个project参数，然后再返回给前端Line和process的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/lineOrProcess&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;lineOrProcess information&quot;)</span><br><span class="hljs-keyword">public</span> WebResult&lt;List&lt;BaseEmployeeEntity&gt;&gt; <span class="hljs-title function_">findLineOrProcess</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> BaseEmployeeEntity queryParam)</span>&#123;<br>    &lt;List&lt;BaseEmployeeEntity&gt;&gt; list = baseService.findLineOrProcess(queryParam);<br>    <span class="hljs-keyword">return</span> WebResult.ok(list);<br>&#125;   <br></code></pre></td></tr></table></figure><p>值得思考的是，我们需要返回什么给数据？</p><p>一个思路是：一个标识符标识这是line还是process，这样我们返回的数据类似这样：</p><table><thead><tr><th>type</th><th>code</th><th>name</th></tr></thead><tbody><tr><td>2</td><td>D1</td><td>process2</td></tr><tr><td>2</td><td>D2</td><td>process3</td></tr><tr><td>3</td><td>S1</td><td>line1</td></tr></tbody></table><p>type为3代表是Line，type为2代表是process，code列用于标识不同的line或者process，而Name列的值用于显示在下拉框。</p><p>有了这个思路，就可以把这个想法在SQL中实现，后端的代码比较简单就不赘述了，serviceImpl调用Mapper方法，mapper方法再调用SQL即可。</p><p>SQL代码如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">findLineOrProcess<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-keyword">SELECT</span> line_type,line_code,line_name<br><span class="hljs-keyword">from</span> A<br><span class="hljs-keyword">where</span> project_code <span class="hljs-operator">=</span> #&#123;projectCode&#125;<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> line_type,line_code,line_name<br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;3&#x27;</span>,line_code,line_name<br><span class="hljs-keyword">from</span> B<br><span class="hljs-keyword">where</span> project_code <span class="hljs-operator">=</span> #&#123;projectCode&#125;<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> line_code,line_name<br></code></pre></td></tr></table></figure><p>从 <code>#&#123;projectCode&#125;</code> 可见，该SQL脚本需要projectCode作为查询参数。而这里之所以要这么设计，使用一个Union，是为了满足前面的条件，因为A表可能又有line又有process数据，B表只有line数据，那么，当我们传入项目编码，就可以同时在表中搜寻：</p><p>它有以下几种可能发生：</p><ul><li>该项目只有line,line数据只在A表。这种情况我们从A表获取到对应的数据，B表没有获取到数据，union后也不会影响到从A表获取到的数据；</li><li>该项目只有line,line数据只在B表。这种情况我们从B表获取到对应的数据，A表没有获取到数据，union后也不会影响到从B表获取到的数据；</li><li>该项目的Line数据在A，B表都有，因此我们会从A，B表分别获取数据，union后合并。并且从B表获取的数据我们直接给type列命名为了’3’，这是因为B表只有表示为3的line数据。同时，由于sql的特性，union在前面的那个表字段名会覆盖后面的那个表字段，这样达成了我们的要求。</li><li>该项目只有process，process数据我们知道只在A表有，因此B表不会获取到数据，union后也不会影响到从A表获取到的数据；</li><li>该项目既有process又有line，同该项目的Line数据在A，B表都有的情况。</li></ul><p>到此，我们在后端对数据的采集完成了，前端怎么收集呢？</p><p>很显然，我们需要对收集到的数据的type做一个判断，然后把它们分别放到对应的el-option的循环里面展示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">toSectionSearch</span>(<span class="hljs-params">val</span>)&#123;<br>            <span class="hljs-comment">// project can not be null</span><br>            <span class="hljs-keyword">if</span>(<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span> == <span class="hljs-string">&quot;&quot;</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span> == <span class="hljs-literal">undefined</span><br>            )&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;project can not be null&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// Some projects only have processes or lines, and some have both processes and lines</span><br>            <span class="hljs-keyword">if</span>(val != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectLoading</span> = <span class="hljs-literal">true</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span>=[];<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span>=[];<br>                lineProcessApi.<span class="hljs-title function_">lineOrProcess</span>(&#123;<br>                    <span class="hljs-attr">projectCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span><br>                &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">let</span> sectionData = res.<span class="hljs-property">data</span>;<br>                    <span class="hljs-comment">// lineType is 3 means line</span><br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span> = sectionData.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span>&#123;<br>                        <span class="hljs-keyword">if</span>(item.<span class="hljs-property">lineType</span> == <span class="hljs-string">&quot;3&quot;</span>)&#123;<br>                            <span class="hljs-keyword">return</span>&#123;<br>                                <span class="hljs-attr">value</span>:item.<span class="hljs-property">lineCode</span>,<br>                                <span class="hljs-attr">label</span>:item.<span class="hljs-property">lineName</span><br>                            &#125;;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">return</span>&#123;<br>                                <span class="hljs-attr">value</span>:<span class="hljs-literal">null</span>,<br>                                <span class="hljs-attr">label</span>:<span class="hljs-literal">null</span><br>                            &#125;;<br>                        &#125;<br>                    &#125;);<br>                    <span class="hljs-comment">// lineType is 3 means process</span><br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span> = sectionData.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">if</span>(item.<span class="hljs-property">lineType</span> == <span class="hljs-string">&quot;2&quot;</span>)&#123;<br>                            <span class="hljs-keyword">return</span>&#123;<br>                                <span class="hljs-attr">value</span>:item.<span class="hljs-property">lineCode</span>,<br>                                <span class="hljs-attr">label</span>:item.<span class="hljs-property">lineName</span><br>                            &#125;;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">return</span>&#123;<br>                                <span class="hljs-attr">value</span>:<span class="hljs-literal">null</span>,<br>                                <span class="hljs-attr">label</span>:<span class="hljs-literal">null</span><br>                            &#125;;<br>                        &#125;                        <br>                    &#125;);<br>                    <span class="hljs-comment">// remove all null</span><br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">return</span> item.<span class="hljs-property">value</span> != <span class="hljs-literal">null</span>;<br>                    &#125;);<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">return</span> item.<span class="hljs-property">value</span> != <span class="hljs-literal">null</span>;<br>                    &#125;);<br>                &#125;);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">lineList</span>=[];<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">processList</span>=[];<br>            &#125;<br><br>            <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectLoading</span>=<span class="hljs-literal">false</span>;<br>            &#125;);<br>        &#125;,<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">BaseAPI</span> <span class="hljs-keyword">from</span> ...<br><br><span class="hljs-comment">// use to run controller class as default</span><br><span class="hljs-keyword">const</span> api = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseAPI</span>(<span class="hljs-string">&#x27;/bi&#x27;</span>)<br><br>api.<span class="hljs-property">lineOrProcess</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">query</span>)&#123;<br>    <span class="hljs-keyword">return</span> api.<span class="hljs-title function_">httpRequest</span>(&#123;<br>        <span class="hljs-comment">// baseUrl is the default url &quot;/&quot; when the url is empty </span><br>        <span class="hljs-attr">url</span>:api.<span class="hljs-property">baseUrl</span> + <span class="hljs-string">&#x27;/lineOrProcess&#x27;</span>,<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:query || &#123;&#125;<br>    &#125;)<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里的Vue代码首先进行了project不能为空的判断,然后调用了<code>lineProcessApi</code>的<code>lineOrProcess</code>方法（如代码片段二）所示。</p><p>通过调用<code>lineOrProcess</code>方法，获取到的数据如我们之前所展示的表格那样。</p><p>然后我们进行了一个判断，使用Map函数对里面的每个值进行判断，如果type为2就把它放到processList里面，type为3就把它放到lineList里面，如果不是就赋值为null。值得注意的是因为，需要使用filter筛除掉这些null值，因为null值也会显示在下拉框里面，表示为一片空白。</p><p>至此功能就实现了，这里的Vue代码展示如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;el-select<br>:placeholder=<span class="hljs-string">&quot;process&quot;</span><br><span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span><br>size=<span class="hljs-string">&quot;mini&quot;</span><br>filterable<br>    clearable<br>:loading=<span class="hljs-string">&quot;selectLoading&quot;</span><br>    v-model=<span class="hljs-string">&quot;queryParam.processCode&quot;</span><br>    style=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span><br>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in processList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span>                    </span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br>&lt;/el-select&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;line&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">filterable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;selectLoading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryParam.lineCode&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;margin-right:15px;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in lineList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span>                    </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="表格数据展示"><a href="#表格数据展示" class="headerlink" title="表格数据展示"></a>表格数据展示</h4><p>这一部分相对简单，element-ui有对应的el-table可做数据展示，这里我直接用了已经封装好的table组件，叫app-table:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div style=<span class="hljs-string">&quot;margin-top: 5px;&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-tabs</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;tabCurrent&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 6px;&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">app-table</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;table&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-table&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">v-loading</span>=<span class="hljs-string">&quot;dataTable.loading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">:boarder</span>=<span class="hljs-string">&quot;true&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;dataTable.dataList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">:columns</span>=<span class="hljs-string">&quot;tableFields&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">overflow</span>=<span class="hljs-string">&quot;auto&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-tabs</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pagination</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;dataTable.total&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">:page.sync</span>=<span class="hljs-string">&quot;queryParam.page&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">:limit.sync</span>=<span class="hljs-string">&quot;queryParam.limit&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">@<span class="hljs-attr">pagination</span>=<span class="hljs-string">&quot;handleList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pagination</span>&gt;</span></span><br>&lt;/div&gt;    <br><br><br></code></pre></td></tr></table></figure><p><code>:data</code> 存放后端传来的数据，<code>pagination</code>组件用于分页，需要page limit等参数进行页数显示和每页数据个数限制。</p><p>同时，获取数据的前端方法也是通过<code>@pagination</code>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">handleList</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">loading</span>=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">await</span> lineProcessApi.<span class="hljs-title function_">findDetail</span>(&#123;<br>        <span class="hljs-attr">deptCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">deptCode</span>,<br>        <span class="hljs-attr">projectCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span>,<br>        <span class="hljs-attr">processCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">processCode</span>,<br>        <span class="hljs-attr">lineCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">lineCode</span>,<br>        <span class="hljs-attr">type</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">type</span>,<br>        <span class="hljs-attr">beginDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">beginDate</span>,<br>        <span class="hljs-attr">endDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">endDate</span>,<br>        <span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">name</span>,<br>        <span class="hljs-attr">employeeId</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">employeeId</span>,<br>        <span class="hljs-attr">page</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">page</span>,<br>        <span class="hljs-attr">limit</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">limit</span>,<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>,&#123;<br>            <span class="hljs-attr">dataList</span>:res.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>,<br>            <span class="hljs-attr">total</span>:res.<span class="hljs-property">data</span>.<span class="hljs-property">totalRow</span><br>        &#125;);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataTable</span>.<span class="hljs-property">loading</span>=<span class="hljs-literal">false</span>;<br>    &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><p>这是一个异步方法，调用<code>lineProcessApi</code>的<code>findDetail</code>方法，需要传递的参数已经显示出来了，即deptCode,projectCode等值，最后把获取的数据通过Object.assign分配给dataTable即可。</p><p>这一部分后端是如何实现的呢？</p><p>其实报表设计的思路很简单：</p><blockquote><p>了解前端需要什么数据，后端需要前端传入什么数据即可</p></blockquote><p>以这个思路出发，我们知道，想做查询，前端需要传给后端的参数就是页面上下拉框或者输入框的内容：</p><p>即deptCode, projectCode, processCode, lineCode, name, employeeId……等值，这些值存储在后端的一个DTO类中，通过mapper进行SQL查询，查询的结果放入一个VO类返回给前端。前端需要接收的数据，就是需要展示在表格的数据，即员工信息：name, address, type等等。</p><p>所以我们可以新建一个如下的DTO类，VO类也类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/** </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * ...</span><br><span class="hljs-comment">*/</span>   <br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(&quot;BaseDTO&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDTO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageParam</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> ...;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;deptCode&quot;)</span><br>    <span class="hljs-keyword">private</span> String deptCode;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;process&quot;)</span><br>    <span class="hljs-keyword">private</span> String processCode;<br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;line&quot;)</span><br>    <span class="hljs-keyword">private</span> String lineCode;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;type&quot;)</span><br>    <span class="hljs-keyword">private</span> String type;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;beginDate&quot;)</span><br>    <span class="hljs-keyword">private</span> String beginDate;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;endDate&quot;)</span><br>    <span class="hljs-keyword">private</span> String endDate;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-meta">@Query</span><br>    <span class="hljs-meta">@ApiModelProperty(&quot;employeeId&quot;)</span><br>    <span class="hljs-keyword">private</span> String employeeId;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>这个DTO类存放前端传来的数据，就可以按照正常的流程在Controller和Service层里面完成代码了，需要注意的是ServiceImpl类的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>publci PageResult&lt;BaseVO&gt; <span class="hljs-title function_">findDetail</span><span class="hljs-params">(BaseDTO queryParam)</span>&#123;<br>    <span class="hljs-comment">// if deptCode is null, then give a default dept code by userId</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(queryParam.getDeptCode()))&#123;<br>        queryParam.setDeptCode(anotherService.setHighDeptCode());<br>    &#125;<br>    Map&lt;String,Object&gt; pageParam = query.getPageParam();<br>    PageResult&lt;BaseVO&gt; vos = mapper.findDetail(queryParam.getPageRequest(),pageParam);<br>    <span class="hljs-keyword">return</span> vos;        <br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要做一些空值判断，因为用户刚刚看到页面的时候还没有传递任何参数，但是这个时候报表需要有一些值显示出来，因此在这里需要设置一些默认值。</p><p><code>pageParam</code>是beetlsql的分页类，存储了limit（每页显示数据个数）和page（当前页数）信息。</p><p>这些数据将在mapper层通过@Root注解组合查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * ...</span><br><span class="hljs-comment">*/</span>      <br>   PageResult&lt;BaseVO&gt; <span class="hljs-title function_">findDetail</span><span class="hljs-params">(PageRequest&lt;BaseDTO&gt; query, <span class="hljs-meta">@Root</span> Map pageParam)</span>;<br></code></pre></td></tr></table></figure><p>SQL代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql">findDetail<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-comment">-- @pageTag()&#123;</span><br>name,employeeId,sex...<br><span class="hljs-comment">-- @&#125;</span><br><span class="hljs-keyword">FROM</span>(<br>nbe.name <span class="hljs-keyword">as</span> name,<br>nbe.employeeId <span class="hljs-keyword">as</span> employeeId,<br>...<br><span class="hljs-keyword">FROM</span><br>employee nbe <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>(<br><span class="hljs-keyword">SELECT</span> nbe.deptId,nbd.deptName<br>    <span class="hljs-keyword">FROM</span> department nbd <span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> nbd.deptId <span class="hljs-operator">=</span> #&#123;deptCode&#125; <br>    <span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">BY</span> nbd.up_deptId <span class="hljs-operator">=</span> PRIOR nbd.deptId<br>) nbd <span class="hljs-keyword">ON</span> nbd.deptId <span class="hljs-operator">=</span> nbe.deptId<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> ...<br><span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-comment">-- @if(!isEmpty(projectCode) || !isBlank(projectCode))&#123;</span><br><span class="hljs-keyword">and</span> nbe.projectCode <span class="hljs-operator">=</span> #&#123;projectCode&#125;<br><span class="hljs-comment">-- @&#125;</span><br><span class="hljs-comment">-- @if(...)&#123;</span><br>...<br><span class="hljs-comment">-- @&#125;</span><br>...<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>nbe.name,<br>nbe.employeeId,<br>...)<br></code></pre></td></tr></table></figure><p>暂时忽略 <code>-- @</code> 的内容，这里的sql逻辑比较容易理解，关联几个相关的表，然后<code>where</code>对应的限定条件，然后通过<code>Group by</code> 去重。值得一提的是这里beetlsql的内容，首先之所以在select的最外层还嵌套了一层select是beetlsql的要求，如果要是用Group by 进行分页，需要在最外层进行嵌套。</p><p>那么，为什么去重不使用<code>distinct</code>呢？这里就要涉及beetlsql分页的一个缺陷了。</p><p>beetlsql在分页的时候需要计算出一个<code>TotalRow</code>属性，这个属性用于计算数据总数，然后分页的时候展示出来对应的页数。但是这个总数的计算方式与<code>select</code>内写的内容无关，beetlsql直接调用了<code>select count(*)</code> 函数新建了一个SQL查询作为<code>TotalRow</code>的结果，这也就导致了<code>select distinct</code>的结果与它发生了冲突（因为<code>select count(*)</code>不会去重），所以这里需要使用<code>Group by</code>。</p><p>但是另一个问题是，beetlsql在使用<code>Group by</code>的时候，不能直接对<code>Group by</code>的结果分页，需要在外面嵌套一层<code>select</code>才能分页，因此这里的SQL写成了内外嵌套的格式。</p><p><code>-- @pageTag()</code>用在<code>select</code>，可以实现分页计算；</p><p><code>-- @if(!isEmpty(projectCode) || !isBlank(projectCode))</code>用于条件判断，仅在if语句内的结果有效的时候，后面的SQL语句才会生效。</p><p>至此，数据表的整体逻辑实现完毕。</p><h4 id="直方图展示"><a href="#直方图展示" class="headerlink" title="直方图展示"></a>直方图展示</h4><p>该需要要求动态展示未来十个月的每个月员工合同到期数量，并且如果当月员工到期数为0，依然要显示出来。</p><p>直方图的绘制不能直接从后端开始，因为我们不知道需要什么参数现在。</p><p>需要的参数取决于页面如何绘制，这里需要使用到Echarts组件。因此，这里我创建一个新的Vue组件：histogram.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;echarts&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;echarts&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;width,height&#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> ...</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>:&#123;&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">props</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">width</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;2400px&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">height</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;200px&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">options</span>:<span class="hljs-title class_">Object</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">watch</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">options</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">handler</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newVal,oldVal</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">redraw</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">computed</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">myOptions</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> || &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">myChart</span>:<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span>=<span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span> = <span class="hljs-literal">null</span></span></span><br><span class="language-javascript"><span class="language-xml">        bus.$off(<span class="hljs-string">&#x27;toggleSideBar&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span> = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">echarts</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">setOption</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">resize</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            bus.$on(<span class="hljs-string">&#x27;toggleSideBar&#x27;</span>,<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">redraw</span>()</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">resize</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">showLoading</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">showLoading</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">hideLoading</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">hideLoading</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">redraw</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>) <span class="hljs-keyword">return</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">clear</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">setOption</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">myChart</span>.<span class="hljs-title function_">resize</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.echarts</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这个绘图组件需要接受传递给他的一些属性，它的使用如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter-container header-search&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:flex;flex-wrap:wrap;&quot;</span>&gt;</span></span><br><span class="language-xml">           </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-row</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 20px;&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;echart-box&quot;</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">histogram</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;myOptions&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;typeByMonth&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">histogram</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span>            </span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Histogram</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;...&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">AppTable</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">AppFilterForm</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">Histogram</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">CustCascader</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">myOptions</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">title</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">text</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">tooltip</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">trigger</span>:<span class="hljs-string">&quot;axis&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">axisPointer</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;shadow&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">grid</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">left</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">right</span>:<span class="hljs-string">&quot;...&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">xAxis</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">data</span>:[],</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">axisPointer</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;shadow&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">yAxis</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;value&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">                &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">series</span>:[</span></span><br><span class="language-javascript"><span class="language-xml">                    &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;...&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;bar&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">itemStyle</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                            <span class="hljs-attr">normal</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#5470c6&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                        <span class="hljs-attr">data</span>:[]</span></span><br><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                ],</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// plot chart</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">typeByMonth</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            lineProcessApi.<span class="hljs-title function_">plotChart</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">deptCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">deptCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">projectCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">projectCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">processCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">processCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">lineCode</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">lineCode</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">type</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">type</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">beginDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">beginDate</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">endDate</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">endDate</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">name</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">employeeId</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">employeeId</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">page</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">page</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">limit</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">queryParam</span>.<span class="hljs-property">limit</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span>(res.<span class="hljs-property">code</span> == <span class="hljs-number">200</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chartList</span> = res.<span class="hljs-property">data</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>.<span class="hljs-property">xAxis</span>.<span class="hljs-property">data</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chartList</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">month</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myOptions</span>.<span class="hljs-property">series</span>[<span class="hljs-number">0</span>].<span class="hljs-property">data</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chartList</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">count</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">typeByMonth</span>.<span class="hljs-title function_">redraw</span>();</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.echart-box</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dcdfe6</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">4px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.12</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.04</span>);</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这里，可见直方图的数据是通过<code>:options</code>即组件中的<code>watch</code>属性进行传递的，传递数据的方法则是通过调用<code>ref</code>里面的<code>typeByMonth</code>方法执行的。</p><p>这个方法与之前进行的数据查询方法很类似，但是区别在于接受的数据不再是需要显示在每个列中，而是如下所示：</p><table><thead><tr><th>month</th><th>count</th></tr></thead><tbody><tr><td>2023-1</td><td>300</td></tr><tr><td>2023-2</td><td>350</td></tr><tr><td>2023-3</td><td>400</td></tr></tbody></table><p>month列的数据将会被用作x轴展示，即分别是哪几个月：</p><p><code>this.myOptions.xAxis.data = this.chartList.map((item) =&gt; item.month);</code></p><p>count列的数据会被放在y轴展示，即每个月的员工数量：</p><p> <code>this.myOptions.series[0].data = this.chartList.map((item) =&gt; item.count);</code></p><p>所以前端接收的参数少了很多，这一部分逻辑只需要基于前文后端做查询的逻辑稍作修改即可。其实就是在SQL代码中做一点修改，不再返回<code>select</code>的详细信息，而是<code>group by</code> 月份后返回<code>count</code>函数的结果。</p><p>不过值得注意的是这里需要动态展示月份数据，因此需要在后端完成一部分逻辑；同时需求中还提示了，如果当月员工到期数为0，依然要显示出来。这与SQL的表达逻辑有点冲突，因为group by的时候可能会忽略掉0值（当然通过SQL也可以做到不忽略），但是这部分代码写在后端或许更好：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;chartVO&gt; <span class="hljs-title function_">plotChart</span><span class="hljs-params">(chartDTO queryParam)</span>&#123;<br>        <span class="hljs-comment">// if deptCode is null, then give a default dept code by userId</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(queryParam.getDeptCode()))&#123;<br>            queryParam.setDeptCode(anotherService.setHighDeptCode());<br>        &#125;<br>        List&lt;chartVO&gt; chartData = mapper.plotChart(queryParam);<br>        List&lt;chartVO&gt; chartVO = nextNmonthData(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// Map, time complexity O(n)</span><br>        HashMap&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(chartData.size());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; chartData.size();i++)&#123;<br>            map.put(chartData.get(i).getMonth(),chartData.get(i).getCount());<br>        &#125;<br>        <span class="hljs-keyword">for</span>(chartVO vo : chartVO)&#123;<br>            <span class="hljs-keyword">if</span>(map.containsKey(vo.getMonth()))&#123;<br>                vo.setCount(map.get(vo.getMonth()));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> chartVO;        <br>    &#125;<br>    <br>    <span class="hljs-comment">/** return next N month data</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/...</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * ...</span><br><span class="hljs-comment">*/</span>    <br>    <span class="hljs-keyword">private</span> List&lt;chartVO&gt; <span class="hljs-title function_">nextNmonthData</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        AyyayList&lt;chartVO&gt; arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(n);<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-comment">// plus n month</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; n;i++)&#123;<br>            <span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> today.plusMonth(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ym</span> <span class="hljs-operator">=</span> LocalDate.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-mm&quot;</span>));<br>            <span class="hljs-type">chartVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">chartVO</span>();<br>            vo.setMonth(ym);<br>            vo.setCount(<span class="hljs-string">&quot;0&quot;</span>);<br>            arr.add(vo);<br>         &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里我新写了一个方法，用于创建一个存放未来十个月且都是0的List——<strong>chartVO</strong>。chartVO类只有两个属性，一个是month，一个是count。</p><p>然后这里使用了HashMap遍历SQL的查询结果，当SQL结果对应的月份有数据的时候，就把<strong>chartVO</strong>中对应的月份的数据从0更改为对应的数据，之所以使用HashMap是为了优化时间复杂度，限制在O(N)内。</p><p>至此，直方图的显示就完成了。</p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>完全的代码可以在这里看到：</p><p><a href = "https://github.com/lh728/BlogCode/tree/72fb88c591dde967f19cc58fe0756ec0838a2e37/Project%20Records%20-%20Enterprise%20Requirement/Dashboard%20with%20dropdown%20boxes%20Histogram" >Github</a></p><p>总的来说，这一次需求相比之前难了很多，但是整体逻辑并不难，报表需求的完成只需要想清楚：</p><blockquote><p>前端需要什么数据，后端需要前端传入什么数据</p></blockquote><p>另外，还学到了一些功能设计的思路：</p><ol><li><strong>级联选择器设计</strong></li><li><strong>下拉框设计与后端交互</strong></li><li><strong>有前提要求的下拉框与后端交互</strong></li><li><strong>表格数据展示与后端交互</strong></li><li><strong>直方图设计</strong></li></ol><hr><hr><h2 id="定时调度邮件任务优化"><a href="#定时调度邮件任务优化" class="headerlink" title="定时调度邮件任务优化"></a>定时调度邮件任务优化</h2><hr><h3 id="需求描述-4"><a href="#需求描述-4" class="headerlink" title="需求描述"></a>需求描述</h3><p>上一任设计定时调度任务的员工为图省事，在接收到调度任务的数据后，直接以toString的方式返回了数据，导致每次邮件内容都长这样：</p><p><img src="/images/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82%EF%BC%881%EF%BC%89.png" alt="项目记录——企业需求"></p><p>很显然，这不是利于人类阅读的模式，因此这个需求要求我更改这个需求的样式，把这些数据按照表格的形式展示出来，同时附件带有EXCEL文件。合理的样式应该如下所示：</p><p><img src="/images/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82%EF%BC%882%EF%BC%89.png" alt="项目记录——企业需求（2）"></p><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><p>看到需求，接下来需要解决的问题是：</p><ul><li><p>定时任务怎么调试？</p></li><li><p>获取的数据长什么样子？</p></li><li><p>应该怎么实现EXCEL作为附件写入邮件？</p></li><li><p>怎么让邮件按照需要的样子进行展示？</p></li></ul><h3 id="思路与实现-4"><a href="#思路与实现-4" class="headerlink" title="思路与实现"></a>思路与实现</h3><p>这个项目更多的是拓展了我的见识，了解了如何使用定时调度任务，以及了解了EasyPoi的导出excel等功能。</p><p>另外，这是一个纯后端项目：</p><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><p>首先，这个代码已经完成的阶段大概是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;0 0 23 * * ?&quot;)</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeEmployee</span><span class="hljs-params">()</span> <span class="hljs-keyword">throw</span> Exception&#123;<br>    ... get data by SQL ...<br>        <br>    List&lt;sysUserEntity&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;businessUserEntity&gt; arrList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <br>    ... put data into these two arraylist ...<br>        <br>    MailUtil.send(<span class="hljs-string">&quot;...@...&quot;</span>,userList.toString,...);<br>    MailUtil.send(<span class="hljs-string">&quot;...@...&quot;</span>,arrList.toString,...);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，根据我们之前提到的解决项目需求的方法思考：</p><blockquote><p><strong>通过思考问题解决需求</strong></p></blockquote><p>针对第一个问题，<strong>定时任务怎么调试？</strong></p><p>调试定时任务的方法可以参考之前我发的<a href="https://thellu.com/2023/06/08/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/">另一个帖子</a> 。</p><p>第二个问题，<strong>获取的数据长什么样子？</strong></p><p>之前的代码中，发送任务执行了两次，并且发送的是userList和arrList两个数组，这两个数组包装了sysUserEntity和businessUserEntity 两个实体类，所以我们可以想到发送的就是这两个实体类的数据。</p><p>而要同时发送两次，它们可能有大同小异的操作，所以我想到可能这里需要写一个泛型方法去接收这两个实体类。</p><p>第三个问题，<strong>应该怎么实现EXCEL作为附件写入邮件？</strong></p><p>这里可能就应该用到一些API了，例如 <code>Hutool MailUtil.send</code>方法发送邮件。</p><p>这个方法接收邮箱名等参数，更重要的是它还接收一个html模板参数，所以在这里我们可以写一个btl模板配置文件用于优化原本的邮件格式。</p><p>到此，基本的思路就已经有了。</p><p>第四个问题，<strong>怎么让邮件按照需要的样子进行展示？</strong></p><p>这个问题需要一步一步分析，并且它可以拓展为很多小问题。</p><p>首先，我们打算使用<code>Hutool MailUtil.send</code>方法发送邮件，这个方法接收什么参数呢？</p><h5 id="MailUtil-send"><a href="#MailUtil-send" class="headerlink" title="MailUtil.send"></a>MailUtil.send</h5><p>因为这个方法被重载过，所以我直接介绍我们要用的方法的参数：</p><p>Hutool的这个方法的<strong>源码</strong>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送邮件给多人</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> tos 收件人列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> subject 标题</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> content 正文</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> isHtml 是否为HTML格式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> files 附件列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">( Collection&lt;String&gt; tos, String subject, String content, <span class="hljs-type">boolean</span> isHtml, File... files)</span> &#123;<br>  Mail.setTos(tos.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[tos.size()]))<span class="hljs-comment">//</span><br>      .setTitle(subject)<span class="hljs-comment">//</span><br>      .setContent(content)<span class="hljs-comment">//</span><br>      .setHtml(isHtml)<span class="hljs-comment">//</span><br>      .setFiles(files)<span class="hljs-comment">//</span><br>      .send();<br>&#125;<br></code></pre></td></tr></table></figure><p>总结一下，它需要这些参数：</p><ul><li>tos 收件人，正常可以设置多个，这里只有一个收件人</li><li>subject 邮件标题</li><li>content 邮件正文，可以是文本，也可以是HTML内容</li><li>isHtml 是否为HTML，如果是，那参数3识别为HTML内容</li><li>File 可选：附件，可以为多个或没有，将File对象加在最后一个可变参数中即可</li></ul><p>所以，可以看出来，如果我们希望修改邮件的格式，需要增加一个html页面在参数中。而且，这个html页面还需要把数据传进去，在邮件中显示出来。所以，这里我使用了<code>BeelUtil</code>的<code>template</code>，它需要一个<code>btl</code>文件。</p><p>这个文件按照html格式在邮件开头增加了</p><p>“Dear Manager: Employee who resigned … “ 这段话，同时用 td 等html标签生成了一个表格，数据采用 <code>jsp</code> 动态生成，这里就不详细展示了。</p><p>这里想要使用 BeelUtil 导入模板的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">GroupTemplate</span> <span class="hljs-variable">gt</span> <span class="hljs-operator">=</span> BeelUtil.getGt();<br><span class="hljs-type">Template</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> gt.getTemplate(templateKeyPath);<br>Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;lists&quot;</span>,listsCopy);<br>template.binding(map)<br></code></pre></td></tr></table></figure><p>templateKeyPath 是 btl 文件的路径，listsCopy是复制的arraylist的数据。之所以要复制一份，是因为如果不复制一份用原数据的话，template 在binding之后这些数据就消失了，最后对导致 template 找不到需要的数据，发出一个空邮件。</p><h5 id="Excel-导出"><a href="#Excel-导出" class="headerlink" title="Excel 导出"></a>Excel 导出</h5><p>搞定模板了，现在由于我们还需要在邮件中添加一个excel附件，所以需要先把这些数据导出到一个excel里面，然后最后把这个excel文件放在 <code>MailUtil.send</code> 的参数里面。</p><p>Excel文件的导出，这里选用的是 <code>EasyPoi</code> 的<code>ExcelExportUtil.exportExcel</code> 方法</p><p>这个方法也有很多次重载，选择我们要使用的，<strong>源码</strong>展示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据Entity创建对应的Excel</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> entity</span><br><span class="hljs-comment"> *            表格标题属性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pojoClass</span><br><span class="hljs-comment"> *            Excel对象Class</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dataSet</span><br><span class="hljs-comment"> *            Excel对象数据List</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Workbook <span class="hljs-title function_">exportExcel</span><span class="hljs-params">(ExportParams entity, Class&lt;?&gt; pojoClass, Collection&lt;?&gt; dataSet)</span> &#123;<br>Workbook workbook;<br><span class="hljs-keyword">if</span> (ExcelType.HSSF.equals(entity.getType())) &#123;<br>workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dataSet.size() &lt; <span class="hljs-number">1000</span>) &#123;<br>workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>workbook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SXSSFWorkbook</span>();<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelExportServer</span>().createSheet(workbook, entity, pojoClass, dataSet,<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> workbook;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见，<code>exportExcel</code> 方法需要的参数是：</p><ul><li>entity exportParams类，这个类里面包含了excel文件的各种属性，例如标题，标题行内容等等</li><li>pojoClass 需要转变的entity类，在这个例子里面就是<code>sysUserEntity.class</code> 和 <code>businessUserEntity.class</code></li><li>dataSet 传入的数据</li></ul><p>这里出于隐私角度，不详细介绍我要在这里设置的exportParams了，而是封装在<code>getExportParams</code>方法里面了。最后把导出的excel读入作为 <code>MailUtil.send</code> 的参数使用。具体如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// set title in excel    </span><br><span class="hljs-type">ExportParams</span> <span class="hljs-variable">export</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getExportParams(title);<br>        <br><span class="hljs-comment">// export Excel</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> ExcelExportUtil.exportExcel(export,entityClass,lists);<br>...<br>com.spire.xls.<span class="hljs-type">Workbook</span> <span class="hljs-variable">_workbook</span> <span class="hljs-operator">=</span> poiUtils.convertToSpireWorkbook(workbook);<br><span class="hljs-comment">// encapsulation file outputStream method</span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getFileAttach(_workbook);<br><span class="hljs-comment">// send email</span><br>MailUtil.send(<span class="hljs-string">&quot;....@...&quot;</span>,subjectTitle,template.render(),<span class="hljs-literal">true</span>,file);<br></code></pre></td></tr></table></figure><ul><li><p><code>title</code> 是要手动传入的标题字符串，通过getExportParams设置为excel 内部的标题。</p></li><li><p><code>subjectTitle</code>  是要手动传入的邮件标题字符串。</p></li><li><p><code>template.render()</code> 是对前文获取到的template模板进行渲染</p></li></ul><p>但是这里有个问题，这个 entityClass 是需要的类，而对这个例子，我们知道，指的是<code>sysUserEntity.class</code> 和 <code>businessUserEntity.class</code>，可是这是个泛型方法！因为类型擦除的原因，你不能直接获取 <code>T.class</code> 。</p><p>那么，问题来了——怎么获取泛型类型？</p><h5 id="反射获取泛型Class对象"><a href="#反射获取泛型Class对象" class="headerlink" title="反射获取泛型Class对象"></a>反射获取泛型Class对象</h5><p>在idea 里面尝试写 <code>T.class</code> 连编译都无法通过，那么应该怎么办呢？</p><p>虽然泛型会在字节码编译过程中被擦除，但是<code>Class</code>对象会通过<code>java.lang.reflect.Type</code>记录其实现的接口和继承的父类信息。我们以<code>ArrayList&lt;E&gt;</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> strings.getClass().getGenericSuperclass();<br><span class="hljs-comment">// genericInterfaces = java.util.AbstractList&lt;E&gt;</span><br>System.out.println(<span class="hljs-string">&quot;genericSuperclass = &quot;</span> + genericSuperclass);<br></code></pre></td></tr></table></figure><p>结果是 占位符 E。</p><p>但是显然，我们想要的是String 而不是那个E。</p><p>genericSuperclass 是 <code>Type</code> 类型，而<code>Type</code>有四种类型：</p><ul><li><code>GenericArrayType</code> 用来描述一个参数泛型化的数组。</li><li><code>WildcardType</code> 用来描述通配符<code>?</code>相关的泛型，包含的<code>?</code>、下界通配符<code>? super E</code> 、上界通配符<code>? extend E</code>。</li><li><code>Class&lt;T&gt;</code> 用来描述类的<code>Class</code>对象。</li><li><code>ParameterizedType</code> 用来描述参数化类型。</li></ul><p>看看instanceof 它们分别会输出什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br> <br><span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> strings.getClass().getGenericSuperclass();<br> <br>System.out.println( genericSuperclass <span class="hljs-keyword">instanceof</span> ParameterizedType); <span class="hljs-comment">// true</span><br>System.out.println( genericSuperclass <span class="hljs-keyword">instanceof</span> Class); <span class="hljs-comment">// false</span><br>System.out.println( genericSuperclass <span class="hljs-keyword">instanceof</span> WildcardType); <span class="hljs-comment">// false</span><br>System.out.println( genericSuperclass <span class="hljs-keyword">instanceof</span> GenericArrayType); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>所以，选择参数化类型方法能获得什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">parameterizedType</span> <span class="hljs-operator">=</span> (ParameterizedType) genericSuperclass;<br>Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();<br>System.out.println(<span class="hljs-string">&quot;actualTypeArguments = &quot;</span> + Arrays.toString(actualTypeArguments));<br></code></pre></td></tr></table></figure><p>返回的Type[] 数组里面只有一个 [E]，看来结果还是E，似乎失败了。</p><p>但是为什么呢？</p><p>原因其实在ArrayList上，看看ArrayList的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br>&#123;<br>... <br>&#125;<br></code></pre></td></tr></table></figure><p>ArrayList实例化时只指定了自己的泛型类型而没有指定父类<code>AbstractList</code>的具体泛型，所以获取到的还是占位符<code>E</code>。</p><p>那在这里，实际操作的时候，我要是就是想要 arrayList<String> 里面的 String 类型应该怎么办呢？</p><p>实际上有个简单的方法：（构建匿名子类实现）</p><blockquote><p>ArrayList<String> strings &#x3D; new ArrayList<String>(){}; &#x2F;&#x2F; 看这里最后加了个大括号</p></blockquote><p>我们通过大括号<code>&#123;&#125;</code>就可以重写实现父类的方法并指定父类的泛型具体类型。为什么呢？因为加一个大括号这种写法相当于是定义匿名内部类，编译时可以确定类型为String。</p><p>那项目这里我们就可以这么写了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> lists.getClass().getGenericSuperclass();<br>Class&lt;?&gt; entityClass = (Class&lt;?&gt;)((ParameterizedType) genericSuperclass).getActualTypeArguments()[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>lists 就是我们要传入的 ArrayList<T> 了。</p><h5 id="在配置文件设置收件人"><a href="#在配置文件设置收件人" class="headerlink" title="在配置文件设置收件人"></a>在配置文件设置收件人</h5><p>到这一步，基本上代码已经完成了，但是目前收件人的邮箱是固定的，固定在 <code>MailUtil.send</code> 的第一个参数里面。</p><p>如果我还希望在配置文件里面更改这个收件人邮箱怎么办呢？</p><p>很简单，在 application.properties 里面设置键值对：</p><blockquote><p>auto.email&#x3D;”<a href="mailto:&#97;&#97;&#x61;&#97;&#x61;&#x40;&#98;&#x62;&#x62;&#x62;&#98;&#46;&#x63;&#x6f;&#x6d;">&#97;&#97;&#x61;&#97;&#x61;&#x40;&#98;&#x62;&#x62;&#x62;&#98;&#46;&#x63;&#x6f;&#x6d;</a>“</p></blockquote><p>在Java Bean注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;auto.email&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String email;<br></code></pre></td></tr></table></figure><p>然后在 <code>MailUtil.send</code> 的参数里面写 <code>this.email</code> 即可。</p><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>完全的代码大致如此：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;auto.email&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String email;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendDeletedEmployeeAuto</span><span class="hljs-params">(List&lt;T&gt; lists, String templateKeyPath,String subjectTitle,</span><br><span class="hljs-params">                                       String title)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isNotEmpty(lists) &amp;&amp; lists.size() &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// Get the generic type</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> lists.getClass().getGenericSuperclass();<br>        Class&lt;?&gt; entityClass = (Class&lt;?&gt;)((ParameterizedType) genericSuperclass).getActualTypeArguments()[<span class="hljs-number">0</span>];<br>        <br>        <span class="hljs-comment">// Copy arraylist to help template read</span><br>        List&lt;T&gt; listsCopy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrrayList</span>&lt;&gt;();<br>        listsCopy = ListUtil.toCopyOnWriteArrayList(lists);<br>        <br>        <span class="hljs-comment">// template</span><br>        <span class="hljs-type">GroupTemplate</span> <span class="hljs-variable">gt</span> <span class="hljs-operator">=</span> BeelUtil.getGt();<br>        <span class="hljs-type">Template</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> gt.getTemplate(templateKeyPath);<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;lists&quot;</span>,listsCopy);<br>        template.binding(map)<br>            <br>        <span class="hljs-comment">// set title in excel    </span><br>        <span class="hljs-type">ExportParams</span> <span class="hljs-variable">export</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getExportParams(title);<br>        <br>        <span class="hljs-comment">// export Excel</span><br>        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> ExcelExportUtil.exportExcel(export,entityClass,lists);<br>        ...<br>        com.spire.xls.<span class="hljs-type">Workbook</span> <span class="hljs-variable">_workbook</span> <span class="hljs-operator">=</span> poiUtils.convertToSpireWorkbook(workbook);<br>        <span class="hljs-comment">// encapsulation file outputStream method</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getFileAttach(_workbook);<br>        <span class="hljs-comment">// send email</span><br>        MailUtil.send(<span class="hljs-built_in">this</span>.email,subjectTitle,template.render(),<span class="hljs-literal">true</span>,file);<br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>发送邮件后就可以按需求的样子展示了，具体的样式看自己写的html文件了。</p><p>这个需求是我之前没接触过的全新项目，还尝试了自己写一个泛型方法，可以说很有意思了。主要学习到了：</p><ol><li><strong><code>Hutool</code> 的 <code>MailUtil.send</code> 方法的使用</strong></li><li><strong><code>EasyPoi</code> 的<code>ExcelExportUtil.exportExcel</code> 方法使用</strong></li><li><strong>如何通过反射获取泛型类型</strong></li><li><strong>如何把配置文件属性注入类中使用</strong></li></ol><hr><hr><h2 id="点击下钻跳转新页面"><a href="#点击下钻跳转新页面" class="headerlink" title="点击下钻跳转新页面"></a>点击下钻跳转新页面</h2><hr><p>独立项目开始了</p><h3 id="需求描述-5"><a href="#需求描述-5" class="headerlink" title="需求描述"></a>需求描述</h3><p>对Vue 表格中的表格数据新增一个点击方法，点击数据可以跳转一个新页面，新页面有点击数据的详细信息。</p><p>假设我现在有一个已经实现的饼状图，显示出ABCD四个岗位的百分比，同时饼状图下方是一个表格，显示了岗位名，人数和百分比，大致如下所示：</p><p>​                                    <strong>【饼状图】</strong></p><table><thead><tr><th align="center">岗位类型</th><th align="center">人数</th><th align="center">百分比</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">100</td><td align="center">10%</td></tr><tr><td align="center">B</td><td align="center">200</td><td align="center">20%</td></tr><tr><td align="center">C</td><td align="center">300</td><td align="center">30%</td></tr><tr><td align="center">D</td><td align="center">400</td><td align="center">40%</td></tr></tbody></table><p>现在需要当我们点击人数的时候（即点击上面表格中的100），会跳转到一个新页面，新页面使用表格形式显示这100个人的信息，同时实现分页。如下所示：</p><table><thead><tr><th>岗位类型</th><th>姓名</th><th>工号</th><th>部门</th><th>职位</th><th>性别</th></tr></thead><tbody><tr><td>A</td><td>pyrrhic</td><td>025618</td><td>IT</td><td>Staff</td><td>M</td></tr><tr><td>A</td><td>Mike</td><td>159736</td><td>Business</td><td>CEO</td><td>F</td></tr><tr><td>A</td><td>Done</td><td>789156</td><td>IT</td><td>Junior</td><td>F</td></tr></tbody></table><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><p>看到需求，我思考了一下，觉得需要解决的问题是：</p><ul><li><p>怎么添加前端的点击事件？</p></li><li><p>前端怎么实现跳转新页面？</p></li><li><p>新页面需要实现哪些功能？</p></li><li><p>原数据已经有了，我应该怎么获取？在哪里获取？</p></li><li><p>前后端分别需要什么参数？</p></li></ul><h3 id="思路与实现-5"><a href="#思路与实现-5" class="headerlink" title="思路与实现"></a>思路与实现</h3><p>在这里，与上一个项目不同，这里不仅需要前端代码反推后端，新的解决企业项目的思路是：</p><blockquote><p><strong>通过思考问题解决需求</strong></p></blockquote><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul><li>第一个问题：<strong>怎么添加前端的点击事件</strong></li></ul><p>这里原本功能的实现者使用的element-ui的el-table实现表格功能，但是我们知道Vue表格的数据不是写死的，而是通过:data动态绑定的，el-table组件也没有列绑定事件，那应该怎么才能给对应的列添加点击事件呢？</p><p>这里困扰了我很久，网上相关的模棱两可的说法有太多了，也没有找到很合适的。最后我决定查看已经实现的其他页面，寻找可能的解决方案。这诞生了一个新的解决企业项目的思路：</p><blockquote><p><strong>举一反三</strong></p></blockquote><p>通过我不懈的思考和寻找，我发现在另外一个页面同样实现了类似的需求。它虽然没有给数据里面添加点击事件，但是它对表格内的某一列的数据做了判断，如果为空即返回“空”字符串。</p><p>这给了我一个启示，只要这么写就好：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template #value = <span class="hljs-string">&quot;scope&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;employeeDetail(scope.row)&quot;</span>&gt;</span>&#123;&#123;scope.row.value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>    <br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>通过#号绑定data里面带有slot属性的列，再调用click方法，Vue就能找到对应的方法了。这里的方法需要能够跳转新页面。</p><ul><li>那么，第二个问题：<strong>前端怎么实现跳转新页面？</strong></li></ul><p>这里需要使用push方法，即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">employeeDetail</span>(<span class="hljs-params">row</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-title function_">push</span>(&#123;<br>            <span class="hljs-attr">name</span>: ...,<br>            <span class="hljs-attr">params</span>:&#123;<br>                ...<br>            &#125;<br>        &#125;)<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><p>很显然，找到公司代码山里面的router.vue，添加你要跳转的页面名字和链接，同时指向一个新的你要创建的Vue组件——你即将创建的Vue组件就是新的页面，现在只需要create一个new file即可！</p><ul><li>现在第三个问题：<strong>新页面需要实现哪些功能？</strong></li></ul><p>很显然，我需要一个 el-table 表格存放后端传来的数据，我还需要一个pagination标签对表格进行分页。</p><p>至此，前端的基本框架和内容已经基本架构完毕了，现在看看后端</p><h4 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h4><ul><li>第四个问题：<strong>原数据已经有了，我应该怎么获取？在哪里获取？</strong></li><li>第五个问题：<strong>前后端分别需要什么参数？</strong></li></ul><p>这两个问题都可以通过分析后端解决。</p><p>通过分析后端方法，能了解到后端这里获取员工数量是通过这样的逻辑：</p><blockquote><p>Controller -&gt; Service -&gt; Mapper -&gt; SQL</p></blockquote><p>最后通过SQL的count函数获取的人数，大致如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(employeeId) <span class="hljs-keyword">as</span> A<br><span class="hljs-keyword">from</span> ... <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ...<br><span class="hljs-keyword">where</span> deptId <span class="hljs-operator">=</span> #&#123;deptId&#125; <br><span class="hljs-keyword">and</span> jobType <span class="hljs-operator">=</span> #&#123;jobType&#125;<br><span class="hljs-keyword">and</span> ...<br></code></pre></td></tr></table></figure><p>这里吐槽一下公司用的BeetlSQL + Oracle SQL这种梦幻组合，有很多不同于之前了解的Mysql语法，而且还能添加 if函数，可以说非常奇特，让我大开眼界。</p><p>那这个逻辑稍微修改一下就可以获得员工的详细信息了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> jobType,Name,employeeId,dept,position,sex<br><span class="hljs-keyword">from</span> ... <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ...<br><span class="hljs-keyword">where</span> deptId <span class="hljs-operator">=</span> #&#123;deptId&#125; <br><span class="hljs-keyword">and</span> jobType <span class="hljs-operator">=</span> #&#123;jobType&#125;<br><span class="hljs-keyword">and</span> ...<br></code></pre></td></tr></table></figure><p>参数什么的都不需要改，可以说很方便了。而且也可以猜到，需要的参数应该就是部门ID（deptId）和工作类型（jobType）了。另外分页可能也需要参数 page 和limit。</p><p>只需要新建一个VO类，存放返回的 jobType,Name,employeeId,dept,position,sex 信息即可，略过Controller类和Service类代码，直接看Service层的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageResult&lt;BaseVO&gt; <span class="hljs-title function_">findEmployeeDetail</span><span class="hljs-params">(BaseDTO query)</span>&#123;<br>    <span class="hljs-comment">// If deptId is null, set a default id by its login session</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(query.getDeptId()))&#123;<br>        query.setDeptId(getDefaultDeptId());<br>    &#125;<br>    <span class="hljs-comment">// Extract parameters except pagination parameters</span><br>    Map&lt;String,Object&gt; pageParam = query.getPageParam();<br>    <br>    PageResult&lt;BaseVO&gt; BaseVOs = mapper.findEmployeeDetail(query,pageParam);<br>    <span class="hljs-keyword">return</span> BaseVOs;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><p>这里防止了一个空指针，然后还完成了分页逻辑，只需要向前端索要上一个页面传递的参数即可。</p><p>至此，后端需要做的事情也基本清楚了，需求的整体已经很清晰了。</p><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p>最后，在新页面，前端可以通过api的方法传递参数（接收上一个页面push过来的<code>this.$router.params.deptId</code>等等），再多传入几个分页参数，例如<code>page:1</code> 和 <code>limit:10</code> 。最后调用Controller方法，返回的数据，前端通过<code>.then(res =&gt; ...)</code> 来接收即可。</p><p>这个需求相比上一个已经有了一点难度，更重要的是又有了两个解决项目需求的思路：</p><ol><li><p><strong>通过思考问题解决需求</strong></p></li><li><p><strong>举一反三</strong></p></li></ol><hr><h2 id="连接迁移"><a href="#连接迁移" class="headerlink" title="连接迁移"></a>连接迁移</h2><hr><p>最近接到了自己的第一个需求，为一个已经做好的页面做迁移使得可以做到外部访问并展示的效果。什么意思呢？后文会对这个需求做解释。</p><p>总之，作为一个开发新人，不得不说面对企业级的庞大代码，后端前端加起来上百个类的时候是一脸懵的，更别说还需要直接面对一个自己之前没接触过的需求了。当然，产品经理也明白一来让我做很难的需求也不现实，这个需求的实际实现并不算难，很多关键部位的代码已经被其他人完成了，但是对我来说也还是一个巨大的挑战。</p><h3 id="需求描述-6"><a href="#需求描述-6" class="headerlink" title="需求描述"></a>需求描述</h3><p>简单的说，这个项目需求要求我把原来放在管理系统中的页面可以通过外部链接进行访问。</p><p>前端的页面和功能很多是通过类似Vue-element-admin的方式展示的。我需要把其中一个已经完成的Vue页面——一张BI报表，绕过登录系统做到可以直接通过链接访问的形式（当然并不是完全不需要登录验证了，只是换了一种验证形式），至于完成后会拿来怎么用，现在我不是太清楚，可能会有一些别的APP的超链接指向这里。</p><h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h3><p>需求是这样的，但是依旧有很多不理解的问题：</p><ul><li>链接？是什么样的链接去访问的？它应该是什么样子的？</li><li>前端应该怎么实现？</li><li>后端需要做什么？</li><li>其他同事已经做了哪些事情？</li></ul><h3 id="思路与实现-6"><a href="#思路与实现-6" class="headerlink" title="思路与实现"></a>思路与实现</h3><h4 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h4><p>作为一个新人，需要不断学习，但是当然不能是闷头学习。</p><p>通过请教前辈，了解到这个连接迁移功能的实现是在一个Vue页面实现的，也是通过这一节课，我学到了了解项目，破解需求的第一个思路：</p><blockquote><p><strong>前端代码反推后端</strong></p></blockquote><p>这里展示一下大概的前端页面构造，出于隐私考虑隐瞒了具体信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;XXcomponents[index]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span>    </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br>&lt;script&gt;<br>   <span class="hljs-keyword">import</span> ...<br>   <br>   <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>       <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-keyword">return</span> &#123;<br>               <span class="hljs-title class_">XXcomponents</span>:[<br>                   <span class="hljs-string">&#x27;a&#x27;</span>,<br>                   <span class="hljs-string">&#x27;b&#x27;</span>,<br>                   <span class="hljs-string">&#x27;c&#x27;</span>...<br>               ],<br>               <span class="hljs-attr">index</span>:<span class="hljs-number">0</span><br>           &#125;<br>       &#125;,<br>       <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-variable language_">window</span>.<span class="hljs-property">myData</span> = <span class="hljs-variable language_">this</span><br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">routeData</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">query</span><br>           <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">method</span>()<br>       &#125;,<br>       <span class="hljs-attr">methods</span>:&#123;<br>           <span class="hljs-title function_">method</span>(<span class="hljs-params"></span>)&#123;<br>               <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;/.../loginByUsername&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">routeData</span>.<span class="hljs-property">data</span>)<br>                 .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                   <span class="hljs-keyword">let</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">XXcomponents</span>.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> i == <span class="hljs-variable language_">this</span>.<span class="hljs-property">routeData</span>.<span class="hljs-property">name</span> )<br>                   ...<br>               &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                   ...<br>               &#125;)<br>           &#125;<br>       &#125;,<br>       <span class="hljs-attr">components</span>:&#123;<br>             a,<br>             b,<br>             c...<br>       &#125;       <br>   &#125; <br>        <br>&lt;script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这里的template标签呈现前端内容，可以看到只有一个:is绑定的动态组件，联想一下我们要做的是连接迁移，所以有理由可以<strong>猜想</strong>这里的components可能是根据index确定传入的页面是什么，然后在前端展示。</p><p>于是我自然地去看data属性里面的数据，可以看到XXcomponents对应的正好也是components属性里面的组件，这些组件是通过import导入的其他已经写好的Vue页面，这证实了我的猜想。</p><p>现在，我们已经知道了前端是怎么通过一个Vue页面实现连接迁移的功能了：</p><blockquote><p>通过切换index切换列表里面要展示的Vue页面</p></blockquote><p>那么，后端呢？</p><p>我看到这里Vue的生命周期create里面有写this.$route.query，这说明这个Vue页面创建的时候需要接收参数，这里的参数是直接写在网址里面的，this.$route.query的结果被写入了this.routeData，那后面的代码出现了this.routeData.name和this.routeData.data，那有理由相信传入链接里面的参数应该是类似这个样子的，例如：</p><blockquote><p> localhost:8888&#x2F;index&#x2F;data&#x3D;123&amp;name&#x3D;123</p></blockquote><p>那传入的数据就是:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>data<span class="hljs-punctuation">:</span><span class="hljs-number">123</span><span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span><span class="hljs-number">123</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="后端-2"><a href="#后端-2" class="headerlink" title="后端"></a>后端</h4><p>接收参数的事情往往和后端就有关系了，那它接收什么参数呢？</p><p>暂时不知道了，但是后面有个method方法，这个方法内部使用了异步的dispatch方法，向一个叫做loginByUsername的方法发送了参数，发送的值是我们前文提到的链接中的name属性对应的值。</p><p>现在，前端访问了后端一个叫做loginByUsername的方法了，并且把其中的name属性对应的值以Json格式传递了过去。</p><p>打开后端idea，输入：<strong>ctrl + shift + f</strong>，寻找匹配的loginByUsername方法。</p><p>很快我就找到了匹配的方法，一个写在@Controller里面的@PostMapping方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br><span class="hljs-keyword">public</span> WebResult <span class="hljs-title function_">loginByUsername</span> <span class="hljs-params">(<span class="hljs-meta">@Requestbody</span> UserNameDTO userNameDTO)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> (userNameDTO.getUserName())<br>    <span class="hljs-comment">// get token</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> ...(userName);<br>    ......    <br>    <span class="hljs-keyword">return</span> WebResult.ok(token);<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserNameDTO</span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> String userName;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法接收一个@Requestbody 的UserNameDTO实体类，然后用它获取username，把username通过Service层封装好的方法经过Base64加密后作为认证信息返回给前端。（WebResult是一个封装好的类，用于定制返回值到WSDL的映射）</p><p>至此，后端的功能也确认了：</p><blockquote><p>后端需要前端传入的userName信息，然后通过userName产生一个用于身份验证、网页跳转即连接迁移的token返回给前端。</p></blockquote><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><p>最后，链接的data属性将会被后面的findIndex方法用作确定index，然后根据index匹配对应的vue页面进行展示。</p><p>到此，我们可以通过访问如下链接：</p><blockquote><p>localhost:8888&#x2F;index&#x2F;data&#x3D;study&amp;name&#x3D;James</p></blockquote><p>匹配到一个属于James的study.vue前端界面，并展示对应的信息。</p><p>总的来说，这个需求并不难，其中核心的功能实现，例如dispatch对应的网址，根据Index匹配对应的vue页面，后端的token生成等功能的实现已经被封装了。不过作为第一个需求，对我来说也有一定难度，更重要的是学会了</p><ol><li><strong>如何在企业项目中理清思路——通过前端代码反推后端代码</strong></li><li><strong>重要的ctrl + shift + f</strong></li></ol><hr><hr>]]></content:encoded>
      
      
      <category domain="http://lh728.github.io/categories/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/">项目记录</category>
      
      
      <category domain="http://lh728.github.io/tags/Java/">Java</category>
      
      <category domain="http://lh728.github.io/tags/SQL/">SQL</category>
      
      <category domain="http://lh728.github.io/tags/Vue/">Vue</category>
      
      
      <comments>http://lh728.github.io/2023/06/19/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BC%81%E4%B8%9A%E9%9C%80%E6%B1%82/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo转换语言，适用任何主题</title>
      <link>http://lh728.github.io/2023/06/17/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/</link>
      <guid>http://lh728.github.io/2023/06/17/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/</guid>
      <pubDate>Fri, 16 Jun 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;本文主要讨论Hexo如何最简单地实现国际化，而且该方法适用性很高，对使用哪种主题我个人认为没有什么要求&lt;/p&gt;
&lt;h1 id=&quot;理想解决方案&quot;&gt;&lt;a href=&quot;#理想解决方案&quot; class=&quot;headerlink&quot; title=&quot;理想解决方案&quot;&gt;&lt;/a&gt;理想解决方案&lt;/h</description>
        
      
      
      
      <content:encoded><![CDATA[<p>本文主要讨论Hexo如何最简单地实现国际化，而且该方法适用性很高，对使用哪种主题我个人认为没有什么要求</p><h1 id="理想解决方案"><a href="#理想解决方案" class="headerlink" title="理想解决方案"></a>理想解决方案</h1><p>在主页存在一个按钮，通过单击该按钮可以实现一键切换语言的页面（本博客示例将是中英文）。同时该方法的实现不需要新买一个域名。</p><p>值得注意的是，该方法不是直接翻译，所以需要同时维护N份post的博客文件（N是你的语言数量），所以如果你需要更新博客，需要同时更新N份文件。</p><p>以下的实现流程将会以中英文作为示例，更多语言参照此教程即可：</p><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><p>（1）分割页面文件夹，假设你原来的文件都存放在一个叫做hexo的文件夹中，主要存放的是中文文件。现在新建一个叫做hexo-en的文件夹用于存放英文的文件夹。注意：它们是同级的！</p><p>构建好的文件夹应该如下：</p><p><img src="/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(1).png" alt="文件夹位置展示"></p><p>（2）复制除了node_modules外的所有文件从hexo到hexoen，将站点分开</p><p>（3）接下来修改两个hexo的 <strong>_config.yml</strong> 文件内容，下图第一个为hexo，第二个为hexo-en：（这一步是修改了hexo的主要语言）</p><p><img src="/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(2).png" alt="hexo"></p><p><img src="/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(3).png" alt="hexo-en"></p><p>（4）继续修改 <strong>_config.yml</strong> 的根目录url和root，下图第一个为hexo，第二个为hexo-en：</p><p><img src="/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(4).png" alt="hexo"></p><p><img src="/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(5).png" alt="hexo-en"></p><p>（5）修改你自己对应主题的menu的跳转链接，注意这里有个坑——<strong>你可以跳转向自己github.io&#x2F;en的链接，你也可以跳转向自己域名&#x2F;en的链接。我这里跳转github.io不知道为什么失败了，显示404，但是跳转域名thellu.com&#x2F;en成功了。</strong>你们可以按照自己实际情况选择跳转的地址。</p><p>另外，注意如果你是中文主页，menu则应该设置English;如果你是英文主页，menu应该设置中文。</p><p>下图第一个为hexo，第二个为hexo-en：</p><p><img src="/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(6).png" alt="hexo"></p><p><img src="/images/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98(7).png" alt="hexo-en"></p><p>（6）恭喜，现在基本的配置就完成了！现在在 hexoen文件夹执行 <strong>npm install</strong> 安装需要的插件</p><p>（7）最后，修改你每次提交文件到github的命令，你需要使用cp每次合并提交文件上去。我这里使用的是绝对路径，因此cd路径的时候方便修改地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /d/Blog/hexo &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd /d/Blog/hexoen &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; cd /d/Blog/hexo &amp;&amp; cp -r /d/Blog/hexoen/public/. /d/Blog/hexo/public/en/ &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>（8）恭喜，到现在配置就完成了！你可以看下检查自己的网站是否已经成功页面跳转了。唯一的缺点是点击会跳转到新页面而不是更新原页面。</p><h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><p>正常编写md文件后用上述代码上传的时候，有时会莫名其妙报错：</p><blockquote><p>err : Error: Spawn Failed</p></blockquote><p>问题一般出现在.deploy_git文件夹，这是由hexo框架渲染生成的一个Git仓库,*<code>hexo d</code>*命令就是将其push到github上。问题大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容导致了报错。</p><p>总而言之，删除这个文件就好。</p><p>然后调用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hexo">git config --global core.autocrlf false<br></code></pre></td></tr></table></figure><p>再执行hexo的clean g d指令即可。</p><p>但是要注意，这个报错还有两个原因：</p><ul><li>我们的提交到github代码采用的是绝对路径，如果你在hexoen打开git bash，那这个.deploy_git文件可能会保存在hexoen文件夹里，这个时候记得把它也删掉。</li><li>网络波动，删了.deploy_git等一会它自己就好了</li></ul>]]></content:encoded>
      
      
      <category domain="http://lh728.github.io/categories/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <category domain="http://lh728.github.io/tags/Hexo/">Hexo</category>
      
      
      <comments>http://lh728.github.io/2023/06/17/Hexo%E8%BD%AC%E6%8D%A2%E8%AF%AD%E8%A8%80%EF%BC%8C%E9%80%82%E7%94%A8%E4%BB%BB%E4%BD%95%E4%B8%BB%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java虚拟机类加载的初始化</title>
      <link>http://lh728.github.io/2023/06/17/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <guid>http://lh728.github.io/2023/06/17/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <pubDate>Fri, 16 Jun 2023 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;我们知道，《Java虚拟机规范》章节5.5 Initialization ^(1)^ 中严格规定了有且只有六种情况必须立即对类进行初始化：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;遇到new（实例化对象）、getstatic（读取一个没有被final修饰、没有在</description>
        
      
      
      
      <content:encoded><![CDATA[<p>我们知道，《Java虚拟机规范》章节5.5 Initialization ^(1)^ 中严格规定了有且只有六种情况必须立即对类进行初始化：</p><blockquote><ul><li>遇到new（实例化对象）、getstatic（读取一个没有被final修饰、没有在编译期把结果放入常量池的类的静态字段）、putstatic（设置一个没有被final修饰、没有在编译期把结果放入常量池的类的静态字段）或者invokestatic（调用一个类的静态方法）这四条字节码指令时，如果类没有进行初始化则需要触发初始化。</li><li>使用java.lang.reflect包的方法对类型进行反射调用</li><li>父类还没有初始化</li><li>虚拟机启动时，用户需要制定一个要执行的主类（main）</li><li>当使用java7新加入的动态语言支持时，如果一个MthodHandle实例最后的解析结果是REF_getStatic、REF_putstatic、REF_invokestatic、REF_newInvokeSpecial四种类型的方法句柄</li><li>一个接口定义了default修饰的接口方法，同时接口的实现类发生了初始化</li></ul></blockquote><p>除此之外，所有引用类型的方式都不会触发初始化，称为被动引用：</p><h2 id="子类引用父类"><a href="#子类引用父类" class="headerlink" title="子类引用父类"></a>子类引用父类</h2><p>通过子类引用父类的静态字段不会导致子类初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Super</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;System.out.println(<span class="hljs-string">&quot;Super&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Super</span>&#123;<br>    <span class="hljs-keyword">static</span>&#123;System.out.println(<span class="hljs-string">&quot;Sub&quot;</span>);&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeName</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(Sub.value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果是什么呢？会先输出“Super”，然后是value的值。</p><p>对于静态字段，只有直接定义这个字段的类才会被初始化，所以通过子类引用父类静态字段，也只有父类会初始化。</p><h2 id="数组引用类"><a href="#数组引用类" class="headerlink" title="数组引用类"></a>数组引用类</h2><p>通过数组定义来引用类，不会触发此类的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeName</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Sub[] sp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>[<span class="hljs-number">5</span>];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果是什么呢？</p><p>什么也没有。</p><p>可见Sub类并没有被初始化。不过这段代码触发了另一个名为“[Lcom.example.demo.Sub”的类的初始化阶段。这玩意是虚拟机自动生成的直接继承自Object的子类，创建动作由字节码指令anewarray（即新建引用数组）触发。</p><p>这个类代表的一维数组，用户可直接使用的只有被修饰为Public的length属性和clone方法，当然数组中应用的属性和方法都实现在这个类中。这是因为Java包装了数组元素的访问（在C中是数组指针的移动），这也就是为什么Java检测到数组越界会抛出ArrayIndexOutOfBoundsException异常而不是像C中的非法内存访问。</p><p>准确的说，Java的越界检查不是封装在数组元素访问的类中，而是封装在数组访问的xaload（数组的元素压栈）、xastore（针对数组的操作）字节码指令。</p><h2 id="常量池引用"><a href="#常量池引用" class="headerlink" title="常量池引用"></a>常量池引用</h2><p>常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Super</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;System.out.println(<span class="hljs-string">&quot;Super&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HELLO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeName</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(Super.HELLO);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的代码运行后也不会输出“Super”。</p><p>hello的常量值其实在编译阶段已经被转化成SomeName类对自身常量池的引用了,所以他们俩没什么关系了。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口和类有一点不同。接口其实也有初始化过程，不过接口不能像类一样用static代码块来输出初始化信息，编译器会为接口生成“<clinit>”类构造器，用于初始化接口中定义的成员变量。并且：</p><p>接口不要求父接口全部初始化，只有用到了才会初始化。</p><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>(1) Yellin, F. and Lindholm, T., 1996. The java virtual machine specification.</p>]]></content:encoded>
      
      
      <category domain="http://lh728.github.io/categories/%E5%90%8E%E7%AB%AF/">后端</category>
      
      
      <category domain="http://lh728.github.io/tags/Java/">Java</category>
      
      
      <comments>http://lh728.github.io/2023/06/17/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
